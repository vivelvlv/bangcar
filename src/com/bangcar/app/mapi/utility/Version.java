/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.bangcar.app.mapi.utility;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.EncodingUtils;

import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;

public class Version implements org.apache.thrift.TBase<Version, Version._Fields>, java.io.Serializable, Cloneable, Comparable<Version> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Version");

  private static final org.apache.thrift.protocol.TField VER_FIELD_DESC = new org.apache.thrift.protocol.TField("ver", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField FORCE_UPDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("forceUpdate", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField APK_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("apkUrl", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField NEW_FEATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("newFeature", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new VersionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new VersionTupleSchemeFactory());
  }

  public String ver; // required
  public boolean forceUpdate; // required
  public String apkUrl; // optional
  public String newFeature; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    VER((short)1, "ver"),
    FORCE_UPDATE((short)2, "forceUpdate"),
    APK_URL((short)3, "apkUrl"),
    NEW_FEATURE((short)4, "newFeature");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VER
          return VER;
        case 2: // FORCE_UPDATE
          return FORCE_UPDATE;
        case 3: // APK_URL
          return APK_URL;
        case 4: // NEW_FEATURE
          return NEW_FEATURE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FORCEUPDATE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.APK_URL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VER, new org.apache.thrift.meta_data.FieldMetaData("ver", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FORCE_UPDATE, new org.apache.thrift.meta_data.FieldMetaData("forceUpdate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.APK_URL, new org.apache.thrift.meta_data.FieldMetaData("apkUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NEW_FEATURE, new org.apache.thrift.meta_data.FieldMetaData("newFeature", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Version.class, metaDataMap);
  }

  public Version() {
  }

  public Version(
    String ver,
    boolean forceUpdate,
    String newFeature)
  {
    this();
    this.ver = ver;
    this.forceUpdate = forceUpdate;
    setForceUpdateIsSet(true);
    this.newFeature = newFeature;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Version(Version other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetVer()) {
      this.ver = other.ver;
    }
    this.forceUpdate = other.forceUpdate;
    if (other.isSetApkUrl()) {
      this.apkUrl = other.apkUrl;
    }
    if (other.isSetNewFeature()) {
      this.newFeature = other.newFeature;
    }
  }

  public Version deepCopy() {
    return new Version(this);
  }

  @Override
  public void clear() {
    this.ver = null;
    setForceUpdateIsSet(false);
    this.forceUpdate = false;
    this.apkUrl = null;
    this.newFeature = null;
  }

  public String getVer() {
    return this.ver;
  }

  public Version setVer(String ver) {
    this.ver = ver;
    return this;
  }

  public void unsetVer() {
    this.ver = null;
  }

  /** Returns true if field ver is set (has been assigned a value) and false otherwise */
  public boolean isSetVer() {
    return this.ver != null;
  }

  public void setVerIsSet(boolean value) {
    if (!value) {
      this.ver = null;
    }
  }

  public boolean isForceUpdate() {
    return this.forceUpdate;
  }

  public Version setForceUpdate(boolean forceUpdate) {
    this.forceUpdate = forceUpdate;
    setForceUpdateIsSet(true);
    return this;
  }

  public void unsetForceUpdate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FORCEUPDATE_ISSET_ID);
  }

  /** Returns true if field forceUpdate is set (has been assigned a value) and false otherwise */
  public boolean isSetForceUpdate() {
    return EncodingUtils.testBit(__isset_bitfield, __FORCEUPDATE_ISSET_ID);
  }

  public void setForceUpdateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FORCEUPDATE_ISSET_ID, value);
  }

  public String getApkUrl() {
    return this.apkUrl;
  }

  public Version setApkUrl(String apkUrl) {
    this.apkUrl = apkUrl;
    return this;
  }

  public void unsetApkUrl() {
    this.apkUrl = null;
  }

  /** Returns true if field apkUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetApkUrl() {
    return this.apkUrl != null;
  }

  public void setApkUrlIsSet(boolean value) {
    if (!value) {
      this.apkUrl = null;
    }
  }

  public String getNewFeature() {
    return this.newFeature;
  }

  public Version setNewFeature(String newFeature) {
    this.newFeature = newFeature;
    return this;
  }

  public void unsetNewFeature() {
    this.newFeature = null;
  }

  /** Returns true if field newFeature is set (has been assigned a value) and false otherwise */
  public boolean isSetNewFeature() {
    return this.newFeature != null;
  }

  public void setNewFeatureIsSet(boolean value) {
    if (!value) {
      this.newFeature = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VER:
      if (value == null) {
        unsetVer();
      } else {
        setVer((String)value);
      }
      break;

    case FORCE_UPDATE:
      if (value == null) {
        unsetForceUpdate();
      } else {
        setForceUpdate((Boolean)value);
      }
      break;

    case APK_URL:
      if (value == null) {
        unsetApkUrl();
      } else {
        setApkUrl((String)value);
      }
      break;

    case NEW_FEATURE:
      if (value == null) {
        unsetNewFeature();
      } else {
        setNewFeature((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case VER:
      return getVer();

    case FORCE_UPDATE:
      return Boolean.valueOf(isForceUpdate());

    case APK_URL:
      return getApkUrl();

    case NEW_FEATURE:
      return getNewFeature();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case VER:
      return isSetVer();
    case FORCE_UPDATE:
      return isSetForceUpdate();
    case APK_URL:
      return isSetApkUrl();
    case NEW_FEATURE:
      return isSetNewFeature();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Version)
      return this.equals((Version)that);
    return false;
  }

  public boolean equals(Version that) {
    if (that == null)
      return false;

    boolean this_present_ver = true && this.isSetVer();
    boolean that_present_ver = true && that.isSetVer();
    if (this_present_ver || that_present_ver) {
      if (!(this_present_ver && that_present_ver))
        return false;
      if (!this.ver.equals(that.ver))
        return false;
    }

    boolean this_present_forceUpdate = true;
    boolean that_present_forceUpdate = true;
    if (this_present_forceUpdate || that_present_forceUpdate) {
      if (!(this_present_forceUpdate && that_present_forceUpdate))
        return false;
      if (this.forceUpdate != that.forceUpdate)
        return false;
    }

    boolean this_present_apkUrl = true && this.isSetApkUrl();
    boolean that_present_apkUrl = true && that.isSetApkUrl();
    if (this_present_apkUrl || that_present_apkUrl) {
      if (!(this_present_apkUrl && that_present_apkUrl))
        return false;
      if (!this.apkUrl.equals(that.apkUrl))
        return false;
    }

    boolean this_present_newFeature = true && this.isSetNewFeature();
    boolean that_present_newFeature = true && that.isSetNewFeature();
    if (this_present_newFeature || that_present_newFeature) {
      if (!(this_present_newFeature && that_present_newFeature))
        return false;
      if (!this.newFeature.equals(that.newFeature))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Version other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetVer()).compareTo(other.isSetVer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ver, other.ver);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForceUpdate()).compareTo(other.isSetForceUpdate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForceUpdate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.forceUpdate, other.forceUpdate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApkUrl()).compareTo(other.isSetApkUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApkUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.apkUrl, other.apkUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewFeature()).compareTo(other.isSetNewFeature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewFeature()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newFeature, other.newFeature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Version(");
    boolean first = true;

    sb.append("ver:");
    if (this.ver == null) {
      sb.append("null");
    } else {
      sb.append(this.ver);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("forceUpdate:");
    sb.append(this.forceUpdate);
    first = false;
    if (isSetApkUrl()) {
      if (!first) sb.append(", ");
      sb.append("apkUrl:");
      if (this.apkUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.apkUrl);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("newFeature:");
    if (this.newFeature == null) {
      sb.append("null");
    } else {
      sb.append(this.newFeature);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class VersionStandardSchemeFactory implements SchemeFactory {
    public VersionStandardScheme getScheme() {
      return new VersionStandardScheme();
    }
  }

  private static class VersionStandardScheme extends StandardScheme<Version> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Version struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ver = iprot.readString();
              struct.setVerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FORCE_UPDATE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.forceUpdate = iprot.readBool();
              struct.setForceUpdateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // APK_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.apkUrl = iprot.readString();
              struct.setApkUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NEW_FEATURE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.newFeature = iprot.readString();
              struct.setNewFeatureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Version struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.ver != null) {
        oprot.writeFieldBegin(VER_FIELD_DESC);
        oprot.writeString(struct.ver);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FORCE_UPDATE_FIELD_DESC);
      oprot.writeBool(struct.forceUpdate);
      oprot.writeFieldEnd();
      if (struct.apkUrl != null) {
        if (struct.isSetApkUrl()) {
          oprot.writeFieldBegin(APK_URL_FIELD_DESC);
          oprot.writeString(struct.apkUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.newFeature != null) {
        oprot.writeFieldBegin(NEW_FEATURE_FIELD_DESC);
        oprot.writeString(struct.newFeature);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class VersionTupleSchemeFactory implements SchemeFactory {
    public VersionTupleScheme getScheme() {
      return new VersionTupleScheme();
    }
  }

  private static class VersionTupleScheme extends TupleScheme<Version> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Version struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetVer()) {
        optionals.set(0);
      }
      if (struct.isSetForceUpdate()) {
        optionals.set(1);
      }
      if (struct.isSetApkUrl()) {
        optionals.set(2);
      }
      if (struct.isSetNewFeature()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetVer()) {
        oprot.writeString(struct.ver);
      }
      if (struct.isSetForceUpdate()) {
        oprot.writeBool(struct.forceUpdate);
      }
      if (struct.isSetApkUrl()) {
        oprot.writeString(struct.apkUrl);
      }
      if (struct.isSetNewFeature()) {
        oprot.writeString(struct.newFeature);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Version struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.ver = iprot.readString();
        struct.setVerIsSet(true);
      }
      if (incoming.get(1)) {
        struct.forceUpdate = iprot.readBool();
        struct.setForceUpdateIsSet(true);
      }
      if (incoming.get(2)) {
        struct.apkUrl = iprot.readString();
        struct.setApkUrlIsSet(true);
      }
      if (incoming.get(3)) {
        struct.newFeature = iprot.readString();
        struct.setNewFeatureIsSet(true);
      }
    }
  }

}

