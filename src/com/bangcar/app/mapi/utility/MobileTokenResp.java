/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.bangcar.app.mapi.utility;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.EncodingUtils;

import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;

public class MobileTokenResp implements org.apache.thrift.TBase<MobileTokenResp, MobileTokenResp._Fields>, java.io.Serializable, Cloneable, Comparable<MobileTokenResp> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MobileTokenResp");

  private static final org.apache.thrift.protocol.TField HEAD_FIELD_DESC = new org.apache.thrift.protocol.TField("head", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("hash", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DELAY_FIELD_DESC = new org.apache.thrift.protocol.TField("delay", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField VOICE_MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("voiceMobile", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField VOICE_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("voiceToken", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobile", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MobileTokenRespStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MobileTokenRespTupleSchemeFactory());
  }

  public com.bangcar.app.mapi.base.MApiRespHead head; // required
  /**
   * 前端简单验证hash值，四位数字的acsii码之和
   */
  public String hash; // required
  /**
   * 重发等待时间
   */
  public int delay; // required
  /**
   * 语音验证接收手机号
   */
  public String voiceMobile; // required
  /**
   * 语音验证码请求TOKEN
   */
  public String voiceToken; // required
  /**
   * 接收验证码的手机号
   */
  public String mobile; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HEAD((short)1, "head"),
    /**
     * 前端简单验证hash值，四位数字的acsii码之和
     */
    HASH((short)2, "hash"),
    /**
     * 重发等待时间
     */
    DELAY((short)3, "delay"),
    /**
     * 语音验证接收手机号
     */
    VOICE_MOBILE((short)4, "voiceMobile"),
    /**
     * 语音验证码请求TOKEN
     */
    VOICE_TOKEN((short)5, "voiceToken"),
    /**
     * 接收验证码的手机号
     */
    MOBILE((short)6, "mobile");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HEAD
          return HEAD;
        case 2: // HASH
          return HASH;
        case 3: // DELAY
          return DELAY;
        case 4: // VOICE_MOBILE
          return VOICE_MOBILE;
        case 5: // VOICE_TOKEN
          return VOICE_TOKEN;
        case 6: // MOBILE
          return MOBILE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DELAY_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HEAD, new org.apache.thrift.meta_data.FieldMetaData("head", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bangcar.app.mapi.base.MApiRespHead.class)));
    tmpMap.put(_Fields.HASH, new org.apache.thrift.meta_data.FieldMetaData("hash", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DELAY, new org.apache.thrift.meta_data.FieldMetaData("delay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VOICE_MOBILE, new org.apache.thrift.meta_data.FieldMetaData("voiceMobile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VOICE_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("voiceToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MOBILE, new org.apache.thrift.meta_data.FieldMetaData("mobile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MobileTokenResp.class, metaDataMap);
  }

  public MobileTokenResp() {
  }

  public MobileTokenResp(
    com.bangcar.app.mapi.base.MApiRespHead head,
    String hash,
    int delay,
    String voiceMobile,
    String voiceToken,
    String mobile)
  {
    this();
    this.head = head;
    this.hash = hash;
    this.delay = delay;
    setDelayIsSet(true);
    this.voiceMobile = voiceMobile;
    this.voiceToken = voiceToken;
    this.mobile = mobile;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MobileTokenResp(MobileTokenResp other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetHead()) {
      this.head = new com.bangcar.app.mapi.base.MApiRespHead(other.head);
    }
    if (other.isSetHash()) {
      this.hash = other.hash;
    }
    this.delay = other.delay;
    if (other.isSetVoiceMobile()) {
      this.voiceMobile = other.voiceMobile;
    }
    if (other.isSetVoiceToken()) {
      this.voiceToken = other.voiceToken;
    }
    if (other.isSetMobile()) {
      this.mobile = other.mobile;
    }
  }

  public MobileTokenResp deepCopy() {
    return new MobileTokenResp(this);
  }

  @Override
  public void clear() {
    this.head = null;
    this.hash = null;
    setDelayIsSet(false);
    this.delay = 0;
    this.voiceMobile = null;
    this.voiceToken = null;
    this.mobile = null;
  }

  public com.bangcar.app.mapi.base.MApiRespHead getHead() {
    return this.head;
  }

  public MobileTokenResp setHead(com.bangcar.app.mapi.base.MApiRespHead head) {
    this.head = head;
    return this;
  }

  public void unsetHead() {
    this.head = null;
  }

  /** Returns true if field head is set (has been assigned a value) and false otherwise */
  public boolean isSetHead() {
    return this.head != null;
  }

  public void setHeadIsSet(boolean value) {
    if (!value) {
      this.head = null;
    }
  }

  /**
   * 前端简单验证hash值，四位数字的acsii码之和
   */
  public String getHash() {
    return this.hash;
  }

  /**
   * 前端简单验证hash值，四位数字的acsii码之和
   */
  public MobileTokenResp setHash(String hash) {
    this.hash = hash;
    return this;
  }

  public void unsetHash() {
    this.hash = null;
  }

  /** Returns true if field hash is set (has been assigned a value) and false otherwise */
  public boolean isSetHash() {
    return this.hash != null;
  }

  public void setHashIsSet(boolean value) {
    if (!value) {
      this.hash = null;
    }
  }

  /**
   * 重发等待时间
   */
  public int getDelay() {
    return this.delay;
  }

  /**
   * 重发等待时间
   */
  public MobileTokenResp setDelay(int delay) {
    this.delay = delay;
    setDelayIsSet(true);
    return this;
  }

  public void unsetDelay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DELAY_ISSET_ID);
  }

  /** Returns true if field delay is set (has been assigned a value) and false otherwise */
  public boolean isSetDelay() {
    return EncodingUtils.testBit(__isset_bitfield, __DELAY_ISSET_ID);
  }

  public void setDelayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DELAY_ISSET_ID, value);
  }

  /**
   * 语音验证接收手机号
   */
  public String getVoiceMobile() {
    return this.voiceMobile;
  }

  /**
   * 语音验证接收手机号
   */
  public MobileTokenResp setVoiceMobile(String voiceMobile) {
    this.voiceMobile = voiceMobile;
    return this;
  }

  public void unsetVoiceMobile() {
    this.voiceMobile = null;
  }

  /** Returns true if field voiceMobile is set (has been assigned a value) and false otherwise */
  public boolean isSetVoiceMobile() {
    return this.voiceMobile != null;
  }

  public void setVoiceMobileIsSet(boolean value) {
    if (!value) {
      this.voiceMobile = null;
    }
  }

  /**
   * 语音验证码请求TOKEN
   */
  public String getVoiceToken() {
    return this.voiceToken;
  }

  /**
   * 语音验证码请求TOKEN
   */
  public MobileTokenResp setVoiceToken(String voiceToken) {
    this.voiceToken = voiceToken;
    return this;
  }

  public void unsetVoiceToken() {
    this.voiceToken = null;
  }

  /** Returns true if field voiceToken is set (has been assigned a value) and false otherwise */
  public boolean isSetVoiceToken() {
    return this.voiceToken != null;
  }

  public void setVoiceTokenIsSet(boolean value) {
    if (!value) {
      this.voiceToken = null;
    }
  }

  /**
   * 接收验证码的手机号
   */
  public String getMobile() {
    return this.mobile;
  }

  /**
   * 接收验证码的手机号
   */
  public MobileTokenResp setMobile(String mobile) {
    this.mobile = mobile;
    return this;
  }

  public void unsetMobile() {
    this.mobile = null;
  }

  /** Returns true if field mobile is set (has been assigned a value) and false otherwise */
  public boolean isSetMobile() {
    return this.mobile != null;
  }

  public void setMobileIsSet(boolean value) {
    if (!value) {
      this.mobile = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case HEAD:
      if (value == null) {
        unsetHead();
      } else {
        setHead((com.bangcar.app.mapi.base.MApiRespHead)value);
      }
      break;

    case HASH:
      if (value == null) {
        unsetHash();
      } else {
        setHash((String)value);
      }
      break;

    case DELAY:
      if (value == null) {
        unsetDelay();
      } else {
        setDelay((Integer)value);
      }
      break;

    case VOICE_MOBILE:
      if (value == null) {
        unsetVoiceMobile();
      } else {
        setVoiceMobile((String)value);
      }
      break;

    case VOICE_TOKEN:
      if (value == null) {
        unsetVoiceToken();
      } else {
        setVoiceToken((String)value);
      }
      break;

    case MOBILE:
      if (value == null) {
        unsetMobile();
      } else {
        setMobile((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case HEAD:
      return getHead();

    case HASH:
      return getHash();

    case DELAY:
      return Integer.valueOf(getDelay());

    case VOICE_MOBILE:
      return getVoiceMobile();

    case VOICE_TOKEN:
      return getVoiceToken();

    case MOBILE:
      return getMobile();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case HEAD:
      return isSetHead();
    case HASH:
      return isSetHash();
    case DELAY:
      return isSetDelay();
    case VOICE_MOBILE:
      return isSetVoiceMobile();
    case VOICE_TOKEN:
      return isSetVoiceToken();
    case MOBILE:
      return isSetMobile();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MobileTokenResp)
      return this.equals((MobileTokenResp)that);
    return false;
  }

  public boolean equals(MobileTokenResp that) {
    if (that == null)
      return false;

    boolean this_present_head = true && this.isSetHead();
    boolean that_present_head = true && that.isSetHead();
    if (this_present_head || that_present_head) {
      if (!(this_present_head && that_present_head))
        return false;
      if (!this.head.equals(that.head))
        return false;
    }

    boolean this_present_hash = true && this.isSetHash();
    boolean that_present_hash = true && that.isSetHash();
    if (this_present_hash || that_present_hash) {
      if (!(this_present_hash && that_present_hash))
        return false;
      if (!this.hash.equals(that.hash))
        return false;
    }

    boolean this_present_delay = true;
    boolean that_present_delay = true;
    if (this_present_delay || that_present_delay) {
      if (!(this_present_delay && that_present_delay))
        return false;
      if (this.delay != that.delay)
        return false;
    }

    boolean this_present_voiceMobile = true && this.isSetVoiceMobile();
    boolean that_present_voiceMobile = true && that.isSetVoiceMobile();
    if (this_present_voiceMobile || that_present_voiceMobile) {
      if (!(this_present_voiceMobile && that_present_voiceMobile))
        return false;
      if (!this.voiceMobile.equals(that.voiceMobile))
        return false;
    }

    boolean this_present_voiceToken = true && this.isSetVoiceToken();
    boolean that_present_voiceToken = true && that.isSetVoiceToken();
    if (this_present_voiceToken || that_present_voiceToken) {
      if (!(this_present_voiceToken && that_present_voiceToken))
        return false;
      if (!this.voiceToken.equals(that.voiceToken))
        return false;
    }

    boolean this_present_mobile = true && this.isSetMobile();
    boolean that_present_mobile = true && that.isSetMobile();
    if (this_present_mobile || that_present_mobile) {
      if (!(this_present_mobile && that_present_mobile))
        return false;
      if (!this.mobile.equals(that.mobile))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(MobileTokenResp other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetHead()).compareTo(other.isSetHead());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHead()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.head, other.head);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHash()).compareTo(other.isSetHash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hash, other.hash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDelay()).compareTo(other.isSetDelay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDelay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.delay, other.delay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVoiceMobile()).compareTo(other.isSetVoiceMobile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVoiceMobile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.voiceMobile, other.voiceMobile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVoiceToken()).compareTo(other.isSetVoiceToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVoiceToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.voiceToken, other.voiceToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMobile()).compareTo(other.isSetMobile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMobile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobile, other.mobile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MobileTokenResp(");
    boolean first = true;

    sb.append("head:");
    if (this.head == null) {
      sb.append("null");
    } else {
      sb.append(this.head);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hash:");
    if (this.hash == null) {
      sb.append("null");
    } else {
      sb.append(this.hash);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("delay:");
    sb.append(this.delay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("voiceMobile:");
    if (this.voiceMobile == null) {
      sb.append("null");
    } else {
      sb.append(this.voiceMobile);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("voiceToken:");
    if (this.voiceToken == null) {
      sb.append("null");
    } else {
      sb.append(this.voiceToken);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mobile:");
    if (this.mobile == null) {
      sb.append("null");
    } else {
      sb.append(this.mobile);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (head != null) {
      head.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MobileTokenRespStandardSchemeFactory implements SchemeFactory {
    public MobileTokenRespStandardScheme getScheme() {
      return new MobileTokenRespStandardScheme();
    }
  }

  private static class MobileTokenRespStandardScheme extends StandardScheme<MobileTokenResp> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MobileTokenResp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HEAD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.head = new com.bangcar.app.mapi.base.MApiRespHead();
              struct.head.read(iprot);
              struct.setHeadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HASH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hash = iprot.readString();
              struct.setHashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DELAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.delay = iprot.readI32();
              struct.setDelayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // VOICE_MOBILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.voiceMobile = iprot.readString();
              struct.setVoiceMobileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // VOICE_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.voiceToken = iprot.readString();
              struct.setVoiceTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MOBILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mobile = iprot.readString();
              struct.setMobileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MobileTokenResp struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.head != null) {
        oprot.writeFieldBegin(HEAD_FIELD_DESC);
        struct.head.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.hash != null) {
        oprot.writeFieldBegin(HASH_FIELD_DESC);
        oprot.writeString(struct.hash);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DELAY_FIELD_DESC);
      oprot.writeI32(struct.delay);
      oprot.writeFieldEnd();
      if (struct.voiceMobile != null) {
        oprot.writeFieldBegin(VOICE_MOBILE_FIELD_DESC);
        oprot.writeString(struct.voiceMobile);
        oprot.writeFieldEnd();
      }
      if (struct.voiceToken != null) {
        oprot.writeFieldBegin(VOICE_TOKEN_FIELD_DESC);
        oprot.writeString(struct.voiceToken);
        oprot.writeFieldEnd();
      }
      if (struct.mobile != null) {
        oprot.writeFieldBegin(MOBILE_FIELD_DESC);
        oprot.writeString(struct.mobile);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MobileTokenRespTupleSchemeFactory implements SchemeFactory {
    public MobileTokenRespTupleScheme getScheme() {
      return new MobileTokenRespTupleScheme();
    }
  }

  private static class MobileTokenRespTupleScheme extends TupleScheme<MobileTokenResp> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MobileTokenResp struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetHead()) {
        optionals.set(0);
      }
      if (struct.isSetHash()) {
        optionals.set(1);
      }
      if (struct.isSetDelay()) {
        optionals.set(2);
      }
      if (struct.isSetVoiceMobile()) {
        optionals.set(3);
      }
      if (struct.isSetVoiceToken()) {
        optionals.set(4);
      }
      if (struct.isSetMobile()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetHead()) {
        struct.head.write(oprot);
      }
      if (struct.isSetHash()) {
        oprot.writeString(struct.hash);
      }
      if (struct.isSetDelay()) {
        oprot.writeI32(struct.delay);
      }
      if (struct.isSetVoiceMobile()) {
        oprot.writeString(struct.voiceMobile);
      }
      if (struct.isSetVoiceToken()) {
        oprot.writeString(struct.voiceToken);
      }
      if (struct.isSetMobile()) {
        oprot.writeString(struct.mobile);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MobileTokenResp struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.head = new com.bangcar.app.mapi.base.MApiRespHead();
        struct.head.read(iprot);
        struct.setHeadIsSet(true);
      }
      if (incoming.get(1)) {
        struct.hash = iprot.readString();
        struct.setHashIsSet(true);
      }
      if (incoming.get(2)) {
        struct.delay = iprot.readI32();
        struct.setDelayIsSet(true);
      }
      if (incoming.get(3)) {
        struct.voiceMobile = iprot.readString();
        struct.setVoiceMobileIsSet(true);
      }
      if (incoming.get(4)) {
        struct.voiceToken = iprot.readString();
        struct.setVoiceTokenIsSet(true);
      }
      if (incoming.get(5)) {
        struct.mobile = iprot.readString();
        struct.setMobileIsSet(true);
      }
    }
  }

}

