/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.bangcar.app.mapi.utility;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.EncodingUtils;

import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;

public class StartUpResp implements org.apache.thrift.TBase<StartUpResp, StartUpResp._Fields>, java.io.Serializable, Cloneable, Comparable<StartUpResp> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StartUpResp");

  private static final org.apache.thrift.protocol.TField HEAD_FIELD_DESC = new org.apache.thrift.protocol.TField("head", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField IS_LOGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("isLogin", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField UNPAID_ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("unpaidOrderId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.STRUCT, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StartUpRespStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StartUpRespTupleSchemeFactory());
  }

  public com.bangcar.app.mapi.base.MApiRespHead head; // required
  /**
   * 是否已登录
   */
  public boolean isLogin; // required
  /**
   * 已登录用户信息，可选
   */
  public com.bangcar.app.mapi.common.User user; // optional
  /**
   * 未支付订单号，可选
   */
  public String unpaidOrderId; // optional
  /**
   * 客户端相关的版本信息 *
   */
  public Version version; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HEAD((short)1, "head"),
    /**
     * 是否已登录
     */
    IS_LOGIN((short)2, "isLogin"),
    /**
     * 已登录用户信息，可选
     */
    USER((short)3, "user"),
    /**
     * 未支付订单号，可选
     */
    UNPAID_ORDER_ID((short)4, "unpaidOrderId"),
    /**
     * 客户端相关的版本信息 *
     */
    VERSION((short)5, "version");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HEAD
          return HEAD;
        case 2: // IS_LOGIN
          return IS_LOGIN;
        case 3: // USER
          return USER;
        case 4: // UNPAID_ORDER_ID
          return UNPAID_ORDER_ID;
        case 5: // VERSION
          return VERSION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISLOGIN_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.USER,_Fields.UNPAID_ORDER_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HEAD, new org.apache.thrift.meta_data.FieldMetaData("head", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bangcar.app.mapi.base.MApiRespHead.class)));
    tmpMap.put(_Fields.IS_LOGIN, new org.apache.thrift.meta_data.FieldMetaData("isLogin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bangcar.app.mapi.common.User.class)));
    tmpMap.put(_Fields.UNPAID_ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("unpaidOrderId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Version.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StartUpResp.class, metaDataMap);
  }

  public StartUpResp() {
  }

  public StartUpResp(
    com.bangcar.app.mapi.base.MApiRespHead head,
    boolean isLogin,
    Version version)
  {
    this();
    this.head = head;
    this.isLogin = isLogin;
    setIsLoginIsSet(true);
    this.version = version;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StartUpResp(StartUpResp other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetHead()) {
      this.head = new com.bangcar.app.mapi.base.MApiRespHead(other.head);
    }
    this.isLogin = other.isLogin;
    if (other.isSetUser()) {
      this.user = new com.bangcar.app.mapi.common.User(other.user);
    }
    if (other.isSetUnpaidOrderId()) {
      this.unpaidOrderId = other.unpaidOrderId;
    }
    if (other.isSetVersion()) {
      this.version = new Version(other.version);
    }
  }

  public StartUpResp deepCopy() {
    return new StartUpResp(this);
  }

  @Override
  public void clear() {
    this.head = null;
    setIsLoginIsSet(false);
    this.isLogin = false;
    this.user = null;
    this.unpaidOrderId = null;
    this.version = null;
  }

  public com.bangcar.app.mapi.base.MApiRespHead getHead() {
    return this.head;
  }

  public StartUpResp setHead(com.bangcar.app.mapi.base.MApiRespHead head) {
    this.head = head;
    return this;
  }

  public void unsetHead() {
    this.head = null;
  }

  /** Returns true if field head is set (has been assigned a value) and false otherwise */
  public boolean isSetHead() {
    return this.head != null;
  }

  public void setHeadIsSet(boolean value) {
    if (!value) {
      this.head = null;
    }
  }

  /**
   * 是否已登录
   */
  public boolean isIsLogin() {
    return this.isLogin;
  }

  /**
   * 是否已登录
   */
  public StartUpResp setIsLogin(boolean isLogin) {
    this.isLogin = isLogin;
    setIsLoginIsSet(true);
    return this;
  }

  public void unsetIsLogin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISLOGIN_ISSET_ID);
  }

  /** Returns true if field isLogin is set (has been assigned a value) and false otherwise */
  public boolean isSetIsLogin() {
    return EncodingUtils.testBit(__isset_bitfield, __ISLOGIN_ISSET_ID);
  }

  public void setIsLoginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISLOGIN_ISSET_ID, value);
  }

  /**
   * 已登录用户信息，可选
   */
  public com.bangcar.app.mapi.common.User getUser() {
    return this.user;
  }

  /**
   * 已登录用户信息，可选
   */
  public StartUpResp setUser(com.bangcar.app.mapi.common.User user) {
    this.user = user;
    return this;
  }

  public void unsetUser() {
    this.user = null;
  }

  /** Returns true if field user is set (has been assigned a value) and false otherwise */
  public boolean isSetUser() {
    return this.user != null;
  }

  public void setUserIsSet(boolean value) {
    if (!value) {
      this.user = null;
    }
  }

  /**
   * 未支付订单号，可选
   */
  public String getUnpaidOrderId() {
    return this.unpaidOrderId;
  }

  /**
   * 未支付订单号，可选
   */
  public StartUpResp setUnpaidOrderId(String unpaidOrderId) {
    this.unpaidOrderId = unpaidOrderId;
    return this;
  }

  public void unsetUnpaidOrderId() {
    this.unpaidOrderId = null;
  }

  /** Returns true if field unpaidOrderId is set (has been assigned a value) and false otherwise */
  public boolean isSetUnpaidOrderId() {
    return this.unpaidOrderId != null;
  }

  public void setUnpaidOrderIdIsSet(boolean value) {
    if (!value) {
      this.unpaidOrderId = null;
    }
  }

  /**
   * 客户端相关的版本信息 *
   */
  public Version getVersion() {
    return this.version;
  }

  /**
   * 客户端相关的版本信息 *
   */
  public StartUpResp setVersion(Version version) {
    this.version = version;
    return this;
  }

  public void unsetVersion() {
    this.version = null;
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return this.version != null;
  }

  public void setVersionIsSet(boolean value) {
    if (!value) {
      this.version = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case HEAD:
      if (value == null) {
        unsetHead();
      } else {
        setHead((com.bangcar.app.mapi.base.MApiRespHead)value);
      }
      break;

    case IS_LOGIN:
      if (value == null) {
        unsetIsLogin();
      } else {
        setIsLogin((Boolean)value);
      }
      break;

    case USER:
      if (value == null) {
        unsetUser();
      } else {
        setUser((com.bangcar.app.mapi.common.User)value);
      }
      break;

    case UNPAID_ORDER_ID:
      if (value == null) {
        unsetUnpaidOrderId();
      } else {
        setUnpaidOrderId((String)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((Version)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case HEAD:
      return getHead();

    case IS_LOGIN:
      return Boolean.valueOf(isIsLogin());

    case USER:
      return getUser();

    case UNPAID_ORDER_ID:
      return getUnpaidOrderId();

    case VERSION:
      return getVersion();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case HEAD:
      return isSetHead();
    case IS_LOGIN:
      return isSetIsLogin();
    case USER:
      return isSetUser();
    case UNPAID_ORDER_ID:
      return isSetUnpaidOrderId();
    case VERSION:
      return isSetVersion();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StartUpResp)
      return this.equals((StartUpResp)that);
    return false;
  }

  public boolean equals(StartUpResp that) {
    if (that == null)
      return false;

    boolean this_present_head = true && this.isSetHead();
    boolean that_present_head = true && that.isSetHead();
    if (this_present_head || that_present_head) {
      if (!(this_present_head && that_present_head))
        return false;
      if (!this.head.equals(that.head))
        return false;
    }

    boolean this_present_isLogin = true;
    boolean that_present_isLogin = true;
    if (this_present_isLogin || that_present_isLogin) {
      if (!(this_present_isLogin && that_present_isLogin))
        return false;
      if (this.isLogin != that.isLogin)
        return false;
    }

    boolean this_present_user = true && this.isSetUser();
    boolean that_present_user = true && that.isSetUser();
    if (this_present_user || that_present_user) {
      if (!(this_present_user && that_present_user))
        return false;
      if (!this.user.equals(that.user))
        return false;
    }

    boolean this_present_unpaidOrderId = true && this.isSetUnpaidOrderId();
    boolean that_present_unpaidOrderId = true && that.isSetUnpaidOrderId();
    if (this_present_unpaidOrderId || that_present_unpaidOrderId) {
      if (!(this_present_unpaidOrderId && that_present_unpaidOrderId))
        return false;
      if (!this.unpaidOrderId.equals(that.unpaidOrderId))
        return false;
    }

    boolean this_present_version = true && this.isSetVersion();
    boolean that_present_version = true && that.isSetVersion();
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (!this.version.equals(that.version))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(StartUpResp other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetHead()).compareTo(other.isSetHead());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHead()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.head, other.head);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsLogin()).compareTo(other.isSetIsLogin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsLogin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isLogin, other.isLogin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnpaidOrderId()).compareTo(other.isSetUnpaidOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnpaidOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unpaidOrderId, other.unpaidOrderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StartUpResp(");
    boolean first = true;

    sb.append("head:");
    if (this.head == null) {
      sb.append("null");
    } else {
      sb.append(this.head);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isLogin:");
    sb.append(this.isLogin);
    first = false;
    if (isSetUser()) {
      if (!first) sb.append(", ");
      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
    }
    if (isSetUnpaidOrderId()) {
      if (!first) sb.append(", ");
      sb.append("unpaidOrderId:");
      if (this.unpaidOrderId == null) {
        sb.append("null");
      } else {
        sb.append(this.unpaidOrderId);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("version:");
    if (this.version == null) {
      sb.append("null");
    } else {
      sb.append(this.version);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (head != null) {
      head.validate();
    }
    if (user != null) {
      user.validate();
    }
    if (version != null) {
      version.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StartUpRespStandardSchemeFactory implements SchemeFactory {
    public StartUpRespStandardScheme getScheme() {
      return new StartUpRespStandardScheme();
    }
  }

  private static class StartUpRespStandardScheme extends StandardScheme<StartUpResp> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StartUpResp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HEAD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.head = new com.bangcar.app.mapi.base.MApiRespHead();
              struct.head.read(iprot);
              struct.setHeadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IS_LOGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isLogin = iprot.readBool();
              struct.setIsLoginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.user = new com.bangcar.app.mapi.common.User();
              struct.user.read(iprot);
              struct.setUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // UNPAID_ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.unpaidOrderId = iprot.readString();
              struct.setUnpaidOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.version = new Version();
              struct.version.read(iprot);
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StartUpResp struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.head != null) {
        oprot.writeFieldBegin(HEAD_FIELD_DESC);
        struct.head.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_LOGIN_FIELD_DESC);
      oprot.writeBool(struct.isLogin);
      oprot.writeFieldEnd();
      if (struct.user != null) {
        if (struct.isSetUser()) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          struct.user.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.unpaidOrderId != null) {
        if (struct.isSetUnpaidOrderId()) {
          oprot.writeFieldBegin(UNPAID_ORDER_ID_FIELD_DESC);
          oprot.writeString(struct.unpaidOrderId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.version != null) {
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        struct.version.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StartUpRespTupleSchemeFactory implements SchemeFactory {
    public StartUpRespTupleScheme getScheme() {
      return new StartUpRespTupleScheme();
    }
  }

  private static class StartUpRespTupleScheme extends TupleScheme<StartUpResp> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StartUpResp struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetHead()) {
        optionals.set(0);
      }
      if (struct.isSetIsLogin()) {
        optionals.set(1);
      }
      if (struct.isSetUser()) {
        optionals.set(2);
      }
      if (struct.isSetUnpaidOrderId()) {
        optionals.set(3);
      }
      if (struct.isSetVersion()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetHead()) {
        struct.head.write(oprot);
      }
      if (struct.isSetIsLogin()) {
        oprot.writeBool(struct.isLogin);
      }
      if (struct.isSetUser()) {
        struct.user.write(oprot);
      }
      if (struct.isSetUnpaidOrderId()) {
        oprot.writeString(struct.unpaidOrderId);
      }
      if (struct.isSetVersion()) {
        struct.version.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StartUpResp struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.head = new com.bangcar.app.mapi.base.MApiRespHead();
        struct.head.read(iprot);
        struct.setHeadIsSet(true);
      }
      if (incoming.get(1)) {
        struct.isLogin = iprot.readBool();
        struct.setIsLoginIsSet(true);
      }
      if (incoming.get(2)) {
        struct.user = new com.bangcar.app.mapi.common.User();
        struct.user.read(iprot);
        struct.setUserIsSet(true);
      }
      if (incoming.get(3)) {
        struct.unpaidOrderId = iprot.readString();
        struct.setUnpaidOrderIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.version = new Version();
        struct.version.read(iprot);
        struct.setVersionIsSet(true);
      }
    }
  }

}

