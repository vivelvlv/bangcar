/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.bangcar.app.mapi.profile;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;

public class AuthCheckResp implements org.apache.thrift.TBase<AuthCheckResp, AuthCheckResp._Fields>, java.io.Serializable, Cloneable, Comparable<AuthCheckResp> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AuthCheckResp");

  private static final org.apache.thrift.protocol.TField HEAD_FIELD_DESC = new org.apache.thrift.protocol.TField("head", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField AUTH_STEP_FIELD_DESC = new org.apache.thrift.protocol.TField("authStep", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField AUTH_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("authId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ID_CARD_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("idCardNo", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField BANKS_FIELD_DESC = new org.apache.thrift.protocol.TField("banks", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField PROVINCE_KVS_FIELD_DESC = new org.apache.thrift.protocol.TField("provinceKVs", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField AGREE_FIELD_DESC = new org.apache.thrift.protocol.TField("agree", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField BANK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bankName", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PROVINCE_FIELD_DESC = new org.apache.thrift.protocol.TField("province", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("city", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField CARD_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("cardNo", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AuthCheckRespStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AuthCheckRespTupleSchemeFactory());
  }

  public com.bangcar.app.mapi.base.MApiRespHead head; // required
  /**
   * 用户认证认证阶段
   * 
   * @see com.bangcar.app.mapi.common.EAuthStep
   */
  public com.bangcar.app.mapi.common.EAuthStep authStep; // required
  /**
   * 认证流水号，不为空时进入校验红包金额页面，否则停留在填绑卡信息页面
   */
  public String authId; // required
  /**
   * 姓名
   */
  public String name; // required
  /**
   * 身份证
   */
  public String idCardNo; // required
  /**
   * 银行列表
   */
  public List<com.bangcar.app.mapi.common.Bank> banks; // required
  /**
   * 省份列表
   */
  public List<com.bangcar.app.mapi.common.KV> provinceKVs; // required
  /**
   * 协议
   */
  public com.bangcar.app.mapi.common.Agree agree; // required
  /**
   * 银行名称
   */
  public String bankName; // required
  /**
   * 省份
   */
  public String province; // required
  /**
   * 城市
   */
  public String city; // required
  /**
   * 卡号
   */
  public String cardNo; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HEAD((short)1, "head"),
    /**
     * 用户认证认证阶段
     * 
     * @see com.bangcar.app.mapi.common.EAuthStep
     */
    AUTH_STEP((short)2, "authStep"),
    /**
     * 认证流水号，不为空时进入校验红包金额页面，否则停留在填绑卡信息页面
     */
    AUTH_ID((short)3, "authId"),
    /**
     * 姓名
     */
    NAME((short)4, "name"),
    /**
     * 身份证
     */
    ID_CARD_NO((short)5, "idCardNo"),
    /**
     * 银行列表
     */
    BANKS((short)6, "banks"),
    /**
     * 省份列表
     */
    PROVINCE_KVS((short)7, "provinceKVs"),
    /**
     * 协议
     */
    AGREE((short)8, "agree"),
    /**
     * 银行名称
     */
    BANK_NAME((short)9, "bankName"),
    /**
     * 省份
     */
    PROVINCE((short)10, "province"),
    /**
     * 城市
     */
    CITY((short)11, "city"),
    /**
     * 卡号
     */
    CARD_NO((short)12, "cardNo");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HEAD
          return HEAD;
        case 2: // AUTH_STEP
          return AUTH_STEP;
        case 3: // AUTH_ID
          return AUTH_ID;
        case 4: // NAME
          return NAME;
        case 5: // ID_CARD_NO
          return ID_CARD_NO;
        case 6: // BANKS
          return BANKS;
        case 7: // PROVINCE_KVS
          return PROVINCE_KVS;
        case 8: // AGREE
          return AGREE;
        case 9: // BANK_NAME
          return BANK_NAME;
        case 10: // PROVINCE
          return PROVINCE;
        case 11: // CITY
          return CITY;
        case 12: // CARD_NO
          return CARD_NO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HEAD, new org.apache.thrift.meta_data.FieldMetaData("head", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bangcar.app.mapi.base.MApiRespHead.class)));
    tmpMap.put(_Fields.AUTH_STEP, new org.apache.thrift.meta_data.FieldMetaData("authStep", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.bangcar.app.mapi.common.EAuthStep.class)));
    tmpMap.put(_Fields.AUTH_ID, new org.apache.thrift.meta_data.FieldMetaData("authId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ID_CARD_NO, new org.apache.thrift.meta_data.FieldMetaData("idCardNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANKS, new org.apache.thrift.meta_data.FieldMetaData("banks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bangcar.app.mapi.common.Bank.class))));
    tmpMap.put(_Fields.PROVINCE_KVS, new org.apache.thrift.meta_data.FieldMetaData("provinceKVs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bangcar.app.mapi.common.KV.class))));
    tmpMap.put(_Fields.AGREE, new org.apache.thrift.meta_data.FieldMetaData("agree", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bangcar.app.mapi.common.Agree.class)));
    tmpMap.put(_Fields.BANK_NAME, new org.apache.thrift.meta_data.FieldMetaData("bankName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROVINCE, new org.apache.thrift.meta_data.FieldMetaData("province", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CITY, new org.apache.thrift.meta_data.FieldMetaData("city", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CARD_NO, new org.apache.thrift.meta_data.FieldMetaData("cardNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AuthCheckResp.class, metaDataMap);
  }

  public AuthCheckResp() {
  }

  public AuthCheckResp(
    com.bangcar.app.mapi.base.MApiRespHead head,
    com.bangcar.app.mapi.common.EAuthStep authStep,
    String authId,
    String name,
    String idCardNo,
    List<com.bangcar.app.mapi.common.Bank> banks,
    List<com.bangcar.app.mapi.common.KV> provinceKVs,
    com.bangcar.app.mapi.common.Agree agree,
    String bankName,
    String province,
    String city,
    String cardNo)
  {
    this();
    this.head = head;
    this.authStep = authStep;
    this.authId = authId;
    this.name = name;
    this.idCardNo = idCardNo;
    this.banks = banks;
    this.provinceKVs = provinceKVs;
    this.agree = agree;
    this.bankName = bankName;
    this.province = province;
    this.city = city;
    this.cardNo = cardNo;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AuthCheckResp(AuthCheckResp other) {
    if (other.isSetHead()) {
      this.head = new com.bangcar.app.mapi.base.MApiRespHead(other.head);
    }
    if (other.isSetAuthStep()) {
      this.authStep = other.authStep;
    }
    if (other.isSetAuthId()) {
      this.authId = other.authId;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetIdCardNo()) {
      this.idCardNo = other.idCardNo;
    }
    if (other.isSetBanks()) {
      List<com.bangcar.app.mapi.common.Bank> __this__banks = new ArrayList<com.bangcar.app.mapi.common.Bank>(other.banks.size());
      for (com.bangcar.app.mapi.common.Bank other_element : other.banks) {
        __this__banks.add(new com.bangcar.app.mapi.common.Bank(other_element));
      }
      this.banks = __this__banks;
    }
    if (other.isSetProvinceKVs()) {
      List<com.bangcar.app.mapi.common.KV> __this__provinceKVs = new ArrayList<com.bangcar.app.mapi.common.KV>(other.provinceKVs.size());
      for (com.bangcar.app.mapi.common.KV other_element : other.provinceKVs) {
        __this__provinceKVs.add(new com.bangcar.app.mapi.common.KV(other_element));
      }
      this.provinceKVs = __this__provinceKVs;
    }
    if (other.isSetAgree()) {
      this.agree = new com.bangcar.app.mapi.common.Agree(other.agree);
    }
    if (other.isSetBankName()) {
      this.bankName = other.bankName;
    }
    if (other.isSetProvince()) {
      this.province = other.province;
    }
    if (other.isSetCity()) {
      this.city = other.city;
    }
    if (other.isSetCardNo()) {
      this.cardNo = other.cardNo;
    }
  }

  public AuthCheckResp deepCopy() {
    return new AuthCheckResp(this);
  }

  @Override
  public void clear() {
    this.head = null;
    this.authStep = null;
    this.authId = null;
    this.name = null;
    this.idCardNo = null;
    this.banks = null;
    this.provinceKVs = null;
    this.agree = null;
    this.bankName = null;
    this.province = null;
    this.city = null;
    this.cardNo = null;
  }

  public com.bangcar.app.mapi.base.MApiRespHead getHead() {
    return this.head;
  }

  public AuthCheckResp setHead(com.bangcar.app.mapi.base.MApiRespHead head) {
    this.head = head;
    return this;
  }

  public void unsetHead() {
    this.head = null;
  }

  /** Returns true if field head is set (has been assigned a value) and false otherwise */
  public boolean isSetHead() {
    return this.head != null;
  }

  public void setHeadIsSet(boolean value) {
    if (!value) {
      this.head = null;
    }
  }

  /**
   * 用户认证认证阶段
   * 
   * @see com.bangcar.app.mapi.common.EAuthStep
   */
  public com.bangcar.app.mapi.common.EAuthStep getAuthStep() {
    return this.authStep;
  }

  /**
   * 用户认证认证阶段
   * 
   * @see com.bangcar.app.mapi.common.EAuthStep
   */
  public AuthCheckResp setAuthStep(com.bangcar.app.mapi.common.EAuthStep authStep) {
    this.authStep = authStep;
    return this;
  }

  public void unsetAuthStep() {
    this.authStep = null;
  }

  /** Returns true if field authStep is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthStep() {
    return this.authStep != null;
  }

  public void setAuthStepIsSet(boolean value) {
    if (!value) {
      this.authStep = null;
    }
  }

  /**
   * 认证流水号，不为空时进入校验红包金额页面，否则停留在填绑卡信息页面
   */
  public String getAuthId() {
    return this.authId;
  }

  /**
   * 认证流水号，不为空时进入校验红包金额页面，否则停留在填绑卡信息页面
   */
  public AuthCheckResp setAuthId(String authId) {
    this.authId = authId;
    return this;
  }

  public void unsetAuthId() {
    this.authId = null;
  }

  /** Returns true if field authId is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthId() {
    return this.authId != null;
  }

  public void setAuthIdIsSet(boolean value) {
    if (!value) {
      this.authId = null;
    }
  }

  /**
   * 姓名
   */
  public String getName() {
    return this.name;
  }

  /**
   * 姓名
   */
  public AuthCheckResp setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  /**
   * 身份证
   */
  public String getIdCardNo() {
    return this.idCardNo;
  }

  /**
   * 身份证
   */
  public AuthCheckResp setIdCardNo(String idCardNo) {
    this.idCardNo = idCardNo;
    return this;
  }

  public void unsetIdCardNo() {
    this.idCardNo = null;
  }

  /** Returns true if field idCardNo is set (has been assigned a value) and false otherwise */
  public boolean isSetIdCardNo() {
    return this.idCardNo != null;
  }

  public void setIdCardNoIsSet(boolean value) {
    if (!value) {
      this.idCardNo = null;
    }
  }

  public int getBanksSize() {
    return (this.banks == null) ? 0 : this.banks.size();
  }

  public java.util.Iterator<com.bangcar.app.mapi.common.Bank> getBanksIterator() {
    return (this.banks == null) ? null : this.banks.iterator();
  }

  public void addToBanks(com.bangcar.app.mapi.common.Bank elem) {
    if (this.banks == null) {
      this.banks = new ArrayList<com.bangcar.app.mapi.common.Bank>();
    }
    this.banks.add(elem);
  }

  /**
   * 银行列表
   */
  public List<com.bangcar.app.mapi.common.Bank> getBanks() {
    return this.banks;
  }

  /**
   * 银行列表
   */
  public AuthCheckResp setBanks(List<com.bangcar.app.mapi.common.Bank> banks) {
    this.banks = banks;
    return this;
  }

  public void unsetBanks() {
    this.banks = null;
  }

  /** Returns true if field banks is set (has been assigned a value) and false otherwise */
  public boolean isSetBanks() {
    return this.banks != null;
  }

  public void setBanksIsSet(boolean value) {
    if (!value) {
      this.banks = null;
    }
  }

  public int getProvinceKVsSize() {
    return (this.provinceKVs == null) ? 0 : this.provinceKVs.size();
  }

  public java.util.Iterator<com.bangcar.app.mapi.common.KV> getProvinceKVsIterator() {
    return (this.provinceKVs == null) ? null : this.provinceKVs.iterator();
  }

  public void addToProvinceKVs(com.bangcar.app.mapi.common.KV elem) {
    if (this.provinceKVs == null) {
      this.provinceKVs = new ArrayList<com.bangcar.app.mapi.common.KV>();
    }
    this.provinceKVs.add(elem);
  }

  /**
   * 省份列表
   */
  public List<com.bangcar.app.mapi.common.KV> getProvinceKVs() {
    return this.provinceKVs;
  }

  /**
   * 省份列表
   */
  public AuthCheckResp setProvinceKVs(List<com.bangcar.app.mapi.common.KV> provinceKVs) {
    this.provinceKVs = provinceKVs;
    return this;
  }

  public void unsetProvinceKVs() {
    this.provinceKVs = null;
  }

  /** Returns true if field provinceKVs is set (has been assigned a value) and false otherwise */
  public boolean isSetProvinceKVs() {
    return this.provinceKVs != null;
  }

  public void setProvinceKVsIsSet(boolean value) {
    if (!value) {
      this.provinceKVs = null;
    }
  }

  /**
   * 协议
   */
  public com.bangcar.app.mapi.common.Agree getAgree() {
    return this.agree;
  }

  /**
   * 协议
   */
  public AuthCheckResp setAgree(com.bangcar.app.mapi.common.Agree agree) {
    this.agree = agree;
    return this;
  }

  public void unsetAgree() {
    this.agree = null;
  }

  /** Returns true if field agree is set (has been assigned a value) and false otherwise */
  public boolean isSetAgree() {
    return this.agree != null;
  }

  public void setAgreeIsSet(boolean value) {
    if (!value) {
      this.agree = null;
    }
  }

  /**
   * 银行名称
   */
  public String getBankName() {
    return this.bankName;
  }

  /**
   * 银行名称
   */
  public AuthCheckResp setBankName(String bankName) {
    this.bankName = bankName;
    return this;
  }

  public void unsetBankName() {
    this.bankName = null;
  }

  /** Returns true if field bankName is set (has been assigned a value) and false otherwise */
  public boolean isSetBankName() {
    return this.bankName != null;
  }

  public void setBankNameIsSet(boolean value) {
    if (!value) {
      this.bankName = null;
    }
  }

  /**
   * 省份
   */
  public String getProvince() {
    return this.province;
  }

  /**
   * 省份
   */
  public AuthCheckResp setProvince(String province) {
    this.province = province;
    return this;
  }

  public void unsetProvince() {
    this.province = null;
  }

  /** Returns true if field province is set (has been assigned a value) and false otherwise */
  public boolean isSetProvince() {
    return this.province != null;
  }

  public void setProvinceIsSet(boolean value) {
    if (!value) {
      this.province = null;
    }
  }

  /**
   * 城市
   */
  public String getCity() {
    return this.city;
  }

  /**
   * 城市
   */
  public AuthCheckResp setCity(String city) {
    this.city = city;
    return this;
  }

  public void unsetCity() {
    this.city = null;
  }

  /** Returns true if field city is set (has been assigned a value) and false otherwise */
  public boolean isSetCity() {
    return this.city != null;
  }

  public void setCityIsSet(boolean value) {
    if (!value) {
      this.city = null;
    }
  }

  /**
   * 卡号
   */
  public String getCardNo() {
    return this.cardNo;
  }

  /**
   * 卡号
   */
  public AuthCheckResp setCardNo(String cardNo) {
    this.cardNo = cardNo;
    return this;
  }

  public void unsetCardNo() {
    this.cardNo = null;
  }

  /** Returns true if field cardNo is set (has been assigned a value) and false otherwise */
  public boolean isSetCardNo() {
    return this.cardNo != null;
  }

  public void setCardNoIsSet(boolean value) {
    if (!value) {
      this.cardNo = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case HEAD:
      if (value == null) {
        unsetHead();
      } else {
        setHead((com.bangcar.app.mapi.base.MApiRespHead)value);
      }
      break;

    case AUTH_STEP:
      if (value == null) {
        unsetAuthStep();
      } else {
        setAuthStep((com.bangcar.app.mapi.common.EAuthStep)value);
      }
      break;

    case AUTH_ID:
      if (value == null) {
        unsetAuthId();
      } else {
        setAuthId((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case ID_CARD_NO:
      if (value == null) {
        unsetIdCardNo();
      } else {
        setIdCardNo((String)value);
      }
      break;

    case BANKS:
      if (value == null) {
        unsetBanks();
      } else {
        setBanks((List<com.bangcar.app.mapi.common.Bank>)value);
      }
      break;

    case PROVINCE_KVS:
      if (value == null) {
        unsetProvinceKVs();
      } else {
        setProvinceKVs((List<com.bangcar.app.mapi.common.KV>)value);
      }
      break;

    case AGREE:
      if (value == null) {
        unsetAgree();
      } else {
        setAgree((com.bangcar.app.mapi.common.Agree)value);
      }
      break;

    case BANK_NAME:
      if (value == null) {
        unsetBankName();
      } else {
        setBankName((String)value);
      }
      break;

    case PROVINCE:
      if (value == null) {
        unsetProvince();
      } else {
        setProvince((String)value);
      }
      break;

    case CITY:
      if (value == null) {
        unsetCity();
      } else {
        setCity((String)value);
      }
      break;

    case CARD_NO:
      if (value == null) {
        unsetCardNo();
      } else {
        setCardNo((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case HEAD:
      return getHead();

    case AUTH_STEP:
      return getAuthStep();

    case AUTH_ID:
      return getAuthId();

    case NAME:
      return getName();

    case ID_CARD_NO:
      return getIdCardNo();

    case BANKS:
      return getBanks();

    case PROVINCE_KVS:
      return getProvinceKVs();

    case AGREE:
      return getAgree();

    case BANK_NAME:
      return getBankName();

    case PROVINCE:
      return getProvince();

    case CITY:
      return getCity();

    case CARD_NO:
      return getCardNo();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case HEAD:
      return isSetHead();
    case AUTH_STEP:
      return isSetAuthStep();
    case AUTH_ID:
      return isSetAuthId();
    case NAME:
      return isSetName();
    case ID_CARD_NO:
      return isSetIdCardNo();
    case BANKS:
      return isSetBanks();
    case PROVINCE_KVS:
      return isSetProvinceKVs();
    case AGREE:
      return isSetAgree();
    case BANK_NAME:
      return isSetBankName();
    case PROVINCE:
      return isSetProvince();
    case CITY:
      return isSetCity();
    case CARD_NO:
      return isSetCardNo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AuthCheckResp)
      return this.equals((AuthCheckResp)that);
    return false;
  }

  public boolean equals(AuthCheckResp that) {
    if (that == null)
      return false;

    boolean this_present_head = true && this.isSetHead();
    boolean that_present_head = true && that.isSetHead();
    if (this_present_head || that_present_head) {
      if (!(this_present_head && that_present_head))
        return false;
      if (!this.head.equals(that.head))
        return false;
    }

    boolean this_present_authStep = true && this.isSetAuthStep();
    boolean that_present_authStep = true && that.isSetAuthStep();
    if (this_present_authStep || that_present_authStep) {
      if (!(this_present_authStep && that_present_authStep))
        return false;
      if (!this.authStep.equals(that.authStep))
        return false;
    }

    boolean this_present_authId = true && this.isSetAuthId();
    boolean that_present_authId = true && that.isSetAuthId();
    if (this_present_authId || that_present_authId) {
      if (!(this_present_authId && that_present_authId))
        return false;
      if (!this.authId.equals(that.authId))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_idCardNo = true && this.isSetIdCardNo();
    boolean that_present_idCardNo = true && that.isSetIdCardNo();
    if (this_present_idCardNo || that_present_idCardNo) {
      if (!(this_present_idCardNo && that_present_idCardNo))
        return false;
      if (!this.idCardNo.equals(that.idCardNo))
        return false;
    }

    boolean this_present_banks = true && this.isSetBanks();
    boolean that_present_banks = true && that.isSetBanks();
    if (this_present_banks || that_present_banks) {
      if (!(this_present_banks && that_present_banks))
        return false;
      if (!this.banks.equals(that.banks))
        return false;
    }

    boolean this_present_provinceKVs = true && this.isSetProvinceKVs();
    boolean that_present_provinceKVs = true && that.isSetProvinceKVs();
    if (this_present_provinceKVs || that_present_provinceKVs) {
      if (!(this_present_provinceKVs && that_present_provinceKVs))
        return false;
      if (!this.provinceKVs.equals(that.provinceKVs))
        return false;
    }

    boolean this_present_agree = true && this.isSetAgree();
    boolean that_present_agree = true && that.isSetAgree();
    if (this_present_agree || that_present_agree) {
      if (!(this_present_agree && that_present_agree))
        return false;
      if (!this.agree.equals(that.agree))
        return false;
    }

    boolean this_present_bankName = true && this.isSetBankName();
    boolean that_present_bankName = true && that.isSetBankName();
    if (this_present_bankName || that_present_bankName) {
      if (!(this_present_bankName && that_present_bankName))
        return false;
      if (!this.bankName.equals(that.bankName))
        return false;
    }

    boolean this_present_province = true && this.isSetProvince();
    boolean that_present_province = true && that.isSetProvince();
    if (this_present_province || that_present_province) {
      if (!(this_present_province && that_present_province))
        return false;
      if (!this.province.equals(that.province))
        return false;
    }

    boolean this_present_city = true && this.isSetCity();
    boolean that_present_city = true && that.isSetCity();
    if (this_present_city || that_present_city) {
      if (!(this_present_city && that_present_city))
        return false;
      if (!this.city.equals(that.city))
        return false;
    }

    boolean this_present_cardNo = true && this.isSetCardNo();
    boolean that_present_cardNo = true && that.isSetCardNo();
    if (this_present_cardNo || that_present_cardNo) {
      if (!(this_present_cardNo && that_present_cardNo))
        return false;
      if (!this.cardNo.equals(that.cardNo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(AuthCheckResp other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetHead()).compareTo(other.isSetHead());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHead()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.head, other.head);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuthStep()).compareTo(other.isSetAuthStep());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthStep()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authStep, other.authStep);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuthId()).compareTo(other.isSetAuthId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authId, other.authId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdCardNo()).compareTo(other.isSetIdCardNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdCardNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idCardNo, other.idCardNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBanks()).compareTo(other.isSetBanks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBanks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.banks, other.banks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProvinceKVs()).compareTo(other.isSetProvinceKVs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProvinceKVs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.provinceKVs, other.provinceKVs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAgree()).compareTo(other.isSetAgree());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgree()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agree, other.agree);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankName()).compareTo(other.isSetBankName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankName, other.bankName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProvince()).compareTo(other.isSetProvince());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProvince()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.province, other.province);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCity()).compareTo(other.isSetCity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.city, other.city);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCardNo()).compareTo(other.isSetCardNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCardNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cardNo, other.cardNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AuthCheckResp(");
    boolean first = true;

    sb.append("head:");
    if (this.head == null) {
      sb.append("null");
    } else {
      sb.append(this.head);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("authStep:");
    if (this.authStep == null) {
      sb.append("null");
    } else {
      sb.append(this.authStep);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("authId:");
    if (this.authId == null) {
      sb.append("null");
    } else {
      sb.append(this.authId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("idCardNo:");
    if (this.idCardNo == null) {
      sb.append("null");
    } else {
      sb.append(this.idCardNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("banks:");
    if (this.banks == null) {
      sb.append("null");
    } else {
      sb.append(this.banks);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("provinceKVs:");
    if (this.provinceKVs == null) {
      sb.append("null");
    } else {
      sb.append(this.provinceKVs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("agree:");
    if (this.agree == null) {
      sb.append("null");
    } else {
      sb.append(this.agree);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankName:");
    if (this.bankName == null) {
      sb.append("null");
    } else {
      sb.append(this.bankName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("province:");
    if (this.province == null) {
      sb.append("null");
    } else {
      sb.append(this.province);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("city:");
    if (this.city == null) {
      sb.append("null");
    } else {
      sb.append(this.city);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cardNo:");
    if (this.cardNo == null) {
      sb.append("null");
    } else {
      sb.append(this.cardNo);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (head != null) {
      head.validate();
    }
    if (agree != null) {
      agree.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AuthCheckRespStandardSchemeFactory implements SchemeFactory {
    public AuthCheckRespStandardScheme getScheme() {
      return new AuthCheckRespStandardScheme();
    }
  }

  private static class AuthCheckRespStandardScheme extends StandardScheme<AuthCheckResp> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AuthCheckResp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HEAD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.head = new com.bangcar.app.mapi.base.MApiRespHead();
              struct.head.read(iprot);
              struct.setHeadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // AUTH_STEP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.authStep = com.bangcar.app.mapi.common.EAuthStep.findByValue(iprot.readI32());
              struct.setAuthStepIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // AUTH_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.authId = iprot.readString();
              struct.setAuthIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ID_CARD_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.idCardNo = iprot.readString();
              struct.setIdCardNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BANKS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.banks = new ArrayList<com.bangcar.app.mapi.common.Bank>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  com.bangcar.app.mapi.common.Bank _elem2;
                  _elem2 = new com.bangcar.app.mapi.common.Bank();
                  _elem2.read(iprot);
                  struct.banks.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setBanksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PROVINCE_KVS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.provinceKVs = new ArrayList<com.bangcar.app.mapi.common.KV>(_list3.size);
                for (int _i4 = 0; _i4 < _list3.size; ++_i4)
                {
                  com.bangcar.app.mapi.common.KV _elem5;
                  _elem5 = new com.bangcar.app.mapi.common.KV();
                  _elem5.read(iprot);
                  struct.provinceKVs.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setProvinceKVsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // AGREE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.agree = new com.bangcar.app.mapi.common.Agree();
              struct.agree.read(iprot);
              struct.setAgreeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // BANK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankName = iprot.readString();
              struct.setBankNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PROVINCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.province = iprot.readString();
              struct.setProvinceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.city = iprot.readString();
              struct.setCityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CARD_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cardNo = iprot.readString();
              struct.setCardNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AuthCheckResp struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.head != null) {
        oprot.writeFieldBegin(HEAD_FIELD_DESC);
        struct.head.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.authStep != null) {
        oprot.writeFieldBegin(AUTH_STEP_FIELD_DESC);
        oprot.writeI32(struct.authStep.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.authId != null) {
        oprot.writeFieldBegin(AUTH_ID_FIELD_DESC);
        oprot.writeString(struct.authId);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.idCardNo != null) {
        oprot.writeFieldBegin(ID_CARD_NO_FIELD_DESC);
        oprot.writeString(struct.idCardNo);
        oprot.writeFieldEnd();
      }
      if (struct.banks != null) {
        oprot.writeFieldBegin(BANKS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.banks.size()));
          for (com.bangcar.app.mapi.common.Bank _iter6 : struct.banks)
          {
            _iter6.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.provinceKVs != null) {
        oprot.writeFieldBegin(PROVINCE_KVS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.provinceKVs.size()));
          for (com.bangcar.app.mapi.common.KV _iter7 : struct.provinceKVs)
          {
            _iter7.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.agree != null) {
        oprot.writeFieldBegin(AGREE_FIELD_DESC);
        struct.agree.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.bankName != null) {
        oprot.writeFieldBegin(BANK_NAME_FIELD_DESC);
        oprot.writeString(struct.bankName);
        oprot.writeFieldEnd();
      }
      if (struct.province != null) {
        oprot.writeFieldBegin(PROVINCE_FIELD_DESC);
        oprot.writeString(struct.province);
        oprot.writeFieldEnd();
      }
      if (struct.city != null) {
        oprot.writeFieldBegin(CITY_FIELD_DESC);
        oprot.writeString(struct.city);
        oprot.writeFieldEnd();
      }
      if (struct.cardNo != null) {
        oprot.writeFieldBegin(CARD_NO_FIELD_DESC);
        oprot.writeString(struct.cardNo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AuthCheckRespTupleSchemeFactory implements SchemeFactory {
    public AuthCheckRespTupleScheme getScheme() {
      return new AuthCheckRespTupleScheme();
    }
  }

  private static class AuthCheckRespTupleScheme extends TupleScheme<AuthCheckResp> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AuthCheckResp struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetHead()) {
        optionals.set(0);
      }
      if (struct.isSetAuthStep()) {
        optionals.set(1);
      }
      if (struct.isSetAuthId()) {
        optionals.set(2);
      }
      if (struct.isSetName()) {
        optionals.set(3);
      }
      if (struct.isSetIdCardNo()) {
        optionals.set(4);
      }
      if (struct.isSetBanks()) {
        optionals.set(5);
      }
      if (struct.isSetProvinceKVs()) {
        optionals.set(6);
      }
      if (struct.isSetAgree()) {
        optionals.set(7);
      }
      if (struct.isSetBankName()) {
        optionals.set(8);
      }
      if (struct.isSetProvince()) {
        optionals.set(9);
      }
      if (struct.isSetCity()) {
        optionals.set(10);
      }
      if (struct.isSetCardNo()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetHead()) {
        struct.head.write(oprot);
      }
      if (struct.isSetAuthStep()) {
        oprot.writeI32(struct.authStep.getValue());
      }
      if (struct.isSetAuthId()) {
        oprot.writeString(struct.authId);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetIdCardNo()) {
        oprot.writeString(struct.idCardNo);
      }
      if (struct.isSetBanks()) {
        {
          oprot.writeI32(struct.banks.size());
          for (com.bangcar.app.mapi.common.Bank _iter8 : struct.banks)
          {
            _iter8.write(oprot);
          }
        }
      }
      if (struct.isSetProvinceKVs()) {
        {
          oprot.writeI32(struct.provinceKVs.size());
          for (com.bangcar.app.mapi.common.KV _iter9 : struct.provinceKVs)
          {
            _iter9.write(oprot);
          }
        }
      }
      if (struct.isSetAgree()) {
        struct.agree.write(oprot);
      }
      if (struct.isSetBankName()) {
        oprot.writeString(struct.bankName);
      }
      if (struct.isSetProvince()) {
        oprot.writeString(struct.province);
      }
      if (struct.isSetCity()) {
        oprot.writeString(struct.city);
      }
      if (struct.isSetCardNo()) {
        oprot.writeString(struct.cardNo);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AuthCheckResp struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.head = new com.bangcar.app.mapi.base.MApiRespHead();
        struct.head.read(iprot);
        struct.setHeadIsSet(true);
      }
      if (incoming.get(1)) {
        struct.authStep = com.bangcar.app.mapi.common.EAuthStep.findByValue(iprot.readI32());
        struct.setAuthStepIsSet(true);
      }
      if (incoming.get(2)) {
        struct.authId = iprot.readString();
        struct.setAuthIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.idCardNo = iprot.readString();
        struct.setIdCardNoIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.banks = new ArrayList<com.bangcar.app.mapi.common.Bank>(_list10.size);
          for (int _i11 = 0; _i11 < _list10.size; ++_i11)
          {
            com.bangcar.app.mapi.common.Bank _elem12;
            _elem12 = new com.bangcar.app.mapi.common.Bank();
            _elem12.read(iprot);
            struct.banks.add(_elem12);
          }
        }
        struct.setBanksIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.provinceKVs = new ArrayList<com.bangcar.app.mapi.common.KV>(_list13.size);
          for (int _i14 = 0; _i14 < _list13.size; ++_i14)
          {
            com.bangcar.app.mapi.common.KV _elem15;
            _elem15 = new com.bangcar.app.mapi.common.KV();
            _elem15.read(iprot);
            struct.provinceKVs.add(_elem15);
          }
        }
        struct.setProvinceKVsIsSet(true);
      }
      if (incoming.get(7)) {
        struct.agree = new com.bangcar.app.mapi.common.Agree();
        struct.agree.read(iprot);
        struct.setAgreeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.bankName = iprot.readString();
        struct.setBankNameIsSet(true);
      }
      if (incoming.get(9)) {
        struct.province = iprot.readString();
        struct.setProvinceIsSet(true);
      }
      if (incoming.get(10)) {
        struct.city = iprot.readString();
        struct.setCityIsSet(true);
      }
      if (incoming.get(11)) {
        struct.cardNo = iprot.readString();
        struct.setCardNoIsSet(true);
      }
    }
  }

}

