/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.bangcar.app.mapi.product;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.EncodingUtils;

import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;

/**
 * 产品列表的产品
 */
public class ProductListField implements org.apache.thrift.TBase<ProductListField, ProductListField._Fields>, java.io.Serializable, Cloneable, Comparable<ProductListField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProductListField");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PRODUCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("productName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MIN_BUY_SHARE_FIELD_DESC = new org.apache.thrift.protocol.TField("minBuyShare", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField SELL_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("sellState", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField PERIOD_FIELD_DESC = new org.apache.thrift.protocol.TField("period", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField INCOME_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("incomeRate", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField TOTAL_SHARE_FIELD_DESC = new org.apache.thrift.protocol.TField("totalShare", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField VIRTUAL_REMAIN_SHARE_FIELD_DESC = new org.apache.thrift.protocol.TField("virtualRemainShare", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField SELL_BEGIN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("sellBeginTime", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField SELL_END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("sellEndTime", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("group", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField GROUP_PERCENT_FIELD_DESC = new org.apache.thrift.protocol.TField("groupPercent", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField SOLD_PERCENT_FIELD_DESC = new org.apache.thrift.protocol.TField("soldPercent", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField SOLD_OUT_TIME_USED_FIELD_DESC = new org.apache.thrift.protocol.TField("soldOutTimeUsed", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField INCOME_RATE_E6_FIELD_DESC = new org.apache.thrift.protocol.TField("incomeRateE6", org.apache.thrift.protocol.TType.I64, (short)16);
  private static final org.apache.thrift.protocol.TField MIN_INCOME_RATE_E6_FIELD_DESC = new org.apache.thrift.protocol.TField("minIncomeRateE6", org.apache.thrift.protocol.TType.I64, (short)17);
  private static final org.apache.thrift.protocol.TField LAST_SELL_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastSellTime", org.apache.thrift.protocol.TType.I32, (short)18);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProductListFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProductListFieldTupleSchemeFactory());
  }

  /**
   * 产品ID
   */
  public int pid; // required
  /**
   * 产品名称
   */
  public String productName; // required
  /**
   * 产品起投金额
   */
  public int minBuyShare; // required
  /**
   * 产品状态
   * 
   * @see EProductSellState
   */
  public EProductSellState sellState; // required
  /**
   * 产品期限
   */
  public String period; // required
  /**
   * 产品收益率%
   */
  public String incomeRate; // required
  /**
   * 总份额
   */
  public int totalShare; // required
  /**
   * 虚拟剩余份额
   */
  public int virtualRemainShare; // required
  /**
   * 开始购买时间
   */
  public int sellBeginTime; // required
  /**
   * 结束购买时间
   */
  public int sellEndTime; // required
  /**
   * 成团类型，如100万成团
   */
  public String group; // optional
  /**
   * 成团百分比%
   */
  public int groupPercent; // optional
  /**
   * 已售出百分比
   */
  public int soldPercent; // optional
  /**
   * 售罄用时
   */
  public int soldOutTimeUsed; // optional
  /**
   * 产品收益率E6
   */
  public long incomeRateE6; // required
  /**
   * 产品收益率下限E6
   */
  public long minIncomeRateE6; // required
  /**
   * 结束售卖时间
   */
  public int lastSellTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 产品ID
     */
    PID((short)1, "pid"),
    /**
     * 产品名称
     */
    PRODUCT_NAME((short)2, "productName"),
    /**
     * 产品起投金额
     */
    MIN_BUY_SHARE((short)3, "minBuyShare"),
    /**
     * 产品状态
     * 
     * @see EProductSellState
     */
    SELL_STATE((short)4, "sellState"),
    /**
     * 产品期限
     */
    PERIOD((short)5, "period"),
    /**
     * 产品收益率%
     */
    INCOME_RATE((short)7, "incomeRate"),
    /**
     * 总份额
     */
    TOTAL_SHARE((short)8, "totalShare"),
    /**
     * 虚拟剩余份额
     */
    VIRTUAL_REMAIN_SHARE((short)9, "virtualRemainShare"),
    /**
     * 开始购买时间
     */
    SELL_BEGIN_TIME((short)10, "sellBeginTime"),
    /**
     * 结束购买时间
     */
    SELL_END_TIME((short)11, "sellEndTime"),
    /**
     * 成团类型，如100万成团
     */
    GROUP((short)12, "group"),
    /**
     * 成团百分比%
     */
    GROUP_PERCENT((short)13, "groupPercent"),
    /**
     * 已售出百分比
     */
    SOLD_PERCENT((short)14, "soldPercent"),
    /**
     * 售罄用时
     */
    SOLD_OUT_TIME_USED((short)15, "soldOutTimeUsed"),
    /**
     * 产品收益率E6
     */
    INCOME_RATE_E6((short)16, "incomeRateE6"),
    /**
     * 产品收益率下限E6
     */
    MIN_INCOME_RATE_E6((short)17, "minIncomeRateE6"),
    /**
     * 结束售卖时间
     */
    LAST_SELL_TIME((short)18, "lastSellTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // PRODUCT_NAME
          return PRODUCT_NAME;
        case 3: // MIN_BUY_SHARE
          return MIN_BUY_SHARE;
        case 4: // SELL_STATE
          return SELL_STATE;
        case 5: // PERIOD
          return PERIOD;
        case 7: // INCOME_RATE
          return INCOME_RATE;
        case 8: // TOTAL_SHARE
          return TOTAL_SHARE;
        case 9: // VIRTUAL_REMAIN_SHARE
          return VIRTUAL_REMAIN_SHARE;
        case 10: // SELL_BEGIN_TIME
          return SELL_BEGIN_TIME;
        case 11: // SELL_END_TIME
          return SELL_END_TIME;
        case 12: // GROUP
          return GROUP;
        case 13: // GROUP_PERCENT
          return GROUP_PERCENT;
        case 14: // SOLD_PERCENT
          return SOLD_PERCENT;
        case 15: // SOLD_OUT_TIME_USED
          return SOLD_OUT_TIME_USED;
        case 16: // INCOME_RATE_E6
          return INCOME_RATE_E6;
        case 17: // MIN_INCOME_RATE_E6
          return MIN_INCOME_RATE_E6;
        case 18: // LAST_SELL_TIME
          return LAST_SELL_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __MINBUYSHARE_ISSET_ID = 1;
  private static final int __TOTALSHARE_ISSET_ID = 2;
  private static final int __VIRTUALREMAINSHARE_ISSET_ID = 3;
  private static final int __SELLBEGINTIME_ISSET_ID = 4;
  private static final int __SELLENDTIME_ISSET_ID = 5;
  private static final int __GROUPPERCENT_ISSET_ID = 6;
  private static final int __SOLDPERCENT_ISSET_ID = 7;
  private static final int __SOLDOUTTIMEUSED_ISSET_ID = 8;
  private static final int __INCOMERATEE6_ISSET_ID = 9;
  private static final int __MININCOMERATEE6_ISSET_ID = 10;
  private static final int __LASTSELLTIME_ISSET_ID = 11;
  private short __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.GROUP,_Fields.GROUP_PERCENT,_Fields.SOLD_PERCENT,_Fields.SOLD_OUT_TIME_USED};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRODUCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("productName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MIN_BUY_SHARE, new org.apache.thrift.meta_data.FieldMetaData("minBuyShare", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SELL_STATE, new org.apache.thrift.meta_data.FieldMetaData("sellState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EProductSellState.class)));
    tmpMap.put(_Fields.PERIOD, new org.apache.thrift.meta_data.FieldMetaData("period", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INCOME_RATE, new org.apache.thrift.meta_data.FieldMetaData("incomeRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_SHARE, new org.apache.thrift.meta_data.FieldMetaData("totalShare", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VIRTUAL_REMAIN_SHARE, new org.apache.thrift.meta_data.FieldMetaData("virtualRemainShare", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SELL_BEGIN_TIME, new org.apache.thrift.meta_data.FieldMetaData("sellBeginTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SELL_END_TIME, new org.apache.thrift.meta_data.FieldMetaData("sellEndTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GROUP, new org.apache.thrift.meta_data.FieldMetaData("group", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GROUP_PERCENT, new org.apache.thrift.meta_data.FieldMetaData("groupPercent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SOLD_PERCENT, new org.apache.thrift.meta_data.FieldMetaData("soldPercent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SOLD_OUT_TIME_USED, new org.apache.thrift.meta_data.FieldMetaData("soldOutTimeUsed", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INCOME_RATE_E6, new org.apache.thrift.meta_data.FieldMetaData("incomeRateE6", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MIN_INCOME_RATE_E6, new org.apache.thrift.meta_data.FieldMetaData("minIncomeRateE6", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_SELL_TIME, new org.apache.thrift.meta_data.FieldMetaData("lastSellTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProductListField.class, metaDataMap);
  }

  public ProductListField() {
  }

  public ProductListField(
    int pid,
    String productName,
    int minBuyShare,
    EProductSellState sellState,
    String period,
    String incomeRate,
    int totalShare,
    int virtualRemainShare,
    int sellBeginTime,
    int sellEndTime,
    long incomeRateE6,
    long minIncomeRateE6,
    int lastSellTime)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.productName = productName;
    this.minBuyShare = minBuyShare;
    setMinBuyShareIsSet(true);
    this.sellState = sellState;
    this.period = period;
    this.incomeRate = incomeRate;
    this.totalShare = totalShare;
    setTotalShareIsSet(true);
    this.virtualRemainShare = virtualRemainShare;
    setVirtualRemainShareIsSet(true);
    this.sellBeginTime = sellBeginTime;
    setSellBeginTimeIsSet(true);
    this.sellEndTime = sellEndTime;
    setSellEndTimeIsSet(true);
    this.incomeRateE6 = incomeRateE6;
    setIncomeRateE6IsSet(true);
    this.minIncomeRateE6 = minIncomeRateE6;
    setMinIncomeRateE6IsSet(true);
    this.lastSellTime = lastSellTime;
    setLastSellTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProductListField(ProductListField other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    if (other.isSetProductName()) {
      this.productName = other.productName;
    }
    this.minBuyShare = other.minBuyShare;
    if (other.isSetSellState()) {
      this.sellState = other.sellState;
    }
    if (other.isSetPeriod()) {
      this.period = other.period;
    }
    if (other.isSetIncomeRate()) {
      this.incomeRate = other.incomeRate;
    }
    this.totalShare = other.totalShare;
    this.virtualRemainShare = other.virtualRemainShare;
    this.sellBeginTime = other.sellBeginTime;
    this.sellEndTime = other.sellEndTime;
    if (other.isSetGroup()) {
      this.group = other.group;
    }
    this.groupPercent = other.groupPercent;
    this.soldPercent = other.soldPercent;
    this.soldOutTimeUsed = other.soldOutTimeUsed;
    this.incomeRateE6 = other.incomeRateE6;
    this.minIncomeRateE6 = other.minIncomeRateE6;
    this.lastSellTime = other.lastSellTime;
  }

  public ProductListField deepCopy() {
    return new ProductListField(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    this.productName = null;
    setMinBuyShareIsSet(false);
    this.minBuyShare = 0;
    this.sellState = null;
    this.period = null;
    this.incomeRate = null;
    setTotalShareIsSet(false);
    this.totalShare = 0;
    setVirtualRemainShareIsSet(false);
    this.virtualRemainShare = 0;
    setSellBeginTimeIsSet(false);
    this.sellBeginTime = 0;
    setSellEndTimeIsSet(false);
    this.sellEndTime = 0;
    this.group = null;
    setGroupPercentIsSet(false);
    this.groupPercent = 0;
    setSoldPercentIsSet(false);
    this.soldPercent = 0;
    setSoldOutTimeUsedIsSet(false);
    this.soldOutTimeUsed = 0;
    setIncomeRateE6IsSet(false);
    this.incomeRateE6 = 0;
    setMinIncomeRateE6IsSet(false);
    this.minIncomeRateE6 = 0;
    setLastSellTimeIsSet(false);
    this.lastSellTime = 0;
  }

  /**
   * 产品ID
   */
  public int getPid() {
    return this.pid;
  }

  /**
   * 产品ID
   */
  public ProductListField setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  /**
   * 产品名称
   */
  public String getProductName() {
    return this.productName;
  }

  /**
   * 产品名称
   */
  public ProductListField setProductName(String productName) {
    this.productName = productName;
    return this;
  }

  public void unsetProductName() {
    this.productName = null;
  }

  /** Returns true if field productName is set (has been assigned a value) and false otherwise */
  public boolean isSetProductName() {
    return this.productName != null;
  }

  public void setProductNameIsSet(boolean value) {
    if (!value) {
      this.productName = null;
    }
  }

  /**
   * 产品起投金额
   */
  public int getMinBuyShare() {
    return this.minBuyShare;
  }

  /**
   * 产品起投金额
   */
  public ProductListField setMinBuyShare(int minBuyShare) {
    this.minBuyShare = minBuyShare;
    setMinBuyShareIsSet(true);
    return this;
  }

  public void unsetMinBuyShare() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINBUYSHARE_ISSET_ID);
  }

  /** Returns true if field minBuyShare is set (has been assigned a value) and false otherwise */
  public boolean isSetMinBuyShare() {
    return EncodingUtils.testBit(__isset_bitfield, __MINBUYSHARE_ISSET_ID);
  }

  public void setMinBuyShareIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINBUYSHARE_ISSET_ID, value);
  }

  /**
   * 产品状态
   * 
   * @see EProductSellState
   */
  public EProductSellState getSellState() {
    return this.sellState;
  }

  /**
   * 产品状态
   * 
   * @see EProductSellState
   */
  public ProductListField setSellState(EProductSellState sellState) {
    this.sellState = sellState;
    return this;
  }

  public void unsetSellState() {
    this.sellState = null;
  }

  /** Returns true if field sellState is set (has been assigned a value) and false otherwise */
  public boolean isSetSellState() {
    return this.sellState != null;
  }

  public void setSellStateIsSet(boolean value) {
    if (!value) {
      this.sellState = null;
    }
  }

  /**
   * 产品期限
   */
  public String getPeriod() {
    return this.period;
  }

  /**
   * 产品期限
   */
  public ProductListField setPeriod(String period) {
    this.period = period;
    return this;
  }

  public void unsetPeriod() {
    this.period = null;
  }

  /** Returns true if field period is set (has been assigned a value) and false otherwise */
  public boolean isSetPeriod() {
    return this.period != null;
  }

  public void setPeriodIsSet(boolean value) {
    if (!value) {
      this.period = null;
    }
  }

  /**
   * 产品收益率%
   */
  public String getIncomeRate() {
    return this.incomeRate;
  }

  /**
   * 产品收益率%
   */
  public ProductListField setIncomeRate(String incomeRate) {
    this.incomeRate = incomeRate;
    return this;
  }

  public void unsetIncomeRate() {
    this.incomeRate = null;
  }

  /** Returns true if field incomeRate is set (has been assigned a value) and false otherwise */
  public boolean isSetIncomeRate() {
    return this.incomeRate != null;
  }

  public void setIncomeRateIsSet(boolean value) {
    if (!value) {
      this.incomeRate = null;
    }
  }

  /**
   * 总份额
   */
  public int getTotalShare() {
    return this.totalShare;
  }

  /**
   * 总份额
   */
  public ProductListField setTotalShare(int totalShare) {
    this.totalShare = totalShare;
    setTotalShareIsSet(true);
    return this;
  }

  public void unsetTotalShare() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALSHARE_ISSET_ID);
  }

  /** Returns true if field totalShare is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalShare() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALSHARE_ISSET_ID);
  }

  public void setTotalShareIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALSHARE_ISSET_ID, value);
  }

  /**
   * 虚拟剩余份额
   */
  public int getVirtualRemainShare() {
    return this.virtualRemainShare;
  }

  /**
   * 虚拟剩余份额
   */
  public ProductListField setVirtualRemainShare(int virtualRemainShare) {
    this.virtualRemainShare = virtualRemainShare;
    setVirtualRemainShareIsSet(true);
    return this;
  }

  public void unsetVirtualRemainShare() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIRTUALREMAINSHARE_ISSET_ID);
  }

  /** Returns true if field virtualRemainShare is set (has been assigned a value) and false otherwise */
  public boolean isSetVirtualRemainShare() {
    return EncodingUtils.testBit(__isset_bitfield, __VIRTUALREMAINSHARE_ISSET_ID);
  }

  public void setVirtualRemainShareIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIRTUALREMAINSHARE_ISSET_ID, value);
  }

  /**
   * 开始购买时间
   */
  public int getSellBeginTime() {
    return this.sellBeginTime;
  }

  /**
   * 开始购买时间
   */
  public ProductListField setSellBeginTime(int sellBeginTime) {
    this.sellBeginTime = sellBeginTime;
    setSellBeginTimeIsSet(true);
    return this;
  }

  public void unsetSellBeginTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SELLBEGINTIME_ISSET_ID);
  }

  /** Returns true if field sellBeginTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSellBeginTime() {
    return EncodingUtils.testBit(__isset_bitfield, __SELLBEGINTIME_ISSET_ID);
  }

  public void setSellBeginTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SELLBEGINTIME_ISSET_ID, value);
  }

  /**
   * 结束购买时间
   */
  public int getSellEndTime() {
    return this.sellEndTime;
  }

  /**
   * 结束购买时间
   */
  public ProductListField setSellEndTime(int sellEndTime) {
    this.sellEndTime = sellEndTime;
    setSellEndTimeIsSet(true);
    return this;
  }

  public void unsetSellEndTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SELLENDTIME_ISSET_ID);
  }

  /** Returns true if field sellEndTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSellEndTime() {
    return EncodingUtils.testBit(__isset_bitfield, __SELLENDTIME_ISSET_ID);
  }

  public void setSellEndTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SELLENDTIME_ISSET_ID, value);
  }

  /**
   * 成团类型，如100万成团
   */
  public String getGroup() {
    return this.group;
  }

  /**
   * 成团类型，如100万成团
   */
  public ProductListField setGroup(String group) {
    this.group = group;
    return this;
  }

  public void unsetGroup() {
    this.group = null;
  }

  /** Returns true if field group is set (has been assigned a value) and false otherwise */
  public boolean isSetGroup() {
    return this.group != null;
  }

  public void setGroupIsSet(boolean value) {
    if (!value) {
      this.group = null;
    }
  }

  /**
   * 成团百分比%
   */
  public int getGroupPercent() {
    return this.groupPercent;
  }

  /**
   * 成团百分比%
   */
  public ProductListField setGroupPercent(int groupPercent) {
    this.groupPercent = groupPercent;
    setGroupPercentIsSet(true);
    return this;
  }

  public void unsetGroupPercent() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GROUPPERCENT_ISSET_ID);
  }

  /** Returns true if field groupPercent is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupPercent() {
    return EncodingUtils.testBit(__isset_bitfield, __GROUPPERCENT_ISSET_ID);
  }

  public void setGroupPercentIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GROUPPERCENT_ISSET_ID, value);
  }

  /**
   * 已售出百分比
   */
  public int getSoldPercent() {
    return this.soldPercent;
  }

  /**
   * 已售出百分比
   */
  public ProductListField setSoldPercent(int soldPercent) {
    this.soldPercent = soldPercent;
    setSoldPercentIsSet(true);
    return this;
  }

  public void unsetSoldPercent() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SOLDPERCENT_ISSET_ID);
  }

  /** Returns true if field soldPercent is set (has been assigned a value) and false otherwise */
  public boolean isSetSoldPercent() {
    return EncodingUtils.testBit(__isset_bitfield, __SOLDPERCENT_ISSET_ID);
  }

  public void setSoldPercentIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SOLDPERCENT_ISSET_ID, value);
  }

  /**
   * 售罄用时
   */
  public int getSoldOutTimeUsed() {
    return this.soldOutTimeUsed;
  }

  /**
   * 售罄用时
   */
  public ProductListField setSoldOutTimeUsed(int soldOutTimeUsed) {
    this.soldOutTimeUsed = soldOutTimeUsed;
    setSoldOutTimeUsedIsSet(true);
    return this;
  }

  public void unsetSoldOutTimeUsed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SOLDOUTTIMEUSED_ISSET_ID);
  }

  /** Returns true if field soldOutTimeUsed is set (has been assigned a value) and false otherwise */
  public boolean isSetSoldOutTimeUsed() {
    return EncodingUtils.testBit(__isset_bitfield, __SOLDOUTTIMEUSED_ISSET_ID);
  }

  public void setSoldOutTimeUsedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SOLDOUTTIMEUSED_ISSET_ID, value);
  }

  /**
   * 产品收益率E6
   */
  public long getIncomeRateE6() {
    return this.incomeRateE6;
  }

  /**
   * 产品收益率E6
   */
  public ProductListField setIncomeRateE6(long incomeRateE6) {
    this.incomeRateE6 = incomeRateE6;
    setIncomeRateE6IsSet(true);
    return this;
  }

  public void unsetIncomeRateE6() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INCOMERATEE6_ISSET_ID);
  }

  /** Returns true if field incomeRateE6 is set (has been assigned a value) and false otherwise */
  public boolean isSetIncomeRateE6() {
    return EncodingUtils.testBit(__isset_bitfield, __INCOMERATEE6_ISSET_ID);
  }

  public void setIncomeRateE6IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INCOMERATEE6_ISSET_ID, value);
  }

  /**
   * 产品收益率下限E6
   */
  public long getMinIncomeRateE6() {
    return this.minIncomeRateE6;
  }

  /**
   * 产品收益率下限E6
   */
  public ProductListField setMinIncomeRateE6(long minIncomeRateE6) {
    this.minIncomeRateE6 = minIncomeRateE6;
    setMinIncomeRateE6IsSet(true);
    return this;
  }

  public void unsetMinIncomeRateE6() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MININCOMERATEE6_ISSET_ID);
  }

  /** Returns true if field minIncomeRateE6 is set (has been assigned a value) and false otherwise */
  public boolean isSetMinIncomeRateE6() {
    return EncodingUtils.testBit(__isset_bitfield, __MININCOMERATEE6_ISSET_ID);
  }

  public void setMinIncomeRateE6IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MININCOMERATEE6_ISSET_ID, value);
  }

  /**
   * 结束售卖时间
   */
  public int getLastSellTime() {
    return this.lastSellTime;
  }

  /**
   * 结束售卖时间
   */
  public ProductListField setLastSellTime(int lastSellTime) {
    this.lastSellTime = lastSellTime;
    setLastSellTimeIsSet(true);
    return this;
  }

  public void unsetLastSellTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTSELLTIME_ISSET_ID);
  }

  /** Returns true if field lastSellTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLastSellTime() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTSELLTIME_ISSET_ID);
  }

  public void setLastSellTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTSELLTIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case PRODUCT_NAME:
      if (value == null) {
        unsetProductName();
      } else {
        setProductName((String)value);
      }
      break;

    case MIN_BUY_SHARE:
      if (value == null) {
        unsetMinBuyShare();
      } else {
        setMinBuyShare((Integer)value);
      }
      break;

    case SELL_STATE:
      if (value == null) {
        unsetSellState();
      } else {
        setSellState((EProductSellState)value);
      }
      break;

    case PERIOD:
      if (value == null) {
        unsetPeriod();
      } else {
        setPeriod((String)value);
      }
      break;

    case INCOME_RATE:
      if (value == null) {
        unsetIncomeRate();
      } else {
        setIncomeRate((String)value);
      }
      break;

    case TOTAL_SHARE:
      if (value == null) {
        unsetTotalShare();
      } else {
        setTotalShare((Integer)value);
      }
      break;

    case VIRTUAL_REMAIN_SHARE:
      if (value == null) {
        unsetVirtualRemainShare();
      } else {
        setVirtualRemainShare((Integer)value);
      }
      break;

    case SELL_BEGIN_TIME:
      if (value == null) {
        unsetSellBeginTime();
      } else {
        setSellBeginTime((Integer)value);
      }
      break;

    case SELL_END_TIME:
      if (value == null) {
        unsetSellEndTime();
      } else {
        setSellEndTime((Integer)value);
      }
      break;

    case GROUP:
      if (value == null) {
        unsetGroup();
      } else {
        setGroup((String)value);
      }
      break;

    case GROUP_PERCENT:
      if (value == null) {
        unsetGroupPercent();
      } else {
        setGroupPercent((Integer)value);
      }
      break;

    case SOLD_PERCENT:
      if (value == null) {
        unsetSoldPercent();
      } else {
        setSoldPercent((Integer)value);
      }
      break;

    case SOLD_OUT_TIME_USED:
      if (value == null) {
        unsetSoldOutTimeUsed();
      } else {
        setSoldOutTimeUsed((Integer)value);
      }
      break;

    case INCOME_RATE_E6:
      if (value == null) {
        unsetIncomeRateE6();
      } else {
        setIncomeRateE6((Long)value);
      }
      break;

    case MIN_INCOME_RATE_E6:
      if (value == null) {
        unsetMinIncomeRateE6();
      } else {
        setMinIncomeRateE6((Long)value);
      }
      break;

    case LAST_SELL_TIME:
      if (value == null) {
        unsetLastSellTime();
      } else {
        setLastSellTime((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case PRODUCT_NAME:
      return getProductName();

    case MIN_BUY_SHARE:
      return Integer.valueOf(getMinBuyShare());

    case SELL_STATE:
      return getSellState();

    case PERIOD:
      return getPeriod();

    case INCOME_RATE:
      return getIncomeRate();

    case TOTAL_SHARE:
      return Integer.valueOf(getTotalShare());

    case VIRTUAL_REMAIN_SHARE:
      return Integer.valueOf(getVirtualRemainShare());

    case SELL_BEGIN_TIME:
      return Integer.valueOf(getSellBeginTime());

    case SELL_END_TIME:
      return Integer.valueOf(getSellEndTime());

    case GROUP:
      return getGroup();

    case GROUP_PERCENT:
      return Integer.valueOf(getGroupPercent());

    case SOLD_PERCENT:
      return Integer.valueOf(getSoldPercent());

    case SOLD_OUT_TIME_USED:
      return Integer.valueOf(getSoldOutTimeUsed());

    case INCOME_RATE_E6:
      return Long.valueOf(getIncomeRateE6());

    case MIN_INCOME_RATE_E6:
      return Long.valueOf(getMinIncomeRateE6());

    case LAST_SELL_TIME:
      return Integer.valueOf(getLastSellTime());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case PRODUCT_NAME:
      return isSetProductName();
    case MIN_BUY_SHARE:
      return isSetMinBuyShare();
    case SELL_STATE:
      return isSetSellState();
    case PERIOD:
      return isSetPeriod();
    case INCOME_RATE:
      return isSetIncomeRate();
    case TOTAL_SHARE:
      return isSetTotalShare();
    case VIRTUAL_REMAIN_SHARE:
      return isSetVirtualRemainShare();
    case SELL_BEGIN_TIME:
      return isSetSellBeginTime();
    case SELL_END_TIME:
      return isSetSellEndTime();
    case GROUP:
      return isSetGroup();
    case GROUP_PERCENT:
      return isSetGroupPercent();
    case SOLD_PERCENT:
      return isSetSoldPercent();
    case SOLD_OUT_TIME_USED:
      return isSetSoldOutTimeUsed();
    case INCOME_RATE_E6:
      return isSetIncomeRateE6();
    case MIN_INCOME_RATE_E6:
      return isSetMinIncomeRateE6();
    case LAST_SELL_TIME:
      return isSetLastSellTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProductListField)
      return this.equals((ProductListField)that);
    return false;
  }

  public boolean equals(ProductListField that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_productName = true && this.isSetProductName();
    boolean that_present_productName = true && that.isSetProductName();
    if (this_present_productName || that_present_productName) {
      if (!(this_present_productName && that_present_productName))
        return false;
      if (!this.productName.equals(that.productName))
        return false;
    }

    boolean this_present_minBuyShare = true;
    boolean that_present_minBuyShare = true;
    if (this_present_minBuyShare || that_present_minBuyShare) {
      if (!(this_present_minBuyShare && that_present_minBuyShare))
        return false;
      if (this.minBuyShare != that.minBuyShare)
        return false;
    }

    boolean this_present_sellState = true && this.isSetSellState();
    boolean that_present_sellState = true && that.isSetSellState();
    if (this_present_sellState || that_present_sellState) {
      if (!(this_present_sellState && that_present_sellState))
        return false;
      if (!this.sellState.equals(that.sellState))
        return false;
    }

    boolean this_present_period = true && this.isSetPeriod();
    boolean that_present_period = true && that.isSetPeriod();
    if (this_present_period || that_present_period) {
      if (!(this_present_period && that_present_period))
        return false;
      if (!this.period.equals(that.period))
        return false;
    }

    boolean this_present_incomeRate = true && this.isSetIncomeRate();
    boolean that_present_incomeRate = true && that.isSetIncomeRate();
    if (this_present_incomeRate || that_present_incomeRate) {
      if (!(this_present_incomeRate && that_present_incomeRate))
        return false;
      if (!this.incomeRate.equals(that.incomeRate))
        return false;
    }

    boolean this_present_totalShare = true;
    boolean that_present_totalShare = true;
    if (this_present_totalShare || that_present_totalShare) {
      if (!(this_present_totalShare && that_present_totalShare))
        return false;
      if (this.totalShare != that.totalShare)
        return false;
    }

    boolean this_present_virtualRemainShare = true;
    boolean that_present_virtualRemainShare = true;
    if (this_present_virtualRemainShare || that_present_virtualRemainShare) {
      if (!(this_present_virtualRemainShare && that_present_virtualRemainShare))
        return false;
      if (this.virtualRemainShare != that.virtualRemainShare)
        return false;
    }

    boolean this_present_sellBeginTime = true;
    boolean that_present_sellBeginTime = true;
    if (this_present_sellBeginTime || that_present_sellBeginTime) {
      if (!(this_present_sellBeginTime && that_present_sellBeginTime))
        return false;
      if (this.sellBeginTime != that.sellBeginTime)
        return false;
    }

    boolean this_present_sellEndTime = true;
    boolean that_present_sellEndTime = true;
    if (this_present_sellEndTime || that_present_sellEndTime) {
      if (!(this_present_sellEndTime && that_present_sellEndTime))
        return false;
      if (this.sellEndTime != that.sellEndTime)
        return false;
    }

    boolean this_present_group = true && this.isSetGroup();
    boolean that_present_group = true && that.isSetGroup();
    if (this_present_group || that_present_group) {
      if (!(this_present_group && that_present_group))
        return false;
      if (!this.group.equals(that.group))
        return false;
    }

    boolean this_present_groupPercent = true && this.isSetGroupPercent();
    boolean that_present_groupPercent = true && that.isSetGroupPercent();
    if (this_present_groupPercent || that_present_groupPercent) {
      if (!(this_present_groupPercent && that_present_groupPercent))
        return false;
      if (this.groupPercent != that.groupPercent)
        return false;
    }

    boolean this_present_soldPercent = true && this.isSetSoldPercent();
    boolean that_present_soldPercent = true && that.isSetSoldPercent();
    if (this_present_soldPercent || that_present_soldPercent) {
      if (!(this_present_soldPercent && that_present_soldPercent))
        return false;
      if (this.soldPercent != that.soldPercent)
        return false;
    }

    boolean this_present_soldOutTimeUsed = true && this.isSetSoldOutTimeUsed();
    boolean that_present_soldOutTimeUsed = true && that.isSetSoldOutTimeUsed();
    if (this_present_soldOutTimeUsed || that_present_soldOutTimeUsed) {
      if (!(this_present_soldOutTimeUsed && that_present_soldOutTimeUsed))
        return false;
      if (this.soldOutTimeUsed != that.soldOutTimeUsed)
        return false;
    }

    boolean this_present_incomeRateE6 = true;
    boolean that_present_incomeRateE6 = true;
    if (this_present_incomeRateE6 || that_present_incomeRateE6) {
      if (!(this_present_incomeRateE6 && that_present_incomeRateE6))
        return false;
      if (this.incomeRateE6 != that.incomeRateE6)
        return false;
    }

    boolean this_present_minIncomeRateE6 = true;
    boolean that_present_minIncomeRateE6 = true;
    if (this_present_minIncomeRateE6 || that_present_minIncomeRateE6) {
      if (!(this_present_minIncomeRateE6 && that_present_minIncomeRateE6))
        return false;
      if (this.minIncomeRateE6 != that.minIncomeRateE6)
        return false;
    }

    boolean this_present_lastSellTime = true;
    boolean that_present_lastSellTime = true;
    if (this_present_lastSellTime || that_present_lastSellTime) {
      if (!(this_present_lastSellTime && that_present_lastSellTime))
        return false;
      if (this.lastSellTime != that.lastSellTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ProductListField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductName()).compareTo(other.isSetProductName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productName, other.productName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinBuyShare()).compareTo(other.isSetMinBuyShare());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinBuyShare()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minBuyShare, other.minBuyShare);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSellState()).compareTo(other.isSetSellState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSellState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sellState, other.sellState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPeriod()).compareTo(other.isSetPeriod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPeriod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.period, other.period);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncomeRate()).compareTo(other.isSetIncomeRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncomeRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.incomeRate, other.incomeRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalShare()).compareTo(other.isSetTotalShare());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalShare()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalShare, other.totalShare);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVirtualRemainShare()).compareTo(other.isSetVirtualRemainShare());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVirtualRemainShare()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.virtualRemainShare, other.virtualRemainShare);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSellBeginTime()).compareTo(other.isSetSellBeginTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSellBeginTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sellBeginTime, other.sellBeginTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSellEndTime()).compareTo(other.isSetSellEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSellEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sellEndTime, other.sellEndTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroup()).compareTo(other.isSetGroup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroup()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group, other.group);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupPercent()).compareTo(other.isSetGroupPercent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupPercent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupPercent, other.groupPercent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSoldPercent()).compareTo(other.isSetSoldPercent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSoldPercent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.soldPercent, other.soldPercent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSoldOutTimeUsed()).compareTo(other.isSetSoldOutTimeUsed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSoldOutTimeUsed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.soldOutTimeUsed, other.soldOutTimeUsed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncomeRateE6()).compareTo(other.isSetIncomeRateE6());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncomeRateE6()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.incomeRateE6, other.incomeRateE6);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinIncomeRateE6()).compareTo(other.isSetMinIncomeRateE6());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinIncomeRateE6()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minIncomeRateE6, other.minIncomeRateE6);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastSellTime()).compareTo(other.isSetLastSellTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastSellTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastSellTime, other.lastSellTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProductListField(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("productName:");
    if (this.productName == null) {
      sb.append("null");
    } else {
      sb.append(this.productName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("minBuyShare:");
    sb.append(this.minBuyShare);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sellState:");
    if (this.sellState == null) {
      sb.append("null");
    } else {
      sb.append(this.sellState);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("period:");
    if (this.period == null) {
      sb.append("null");
    } else {
      sb.append(this.period);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("incomeRate:");
    if (this.incomeRate == null) {
      sb.append("null");
    } else {
      sb.append(this.incomeRate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalShare:");
    sb.append(this.totalShare);
    first = false;
    if (!first) sb.append(", ");
    sb.append("virtualRemainShare:");
    sb.append(this.virtualRemainShare);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sellBeginTime:");
    sb.append(this.sellBeginTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sellEndTime:");
    sb.append(this.sellEndTime);
    first = false;
    if (isSetGroup()) {
      if (!first) sb.append(", ");
      sb.append("group:");
      if (this.group == null) {
        sb.append("null");
      } else {
        sb.append(this.group);
      }
      first = false;
    }
    if (isSetGroupPercent()) {
      if (!first) sb.append(", ");
      sb.append("groupPercent:");
      sb.append(this.groupPercent);
      first = false;
    }
    if (isSetSoldPercent()) {
      if (!first) sb.append(", ");
      sb.append("soldPercent:");
      sb.append(this.soldPercent);
      first = false;
    }
    if (isSetSoldOutTimeUsed()) {
      if (!first) sb.append(", ");
      sb.append("soldOutTimeUsed:");
      sb.append(this.soldOutTimeUsed);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("incomeRateE6:");
    sb.append(this.incomeRateE6);
    first = false;
    if (!first) sb.append(", ");
    sb.append("minIncomeRateE6:");
    sb.append(this.minIncomeRateE6);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastSellTime:");
    sb.append(this.lastSellTime);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProductListFieldStandardSchemeFactory implements SchemeFactory {
    public ProductListFieldStandardScheme getScheme() {
      return new ProductListFieldStandardScheme();
    }
  }

  private static class ProductListFieldStandardScheme extends StandardScheme<ProductListField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProductListField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PRODUCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productName = iprot.readString();
              struct.setProductNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MIN_BUY_SHARE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.minBuyShare = iprot.readI32();
              struct.setMinBuyShareIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SELL_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sellState = EProductSellState.findByValue(iprot.readI32());
              struct.setSellStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PERIOD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.period = iprot.readString();
              struct.setPeriodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // INCOME_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.incomeRate = iprot.readString();
              struct.setIncomeRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TOTAL_SHARE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalShare = iprot.readI32();
              struct.setTotalShareIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // VIRTUAL_REMAIN_SHARE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.virtualRemainShare = iprot.readI32();
              struct.setVirtualRemainShareIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SELL_BEGIN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sellBeginTime = iprot.readI32();
              struct.setSellBeginTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SELL_END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sellEndTime = iprot.readI32();
              struct.setSellEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // GROUP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.group = iprot.readString();
              struct.setGroupIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // GROUP_PERCENT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.groupPercent = iprot.readI32();
              struct.setGroupPercentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SOLD_PERCENT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.soldPercent = iprot.readI32();
              struct.setSoldPercentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // SOLD_OUT_TIME_USED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.soldOutTimeUsed = iprot.readI32();
              struct.setSoldOutTimeUsedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // INCOME_RATE_E6
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.incomeRateE6 = iprot.readI64();
              struct.setIncomeRateE6IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // MIN_INCOME_RATE_E6
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.minIncomeRateE6 = iprot.readI64();
              struct.setMinIncomeRateE6IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // LAST_SELL_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lastSellTime = iprot.readI32();
              struct.setLastSellTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProductListField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      if (struct.productName != null) {
        oprot.writeFieldBegin(PRODUCT_NAME_FIELD_DESC);
        oprot.writeString(struct.productName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MIN_BUY_SHARE_FIELD_DESC);
      oprot.writeI32(struct.minBuyShare);
      oprot.writeFieldEnd();
      if (struct.sellState != null) {
        oprot.writeFieldBegin(SELL_STATE_FIELD_DESC);
        oprot.writeI32(struct.sellState.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.period != null) {
        oprot.writeFieldBegin(PERIOD_FIELD_DESC);
        oprot.writeString(struct.period);
        oprot.writeFieldEnd();
      }
      if (struct.incomeRate != null) {
        oprot.writeFieldBegin(INCOME_RATE_FIELD_DESC);
        oprot.writeString(struct.incomeRate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOTAL_SHARE_FIELD_DESC);
      oprot.writeI32(struct.totalShare);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VIRTUAL_REMAIN_SHARE_FIELD_DESC);
      oprot.writeI32(struct.virtualRemainShare);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SELL_BEGIN_TIME_FIELD_DESC);
      oprot.writeI32(struct.sellBeginTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SELL_END_TIME_FIELD_DESC);
      oprot.writeI32(struct.sellEndTime);
      oprot.writeFieldEnd();
      if (struct.group != null) {
        if (struct.isSetGroup()) {
          oprot.writeFieldBegin(GROUP_FIELD_DESC);
          oprot.writeString(struct.group);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetGroupPercent()) {
        oprot.writeFieldBegin(GROUP_PERCENT_FIELD_DESC);
        oprot.writeI32(struct.groupPercent);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSoldPercent()) {
        oprot.writeFieldBegin(SOLD_PERCENT_FIELD_DESC);
        oprot.writeI32(struct.soldPercent);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSoldOutTimeUsed()) {
        oprot.writeFieldBegin(SOLD_OUT_TIME_USED_FIELD_DESC);
        oprot.writeI32(struct.soldOutTimeUsed);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INCOME_RATE_E6_FIELD_DESC);
      oprot.writeI64(struct.incomeRateE6);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MIN_INCOME_RATE_E6_FIELD_DESC);
      oprot.writeI64(struct.minIncomeRateE6);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LAST_SELL_TIME_FIELD_DESC);
      oprot.writeI32(struct.lastSellTime);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProductListFieldTupleSchemeFactory implements SchemeFactory {
    public ProductListFieldTupleScheme getScheme() {
      return new ProductListFieldTupleScheme();
    }
  }

  private static class ProductListFieldTupleScheme extends TupleScheme<ProductListField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProductListField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetProductName()) {
        optionals.set(1);
      }
      if (struct.isSetMinBuyShare()) {
        optionals.set(2);
      }
      if (struct.isSetSellState()) {
        optionals.set(3);
      }
      if (struct.isSetPeriod()) {
        optionals.set(4);
      }
      if (struct.isSetIncomeRate()) {
        optionals.set(5);
      }
      if (struct.isSetTotalShare()) {
        optionals.set(6);
      }
      if (struct.isSetVirtualRemainShare()) {
        optionals.set(7);
      }
      if (struct.isSetSellBeginTime()) {
        optionals.set(8);
      }
      if (struct.isSetSellEndTime()) {
        optionals.set(9);
      }
      if (struct.isSetGroup()) {
        optionals.set(10);
      }
      if (struct.isSetGroupPercent()) {
        optionals.set(11);
      }
      if (struct.isSetSoldPercent()) {
        optionals.set(12);
      }
      if (struct.isSetSoldOutTimeUsed()) {
        optionals.set(13);
      }
      if (struct.isSetIncomeRateE6()) {
        optionals.set(14);
      }
      if (struct.isSetMinIncomeRateE6()) {
        optionals.set(15);
      }
      if (struct.isSetLastSellTime()) {
        optionals.set(16);
      }
      oprot.writeBitSet(optionals, 17);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetProductName()) {
        oprot.writeString(struct.productName);
      }
      if (struct.isSetMinBuyShare()) {
        oprot.writeI32(struct.minBuyShare);
      }
      if (struct.isSetSellState()) {
        oprot.writeI32(struct.sellState.getValue());
      }
      if (struct.isSetPeriod()) {
        oprot.writeString(struct.period);
      }
      if (struct.isSetIncomeRate()) {
        oprot.writeString(struct.incomeRate);
      }
      if (struct.isSetTotalShare()) {
        oprot.writeI32(struct.totalShare);
      }
      if (struct.isSetVirtualRemainShare()) {
        oprot.writeI32(struct.virtualRemainShare);
      }
      if (struct.isSetSellBeginTime()) {
        oprot.writeI32(struct.sellBeginTime);
      }
      if (struct.isSetSellEndTime()) {
        oprot.writeI32(struct.sellEndTime);
      }
      if (struct.isSetGroup()) {
        oprot.writeString(struct.group);
      }
      if (struct.isSetGroupPercent()) {
        oprot.writeI32(struct.groupPercent);
      }
      if (struct.isSetSoldPercent()) {
        oprot.writeI32(struct.soldPercent);
      }
      if (struct.isSetSoldOutTimeUsed()) {
        oprot.writeI32(struct.soldOutTimeUsed);
      }
      if (struct.isSetIncomeRateE6()) {
        oprot.writeI64(struct.incomeRateE6);
      }
      if (struct.isSetMinIncomeRateE6()) {
        oprot.writeI64(struct.minIncomeRateE6);
      }
      if (struct.isSetLastSellTime()) {
        oprot.writeI32(struct.lastSellTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProductListField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(17);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.productName = iprot.readString();
        struct.setProductNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.minBuyShare = iprot.readI32();
        struct.setMinBuyShareIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sellState = EProductSellState.findByValue(iprot.readI32());
        struct.setSellStateIsSet(true);
      }
      if (incoming.get(4)) {
        struct.period = iprot.readString();
        struct.setPeriodIsSet(true);
      }
      if (incoming.get(5)) {
        struct.incomeRate = iprot.readString();
        struct.setIncomeRateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.totalShare = iprot.readI32();
        struct.setTotalShareIsSet(true);
      }
      if (incoming.get(7)) {
        struct.virtualRemainShare = iprot.readI32();
        struct.setVirtualRemainShareIsSet(true);
      }
      if (incoming.get(8)) {
        struct.sellBeginTime = iprot.readI32();
        struct.setSellBeginTimeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.sellEndTime = iprot.readI32();
        struct.setSellEndTimeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.group = iprot.readString();
        struct.setGroupIsSet(true);
      }
      if (incoming.get(11)) {
        struct.groupPercent = iprot.readI32();
        struct.setGroupPercentIsSet(true);
      }
      if (incoming.get(12)) {
        struct.soldPercent = iprot.readI32();
        struct.setSoldPercentIsSet(true);
      }
      if (incoming.get(13)) {
        struct.soldOutTimeUsed = iprot.readI32();
        struct.setSoldOutTimeUsedIsSet(true);
      }
      if (incoming.get(14)) {
        struct.incomeRateE6 = iprot.readI64();
        struct.setIncomeRateE6IsSet(true);
      }
      if (incoming.get(15)) {
        struct.minIncomeRateE6 = iprot.readI64();
        struct.setMinIncomeRateE6IsSet(true);
      }
      if (incoming.get(16)) {
        struct.lastSellTime = iprot.readI32();
        struct.setLastSellTimeIsSet(true);
      }
    }
  }

}

