/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.bangcar.app.mapi.product;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.EncodingUtils;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;

/**
 * 产品详情返回
 */
public class ProductDetailResp implements org.apache.thrift.TBase<ProductDetailResp, ProductDetailResp._Fields>, java.io.Serializable, Cloneable, Comparable<ProductDetailResp> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProductDetailResp");

  private static final org.apache.thrift.protocol.TField HEAD_FIELD_DESC = new org.apache.thrift.protocol.TField("head", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField PRODUCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("productName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MIN_BUY_SHARE_FIELD_DESC = new org.apache.thrift.protocol.TField("minBuyShare", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField SELL_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("sellState", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField PERIOD_FIELD_DESC = new org.apache.thrift.protocol.TField("period", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField INCOME_RATE_E6_FIELD_DESC = new org.apache.thrift.protocol.TField("incomeRateE6", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField INCOME_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("incomeRate", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField MIN_INCOME_RATE_E6_FIELD_DESC = new org.apache.thrift.protocol.TField("minIncomeRateE6", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField SOLD_PERCENT_FIELD_DESC = new org.apache.thrift.protocol.TField("soldPercent", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField TOTAL_SHARE_FIELD_DESC = new org.apache.thrift.protocol.TField("totalShare", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField VIRTUAL_REMAIN_SHARE_FIELD_DESC = new org.apache.thrift.protocol.TField("virtualRemainShare", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField REMAIN_SHARE_FIELD_DESC = new org.apache.thrift.protocol.TField("remainShare", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField MAX_BUY_SHARE_FIELD_DESC = new org.apache.thrift.protocol.TField("maxBuyShare", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField INCR_SHARE_FIELD_DESC = new org.apache.thrift.protocol.TField("incrShare", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField SELL_BEGIN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("sellBeginTime", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField SELL_END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("sellEndTime", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField INCOME_END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("incomeEndTime", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField INCOME_ASSIGN_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("incomeAssignType", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField CAN_AHEAD_END_FIELD_DESC = new org.apache.thrift.protocol.TField("canAheadEnd", org.apache.thrift.protocol.TType.BOOL, (short)19);
  private static final org.apache.thrift.protocol.TField WILL_AHEAD_END_FIELD_DESC = new org.apache.thrift.protocol.TField("willAheadEnd", org.apache.thrift.protocol.TType.BOOL, (short)20);
  private static final org.apache.thrift.protocol.TField GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("group", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField GROUP_PERCENT_FIELD_DESC = new org.apache.thrift.protocol.TField("groupPercent", org.apache.thrift.protocol.TType.I32, (short)22);
  private static final org.apache.thrift.protocol.TField SOLD_OUT_TIME_USED_FIELD_DESC = new org.apache.thrift.protocol.TField("soldOutTimeUsed", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)24);
  private static final org.apache.thrift.protocol.TField TAB_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("tabParams", org.apache.thrift.protocol.TType.LIST, (short)25);
  private static final org.apache.thrift.protocol.TField LAST_SELL_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastSellTime", org.apache.thrift.protocol.TType.I32, (short)26);
  private static final org.apache.thrift.protocol.TField DETAIL_ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("detailItems", org.apache.thrift.protocol.TType.LIST, (short)27);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProductDetailRespStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProductDetailRespTupleSchemeFactory());
  }

  public com.bangcar.app.mapi.base.MApiRespHead head; // required
  /**
   * 产品名称
   */
  public String productName; // required
  /**
   * 起头金额
   */
  public int minBuyShare; // required
  /**
   * 产品状态
   * 
   * @see EProductSellState
   */
  public EProductSellState sellState; // required
  /**
   * 产品期限
   */
  public String period; // required
  /**
   * 产品收益率E6
   */
  public long incomeRateE6; // required
  /**
   * 产品收益率%
   */
  public String incomeRate; // required
  /**
   * 产品收益率下限E6
   */
  public long minIncomeRateE6; // required
  /**
   * 已售卖百分比
   */
  public int soldPercent; // required
  /**
   * 总份额
   */
  public int totalShare; // required
  /**
   * 虚拟剩余份额
   */
  public int virtualRemainShare; // required
  /**
   * 实际剩余份额
   */
  public int remainShare; // required
  /**
   * 最大单笔金额
   */
  public int maxBuyShare; // required
  /**
   * 最小单笔增量金额
   */
  public int incrShare; // required
  /**
   * 开始购买时间
   */
  public int sellBeginTime; // required
  /**
   * 结束购买时间
   */
  public int sellEndTime; // required
  /**
   * 产品到期结束时间
   */
  public int incomeEndTime; // required
  /**
   * 收益分配方式
   */
  public int incomeAssignType; // required
  /**
   * 是否可提前结束
   */
  public boolean canAheadEnd; // required
  /**
   * 是否将会提前结束（显示最长）
   */
  public boolean willAheadEnd; // required
  /**
   * 成团类型，如100万成团
   */
  public String group; // optional
  /**
   * 成团百分比%
   */
  public int groupPercent; // optional
  /**
   * 售罄用时
   */
  public int soldOutTimeUsed; // optional
  /**
   * 产品PID
   */
  public int pid; // required
  /**
   * webView tab
   */
  public List<com.bangcar.app.mapi.common.KV> tabParams; // required
  /**
   * 结束售卖时间
   */
  public int lastSellTime; // required
  /**
   * 产品详情说明item
   */
  public List<com.bangcar.app.mapi.common.KV> detailItems; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HEAD((short)1, "head"),
    /**
     * 产品名称
     */
    PRODUCT_NAME((short)2, "productName"),
    /**
     * 起头金额
     */
    MIN_BUY_SHARE((short)3, "minBuyShare"),
    /**
     * 产品状态
     * 
     * @see EProductSellState
     */
    SELL_STATE((short)4, "sellState"),
    /**
     * 产品期限
     */
    PERIOD((short)5, "period"),
    /**
     * 产品收益率E6
     */
    INCOME_RATE_E6((short)6, "incomeRateE6"),
    /**
     * 产品收益率%
     */
    INCOME_RATE((short)7, "incomeRate"),
    /**
     * 产品收益率下限E6
     */
    MIN_INCOME_RATE_E6((short)8, "minIncomeRateE6"),
    /**
     * 已售卖百分比
     */
    SOLD_PERCENT((short)9, "soldPercent"),
    /**
     * 总份额
     */
    TOTAL_SHARE((short)10, "totalShare"),
    /**
     * 虚拟剩余份额
     */
    VIRTUAL_REMAIN_SHARE((short)11, "virtualRemainShare"),
    /**
     * 实际剩余份额
     */
    REMAIN_SHARE((short)12, "remainShare"),
    /**
     * 最大单笔金额
     */
    MAX_BUY_SHARE((short)13, "maxBuyShare"),
    /**
     * 最小单笔增量金额
     */
    INCR_SHARE((short)14, "incrShare"),
    /**
     * 开始购买时间
     */
    SELL_BEGIN_TIME((short)15, "sellBeginTime"),
    /**
     * 结束购买时间
     */
    SELL_END_TIME((short)16, "sellEndTime"),
    /**
     * 产品到期结束时间
     */
    INCOME_END_TIME((short)17, "incomeEndTime"),
    /**
     * 收益分配方式
     */
    INCOME_ASSIGN_TYPE((short)18, "incomeAssignType"),
    /**
     * 是否可提前结束
     */
    CAN_AHEAD_END((short)19, "canAheadEnd"),
    /**
     * 是否将会提前结束（显示最长）
     */
    WILL_AHEAD_END((short)20, "willAheadEnd"),
    /**
     * 成团类型，如100万成团
     */
    GROUP((short)21, "group"),
    /**
     * 成团百分比%
     */
    GROUP_PERCENT((short)22, "groupPercent"),
    /**
     * 售罄用时
     */
    SOLD_OUT_TIME_USED((short)23, "soldOutTimeUsed"),
    /**
     * 产品PID
     */
    PID((short)24, "pid"),
    /**
     * webView tab
     */
    TAB_PARAMS((short)25, "tabParams"),
    /**
     * 结束售卖时间
     */
    LAST_SELL_TIME((short)26, "lastSellTime"),
    /**
     * 产品详情说明item
     */
    DETAIL_ITEMS((short)27, "detailItems");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HEAD
          return HEAD;
        case 2: // PRODUCT_NAME
          return PRODUCT_NAME;
        case 3: // MIN_BUY_SHARE
          return MIN_BUY_SHARE;
        case 4: // SELL_STATE
          return SELL_STATE;
        case 5: // PERIOD
          return PERIOD;
        case 6: // INCOME_RATE_E6
          return INCOME_RATE_E6;
        case 7: // INCOME_RATE
          return INCOME_RATE;
        case 8: // MIN_INCOME_RATE_E6
          return MIN_INCOME_RATE_E6;
        case 9: // SOLD_PERCENT
          return SOLD_PERCENT;
        case 10: // TOTAL_SHARE
          return TOTAL_SHARE;
        case 11: // VIRTUAL_REMAIN_SHARE
          return VIRTUAL_REMAIN_SHARE;
        case 12: // REMAIN_SHARE
          return REMAIN_SHARE;
        case 13: // MAX_BUY_SHARE
          return MAX_BUY_SHARE;
        case 14: // INCR_SHARE
          return INCR_SHARE;
        case 15: // SELL_BEGIN_TIME
          return SELL_BEGIN_TIME;
        case 16: // SELL_END_TIME
          return SELL_END_TIME;
        case 17: // INCOME_END_TIME
          return INCOME_END_TIME;
        case 18: // INCOME_ASSIGN_TYPE
          return INCOME_ASSIGN_TYPE;
        case 19: // CAN_AHEAD_END
          return CAN_AHEAD_END;
        case 20: // WILL_AHEAD_END
          return WILL_AHEAD_END;
        case 21: // GROUP
          return GROUP;
        case 22: // GROUP_PERCENT
          return GROUP_PERCENT;
        case 23: // SOLD_OUT_TIME_USED
          return SOLD_OUT_TIME_USED;
        case 24: // PID
          return PID;
        case 25: // TAB_PARAMS
          return TAB_PARAMS;
        case 26: // LAST_SELL_TIME
          return LAST_SELL_TIME;
        case 27: // DETAIL_ITEMS
          return DETAIL_ITEMS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MINBUYSHARE_ISSET_ID = 0;
  private static final int __INCOMERATEE6_ISSET_ID = 1;
  private static final int __MININCOMERATEE6_ISSET_ID = 2;
  private static final int __SOLDPERCENT_ISSET_ID = 3;
  private static final int __TOTALSHARE_ISSET_ID = 4;
  private static final int __VIRTUALREMAINSHARE_ISSET_ID = 5;
  private static final int __REMAINSHARE_ISSET_ID = 6;
  private static final int __MAXBUYSHARE_ISSET_ID = 7;
  private static final int __INCRSHARE_ISSET_ID = 8;
  private static final int __SELLBEGINTIME_ISSET_ID = 9;
  private static final int __SELLENDTIME_ISSET_ID = 10;
  private static final int __INCOMEENDTIME_ISSET_ID = 11;
  private static final int __INCOMEASSIGNTYPE_ISSET_ID = 12;
  private static final int __CANAHEADEND_ISSET_ID = 13;
  private static final int __WILLAHEADEND_ISSET_ID = 14;
  private static final int __GROUPPERCENT_ISSET_ID = 15;
  private static final int __SOLDOUTTIMEUSED_ISSET_ID = 16;
  private static final int __PID_ISSET_ID = 17;
  private static final int __LASTSELLTIME_ISSET_ID = 18;
  private int __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.GROUP,_Fields.GROUP_PERCENT,_Fields.SOLD_OUT_TIME_USED};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HEAD, new org.apache.thrift.meta_data.FieldMetaData("head", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bangcar.app.mapi.base.MApiRespHead.class)));
    tmpMap.put(_Fields.PRODUCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("productName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MIN_BUY_SHARE, new org.apache.thrift.meta_data.FieldMetaData("minBuyShare", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SELL_STATE, new org.apache.thrift.meta_data.FieldMetaData("sellState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EProductSellState.class)));
    tmpMap.put(_Fields.PERIOD, new org.apache.thrift.meta_data.FieldMetaData("period", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INCOME_RATE_E6, new org.apache.thrift.meta_data.FieldMetaData("incomeRateE6", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.INCOME_RATE, new org.apache.thrift.meta_data.FieldMetaData("incomeRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MIN_INCOME_RATE_E6, new org.apache.thrift.meta_data.FieldMetaData("minIncomeRateE6", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SOLD_PERCENT, new org.apache.thrift.meta_data.FieldMetaData("soldPercent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_SHARE, new org.apache.thrift.meta_data.FieldMetaData("totalShare", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VIRTUAL_REMAIN_SHARE, new org.apache.thrift.meta_data.FieldMetaData("virtualRemainShare", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REMAIN_SHARE, new org.apache.thrift.meta_data.FieldMetaData("remainShare", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_BUY_SHARE, new org.apache.thrift.meta_data.FieldMetaData("maxBuyShare", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INCR_SHARE, new org.apache.thrift.meta_data.FieldMetaData("incrShare", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SELL_BEGIN_TIME, new org.apache.thrift.meta_data.FieldMetaData("sellBeginTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SELL_END_TIME, new org.apache.thrift.meta_data.FieldMetaData("sellEndTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INCOME_END_TIME, new org.apache.thrift.meta_data.FieldMetaData("incomeEndTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INCOME_ASSIGN_TYPE, new org.apache.thrift.meta_data.FieldMetaData("incomeAssignType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CAN_AHEAD_END, new org.apache.thrift.meta_data.FieldMetaData("canAheadEnd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.WILL_AHEAD_END, new org.apache.thrift.meta_data.FieldMetaData("willAheadEnd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.GROUP, new org.apache.thrift.meta_data.FieldMetaData("group", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GROUP_PERCENT, new org.apache.thrift.meta_data.FieldMetaData("groupPercent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SOLD_OUT_TIME_USED, new org.apache.thrift.meta_data.FieldMetaData("soldOutTimeUsed", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TAB_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("tabParams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bangcar.app.mapi.common.KV.class))));
    tmpMap.put(_Fields.LAST_SELL_TIME, new org.apache.thrift.meta_data.FieldMetaData("lastSellTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DETAIL_ITEMS, new org.apache.thrift.meta_data.FieldMetaData("detailItems", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bangcar.app.mapi.common.KV.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProductDetailResp.class, metaDataMap);
  }

  public ProductDetailResp() {
  }

  public ProductDetailResp(
    com.bangcar.app.mapi.base.MApiRespHead head,
    String productName,
    int minBuyShare,
    EProductSellState sellState,
    String period,
    long incomeRateE6,
    String incomeRate,
    long minIncomeRateE6,
    int soldPercent,
    int totalShare,
    int virtualRemainShare,
    int remainShare,
    int maxBuyShare,
    int incrShare,
    int sellBeginTime,
    int sellEndTime,
    int incomeEndTime,
    int incomeAssignType,
    boolean canAheadEnd,
    boolean willAheadEnd,
    int pid,
    List<com.bangcar.app.mapi.common.KV> tabParams,
    int lastSellTime,
    List<com.bangcar.app.mapi.common.KV> detailItems)
  {
    this();
    this.head = head;
    this.productName = productName;
    this.minBuyShare = minBuyShare;
    setMinBuyShareIsSet(true);
    this.sellState = sellState;
    this.period = period;
    this.incomeRateE6 = incomeRateE6;
    setIncomeRateE6IsSet(true);
    this.incomeRate = incomeRate;
    this.minIncomeRateE6 = minIncomeRateE6;
    setMinIncomeRateE6IsSet(true);
    this.soldPercent = soldPercent;
    setSoldPercentIsSet(true);
    this.totalShare = totalShare;
    setTotalShareIsSet(true);
    this.virtualRemainShare = virtualRemainShare;
    setVirtualRemainShareIsSet(true);
    this.remainShare = remainShare;
    setRemainShareIsSet(true);
    this.maxBuyShare = maxBuyShare;
    setMaxBuyShareIsSet(true);
    this.incrShare = incrShare;
    setIncrShareIsSet(true);
    this.sellBeginTime = sellBeginTime;
    setSellBeginTimeIsSet(true);
    this.sellEndTime = sellEndTime;
    setSellEndTimeIsSet(true);
    this.incomeEndTime = incomeEndTime;
    setIncomeEndTimeIsSet(true);
    this.incomeAssignType = incomeAssignType;
    setIncomeAssignTypeIsSet(true);
    this.canAheadEnd = canAheadEnd;
    setCanAheadEndIsSet(true);
    this.willAheadEnd = willAheadEnd;
    setWillAheadEndIsSet(true);
    this.pid = pid;
    setPidIsSet(true);
    this.tabParams = tabParams;
    this.lastSellTime = lastSellTime;
    setLastSellTimeIsSet(true);
    this.detailItems = detailItems;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProductDetailResp(ProductDetailResp other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetHead()) {
      this.head = new com.bangcar.app.mapi.base.MApiRespHead(other.head);
    }
    if (other.isSetProductName()) {
      this.productName = other.productName;
    }
    this.minBuyShare = other.minBuyShare;
    if (other.isSetSellState()) {
      this.sellState = other.sellState;
    }
    if (other.isSetPeriod()) {
      this.period = other.period;
    }
    this.incomeRateE6 = other.incomeRateE6;
    if (other.isSetIncomeRate()) {
      this.incomeRate = other.incomeRate;
    }
    this.minIncomeRateE6 = other.minIncomeRateE6;
    this.soldPercent = other.soldPercent;
    this.totalShare = other.totalShare;
    this.virtualRemainShare = other.virtualRemainShare;
    this.remainShare = other.remainShare;
    this.maxBuyShare = other.maxBuyShare;
    this.incrShare = other.incrShare;
    this.sellBeginTime = other.sellBeginTime;
    this.sellEndTime = other.sellEndTime;
    this.incomeEndTime = other.incomeEndTime;
    this.incomeAssignType = other.incomeAssignType;
    this.canAheadEnd = other.canAheadEnd;
    this.willAheadEnd = other.willAheadEnd;
    if (other.isSetGroup()) {
      this.group = other.group;
    }
    this.groupPercent = other.groupPercent;
    this.soldOutTimeUsed = other.soldOutTimeUsed;
    this.pid = other.pid;
    if (other.isSetTabParams()) {
      List<com.bangcar.app.mapi.common.KV> __this__tabParams = new ArrayList<com.bangcar.app.mapi.common.KV>(other.tabParams.size());
      for (com.bangcar.app.mapi.common.KV other_element : other.tabParams) {
        __this__tabParams.add(new com.bangcar.app.mapi.common.KV(other_element));
      }
      this.tabParams = __this__tabParams;
    }
    this.lastSellTime = other.lastSellTime;
    if (other.isSetDetailItems()) {
      List<com.bangcar.app.mapi.common.KV> __this__detailItems = new ArrayList<com.bangcar.app.mapi.common.KV>(other.detailItems.size());
      for (com.bangcar.app.mapi.common.KV other_element : other.detailItems) {
        __this__detailItems.add(new com.bangcar.app.mapi.common.KV(other_element));
      }
      this.detailItems = __this__detailItems;
    }
  }

  public ProductDetailResp deepCopy() {
    return new ProductDetailResp(this);
  }

  @Override
  public void clear() {
    this.head = null;
    this.productName = null;
    setMinBuyShareIsSet(false);
    this.minBuyShare = 0;
    this.sellState = null;
    this.period = null;
    setIncomeRateE6IsSet(false);
    this.incomeRateE6 = 0;
    this.incomeRate = null;
    setMinIncomeRateE6IsSet(false);
    this.minIncomeRateE6 = 0;
    setSoldPercentIsSet(false);
    this.soldPercent = 0;
    setTotalShareIsSet(false);
    this.totalShare = 0;
    setVirtualRemainShareIsSet(false);
    this.virtualRemainShare = 0;
    setRemainShareIsSet(false);
    this.remainShare = 0;
    setMaxBuyShareIsSet(false);
    this.maxBuyShare = 0;
    setIncrShareIsSet(false);
    this.incrShare = 0;
    setSellBeginTimeIsSet(false);
    this.sellBeginTime = 0;
    setSellEndTimeIsSet(false);
    this.sellEndTime = 0;
    setIncomeEndTimeIsSet(false);
    this.incomeEndTime = 0;
    setIncomeAssignTypeIsSet(false);
    this.incomeAssignType = 0;
    setCanAheadEndIsSet(false);
    this.canAheadEnd = false;
    setWillAheadEndIsSet(false);
    this.willAheadEnd = false;
    this.group = null;
    setGroupPercentIsSet(false);
    this.groupPercent = 0;
    setSoldOutTimeUsedIsSet(false);
    this.soldOutTimeUsed = 0;
    setPidIsSet(false);
    this.pid = 0;
    this.tabParams = null;
    setLastSellTimeIsSet(false);
    this.lastSellTime = 0;
    this.detailItems = null;
  }

  public com.bangcar.app.mapi.base.MApiRespHead getHead() {
    return this.head;
  }

  public ProductDetailResp setHead(com.bangcar.app.mapi.base.MApiRespHead head) {
    this.head = head;
    return this;
  }

  public void unsetHead() {
    this.head = null;
  }

  /** Returns true if field head is set (has been assigned a value) and false otherwise */
  public boolean isSetHead() {
    return this.head != null;
  }

  public void setHeadIsSet(boolean value) {
    if (!value) {
      this.head = null;
    }
  }

  /**
   * 产品名称
   */
  public String getProductName() {
    return this.productName;
  }

  /**
   * 产品名称
   */
  public ProductDetailResp setProductName(String productName) {
    this.productName = productName;
    return this;
  }

  public void unsetProductName() {
    this.productName = null;
  }

  /** Returns true if field productName is set (has been assigned a value) and false otherwise */
  public boolean isSetProductName() {
    return this.productName != null;
  }

  public void setProductNameIsSet(boolean value) {
    if (!value) {
      this.productName = null;
    }
  }

  /**
   * 起头金额
   */
  public int getMinBuyShare() {
    return this.minBuyShare;
  }

  /**
   * 起头金额
   */
  public ProductDetailResp setMinBuyShare(int minBuyShare) {
    this.minBuyShare = minBuyShare;
    setMinBuyShareIsSet(true);
    return this;
  }

  public void unsetMinBuyShare() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINBUYSHARE_ISSET_ID);
  }

  /** Returns true if field minBuyShare is set (has been assigned a value) and false otherwise */
  public boolean isSetMinBuyShare() {
    return EncodingUtils.testBit(__isset_bitfield, __MINBUYSHARE_ISSET_ID);
  }

  public void setMinBuyShareIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINBUYSHARE_ISSET_ID, value);
  }

  /**
   * 产品状态
   * 
   * @see EProductSellState
   */
  public EProductSellState getSellState() {
    return this.sellState;
  }

  /**
   * 产品状态
   * 
   * @see EProductSellState
   */
  public ProductDetailResp setSellState(EProductSellState sellState) {
    this.sellState = sellState;
    return this;
  }

  public void unsetSellState() {
    this.sellState = null;
  }

  /** Returns true if field sellState is set (has been assigned a value) and false otherwise */
  public boolean isSetSellState() {
    return this.sellState != null;
  }

  public void setSellStateIsSet(boolean value) {
    if (!value) {
      this.sellState = null;
    }
  }

  /**
   * 产品期限
   */
  public String getPeriod() {
    return this.period;
  }

  /**
   * 产品期限
   */
  public ProductDetailResp setPeriod(String period) {
    this.period = period;
    return this;
  }

  public void unsetPeriod() {
    this.period = null;
  }

  /** Returns true if field period is set (has been assigned a value) and false otherwise */
  public boolean isSetPeriod() {
    return this.period != null;
  }

  public void setPeriodIsSet(boolean value) {
    if (!value) {
      this.period = null;
    }
  }

  /**
   * 产品收益率E6
   */
  public long getIncomeRateE6() {
    return this.incomeRateE6;
  }

  /**
   * 产品收益率E6
   */
  public ProductDetailResp setIncomeRateE6(long incomeRateE6) {
    this.incomeRateE6 = incomeRateE6;
    setIncomeRateE6IsSet(true);
    return this;
  }

  public void unsetIncomeRateE6() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INCOMERATEE6_ISSET_ID);
  }

  /** Returns true if field incomeRateE6 is set (has been assigned a value) and false otherwise */
  public boolean isSetIncomeRateE6() {
    return EncodingUtils.testBit(__isset_bitfield, __INCOMERATEE6_ISSET_ID);
  }

  public void setIncomeRateE6IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INCOMERATEE6_ISSET_ID, value);
  }

  /**
   * 产品收益率%
   */
  public String getIncomeRate() {
    return this.incomeRate;
  }

  /**
   * 产品收益率%
   */
  public ProductDetailResp setIncomeRate(String incomeRate) {
    this.incomeRate = incomeRate;
    return this;
  }

  public void unsetIncomeRate() {
    this.incomeRate = null;
  }

  /** Returns true if field incomeRate is set (has been assigned a value) and false otherwise */
  public boolean isSetIncomeRate() {
    return this.incomeRate != null;
  }

  public void setIncomeRateIsSet(boolean value) {
    if (!value) {
      this.incomeRate = null;
    }
  }

  /**
   * 产品收益率下限E6
   */
  public long getMinIncomeRateE6() {
    return this.minIncomeRateE6;
  }

  /**
   * 产品收益率下限E6
   */
  public ProductDetailResp setMinIncomeRateE6(long minIncomeRateE6) {
    this.minIncomeRateE6 = minIncomeRateE6;
    setMinIncomeRateE6IsSet(true);
    return this;
  }

  public void unsetMinIncomeRateE6() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MININCOMERATEE6_ISSET_ID);
  }

  /** Returns true if field minIncomeRateE6 is set (has been assigned a value) and false otherwise */
  public boolean isSetMinIncomeRateE6() {
    return EncodingUtils.testBit(__isset_bitfield, __MININCOMERATEE6_ISSET_ID);
  }

  public void setMinIncomeRateE6IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MININCOMERATEE6_ISSET_ID, value);
  }

  /**
   * 已售卖百分比
   */
  public int getSoldPercent() {
    return this.soldPercent;
  }

  /**
   * 已售卖百分比
   */
  public ProductDetailResp setSoldPercent(int soldPercent) {
    this.soldPercent = soldPercent;
    setSoldPercentIsSet(true);
    return this;
  }

  public void unsetSoldPercent() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SOLDPERCENT_ISSET_ID);
  }

  /** Returns true if field soldPercent is set (has been assigned a value) and false otherwise */
  public boolean isSetSoldPercent() {
    return EncodingUtils.testBit(__isset_bitfield, __SOLDPERCENT_ISSET_ID);
  }

  public void setSoldPercentIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SOLDPERCENT_ISSET_ID, value);
  }

  /**
   * 总份额
   */
  public int getTotalShare() {
    return this.totalShare;
  }

  /**
   * 总份额
   */
  public ProductDetailResp setTotalShare(int totalShare) {
    this.totalShare = totalShare;
    setTotalShareIsSet(true);
    return this;
  }

  public void unsetTotalShare() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALSHARE_ISSET_ID);
  }

  /** Returns true if field totalShare is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalShare() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALSHARE_ISSET_ID);
  }

  public void setTotalShareIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALSHARE_ISSET_ID, value);
  }

  /**
   * 虚拟剩余份额
   */
  public int getVirtualRemainShare() {
    return this.virtualRemainShare;
  }

  /**
   * 虚拟剩余份额
   */
  public ProductDetailResp setVirtualRemainShare(int virtualRemainShare) {
    this.virtualRemainShare = virtualRemainShare;
    setVirtualRemainShareIsSet(true);
    return this;
  }

  public void unsetVirtualRemainShare() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIRTUALREMAINSHARE_ISSET_ID);
  }

  /** Returns true if field virtualRemainShare is set (has been assigned a value) and false otherwise */
  public boolean isSetVirtualRemainShare() {
    return EncodingUtils.testBit(__isset_bitfield, __VIRTUALREMAINSHARE_ISSET_ID);
  }

  public void setVirtualRemainShareIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIRTUALREMAINSHARE_ISSET_ID, value);
  }

  /**
   * 实际剩余份额
   */
  public int getRemainShare() {
    return this.remainShare;
  }

  /**
   * 实际剩余份额
   */
  public ProductDetailResp setRemainShare(int remainShare) {
    this.remainShare = remainShare;
    setRemainShareIsSet(true);
    return this;
  }

  public void unsetRemainShare() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REMAINSHARE_ISSET_ID);
  }

  /** Returns true if field remainShare is set (has been assigned a value) and false otherwise */
  public boolean isSetRemainShare() {
    return EncodingUtils.testBit(__isset_bitfield, __REMAINSHARE_ISSET_ID);
  }

  public void setRemainShareIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REMAINSHARE_ISSET_ID, value);
  }

  /**
   * 最大单笔金额
   */
  public int getMaxBuyShare() {
    return this.maxBuyShare;
  }

  /**
   * 最大单笔金额
   */
  public ProductDetailResp setMaxBuyShare(int maxBuyShare) {
    this.maxBuyShare = maxBuyShare;
    setMaxBuyShareIsSet(true);
    return this;
  }

  public void unsetMaxBuyShare() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXBUYSHARE_ISSET_ID);
  }

  /** Returns true if field maxBuyShare is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxBuyShare() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXBUYSHARE_ISSET_ID);
  }

  public void setMaxBuyShareIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXBUYSHARE_ISSET_ID, value);
  }

  /**
   * 最小单笔增量金额
   */
  public int getIncrShare() {
    return this.incrShare;
  }

  /**
   * 最小单笔增量金额
   */
  public ProductDetailResp setIncrShare(int incrShare) {
    this.incrShare = incrShare;
    setIncrShareIsSet(true);
    return this;
  }

  public void unsetIncrShare() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INCRSHARE_ISSET_ID);
  }

  /** Returns true if field incrShare is set (has been assigned a value) and false otherwise */
  public boolean isSetIncrShare() {
    return EncodingUtils.testBit(__isset_bitfield, __INCRSHARE_ISSET_ID);
  }

  public void setIncrShareIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INCRSHARE_ISSET_ID, value);
  }

  /**
   * 开始购买时间
   */
  public int getSellBeginTime() {
    return this.sellBeginTime;
  }

  /**
   * 开始购买时间
   */
  public ProductDetailResp setSellBeginTime(int sellBeginTime) {
    this.sellBeginTime = sellBeginTime;
    setSellBeginTimeIsSet(true);
    return this;
  }

  public void unsetSellBeginTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SELLBEGINTIME_ISSET_ID);
  }

  /** Returns true if field sellBeginTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSellBeginTime() {
    return EncodingUtils.testBit(__isset_bitfield, __SELLBEGINTIME_ISSET_ID);
  }

  public void setSellBeginTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SELLBEGINTIME_ISSET_ID, value);
  }

  /**
   * 结束购买时间
   */
  public int getSellEndTime() {
    return this.sellEndTime;
  }

  /**
   * 结束购买时间
   */
  public ProductDetailResp setSellEndTime(int sellEndTime) {
    this.sellEndTime = sellEndTime;
    setSellEndTimeIsSet(true);
    return this;
  }

  public void unsetSellEndTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SELLENDTIME_ISSET_ID);
  }

  /** Returns true if field sellEndTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSellEndTime() {
    return EncodingUtils.testBit(__isset_bitfield, __SELLENDTIME_ISSET_ID);
  }

  public void setSellEndTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SELLENDTIME_ISSET_ID, value);
  }

  /**
   * 产品到期结束时间
   */
  public int getIncomeEndTime() {
    return this.incomeEndTime;
  }

  /**
   * 产品到期结束时间
   */
  public ProductDetailResp setIncomeEndTime(int incomeEndTime) {
    this.incomeEndTime = incomeEndTime;
    setIncomeEndTimeIsSet(true);
    return this;
  }

  public void unsetIncomeEndTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INCOMEENDTIME_ISSET_ID);
  }

  /** Returns true if field incomeEndTime is set (has been assigned a value) and false otherwise */
  public boolean isSetIncomeEndTime() {
    return EncodingUtils.testBit(__isset_bitfield, __INCOMEENDTIME_ISSET_ID);
  }

  public void setIncomeEndTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INCOMEENDTIME_ISSET_ID, value);
  }

  /**
   * 收益分配方式
   */
  public int getIncomeAssignType() {
    return this.incomeAssignType;
  }

  /**
   * 收益分配方式
   */
  public ProductDetailResp setIncomeAssignType(int incomeAssignType) {
    this.incomeAssignType = incomeAssignType;
    setIncomeAssignTypeIsSet(true);
    return this;
  }

  public void unsetIncomeAssignType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INCOMEASSIGNTYPE_ISSET_ID);
  }

  /** Returns true if field incomeAssignType is set (has been assigned a value) and false otherwise */
  public boolean isSetIncomeAssignType() {
    return EncodingUtils.testBit(__isset_bitfield, __INCOMEASSIGNTYPE_ISSET_ID);
  }

  public void setIncomeAssignTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INCOMEASSIGNTYPE_ISSET_ID, value);
  }

  /**
   * 是否可提前结束
   */
  public boolean isCanAheadEnd() {
    return this.canAheadEnd;
  }

  /**
   * 是否可提前结束
   */
  public ProductDetailResp setCanAheadEnd(boolean canAheadEnd) {
    this.canAheadEnd = canAheadEnd;
    setCanAheadEndIsSet(true);
    return this;
  }

  public void unsetCanAheadEnd() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CANAHEADEND_ISSET_ID);
  }

  /** Returns true if field canAheadEnd is set (has been assigned a value) and false otherwise */
  public boolean isSetCanAheadEnd() {
    return EncodingUtils.testBit(__isset_bitfield, __CANAHEADEND_ISSET_ID);
  }

  public void setCanAheadEndIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CANAHEADEND_ISSET_ID, value);
  }

  /**
   * 是否将会提前结束（显示最长）
   */
  public boolean isWillAheadEnd() {
    return this.willAheadEnd;
  }

  /**
   * 是否将会提前结束（显示最长）
   */
  public ProductDetailResp setWillAheadEnd(boolean willAheadEnd) {
    this.willAheadEnd = willAheadEnd;
    setWillAheadEndIsSet(true);
    return this;
  }

  public void unsetWillAheadEnd() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WILLAHEADEND_ISSET_ID);
  }

  /** Returns true if field willAheadEnd is set (has been assigned a value) and false otherwise */
  public boolean isSetWillAheadEnd() {
    return EncodingUtils.testBit(__isset_bitfield, __WILLAHEADEND_ISSET_ID);
  }

  public void setWillAheadEndIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WILLAHEADEND_ISSET_ID, value);
  }

  /**
   * 成团类型，如100万成团
   */
  public String getGroup() {
    return this.group;
  }

  /**
   * 成团类型，如100万成团
   */
  public ProductDetailResp setGroup(String group) {
    this.group = group;
    return this;
  }

  public void unsetGroup() {
    this.group = null;
  }

  /** Returns true if field group is set (has been assigned a value) and false otherwise */
  public boolean isSetGroup() {
    return this.group != null;
  }

  public void setGroupIsSet(boolean value) {
    if (!value) {
      this.group = null;
    }
  }

  /**
   * 成团百分比%
   */
  public int getGroupPercent() {
    return this.groupPercent;
  }

  /**
   * 成团百分比%
   */
  public ProductDetailResp setGroupPercent(int groupPercent) {
    this.groupPercent = groupPercent;
    setGroupPercentIsSet(true);
    return this;
  }

  public void unsetGroupPercent() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GROUPPERCENT_ISSET_ID);
  }

  /** Returns true if field groupPercent is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupPercent() {
    return EncodingUtils.testBit(__isset_bitfield, __GROUPPERCENT_ISSET_ID);
  }

  public void setGroupPercentIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GROUPPERCENT_ISSET_ID, value);
  }

  /**
   * 售罄用时
   */
  public int getSoldOutTimeUsed() {
    return this.soldOutTimeUsed;
  }

  /**
   * 售罄用时
   */
  public ProductDetailResp setSoldOutTimeUsed(int soldOutTimeUsed) {
    this.soldOutTimeUsed = soldOutTimeUsed;
    setSoldOutTimeUsedIsSet(true);
    return this;
  }

  public void unsetSoldOutTimeUsed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SOLDOUTTIMEUSED_ISSET_ID);
  }

  /** Returns true if field soldOutTimeUsed is set (has been assigned a value) and false otherwise */
  public boolean isSetSoldOutTimeUsed() {
    return EncodingUtils.testBit(__isset_bitfield, __SOLDOUTTIMEUSED_ISSET_ID);
  }

  public void setSoldOutTimeUsedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SOLDOUTTIMEUSED_ISSET_ID, value);
  }

  /**
   * 产品PID
   */
  public int getPid() {
    return this.pid;
  }

  /**
   * 产品PID
   */
  public ProductDetailResp setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getTabParamsSize() {
    return (this.tabParams == null) ? 0 : this.tabParams.size();
  }

  public java.util.Iterator<com.bangcar.app.mapi.common.KV> getTabParamsIterator() {
    return (this.tabParams == null) ? null : this.tabParams.iterator();
  }

  public void addToTabParams(com.bangcar.app.mapi.common.KV elem) {
    if (this.tabParams == null) {
      this.tabParams = new ArrayList<com.bangcar.app.mapi.common.KV>();
    }
    this.tabParams.add(elem);
  }

  /**
   * webView tab
   */
  public List<com.bangcar.app.mapi.common.KV> getTabParams() {
    return this.tabParams;
  }

  /**
   * webView tab
   */
  public ProductDetailResp setTabParams(List<com.bangcar.app.mapi.common.KV> tabParams) {
    this.tabParams = tabParams;
    return this;
  }

  public void unsetTabParams() {
    this.tabParams = null;
  }

  /** Returns true if field tabParams is set (has been assigned a value) and false otherwise */
  public boolean isSetTabParams() {
    return this.tabParams != null;
  }

  public void setTabParamsIsSet(boolean value) {
    if (!value) {
      this.tabParams = null;
    }
  }

  /**
   * 结束售卖时间
   */
  public int getLastSellTime() {
    return this.lastSellTime;
  }

  /**
   * 结束售卖时间
   */
  public ProductDetailResp setLastSellTime(int lastSellTime) {
    this.lastSellTime = lastSellTime;
    setLastSellTimeIsSet(true);
    return this;
  }

  public void unsetLastSellTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTSELLTIME_ISSET_ID);
  }

  /** Returns true if field lastSellTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLastSellTime() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTSELLTIME_ISSET_ID);
  }

  public void setLastSellTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTSELLTIME_ISSET_ID, value);
  }

  public int getDetailItemsSize() {
    return (this.detailItems == null) ? 0 : this.detailItems.size();
  }

  public java.util.Iterator<com.bangcar.app.mapi.common.KV> getDetailItemsIterator() {
    return (this.detailItems == null) ? null : this.detailItems.iterator();
  }

  public void addToDetailItems(com.bangcar.app.mapi.common.KV elem) {
    if (this.detailItems == null) {
      this.detailItems = new ArrayList<com.bangcar.app.mapi.common.KV>();
    }
    this.detailItems.add(elem);
  }

  /**
   * 产品详情说明item
   */
  public List<com.bangcar.app.mapi.common.KV> getDetailItems() {
    return this.detailItems;
  }

  /**
   * 产品详情说明item
   */
  public ProductDetailResp setDetailItems(List<com.bangcar.app.mapi.common.KV> detailItems) {
    this.detailItems = detailItems;
    return this;
  }

  public void unsetDetailItems() {
    this.detailItems = null;
  }

  /** Returns true if field detailItems is set (has been assigned a value) and false otherwise */
  public boolean isSetDetailItems() {
    return this.detailItems != null;
  }

  public void setDetailItemsIsSet(boolean value) {
    if (!value) {
      this.detailItems = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case HEAD:
      if (value == null) {
        unsetHead();
      } else {
        setHead((com.bangcar.app.mapi.base.MApiRespHead)value);
      }
      break;

    case PRODUCT_NAME:
      if (value == null) {
        unsetProductName();
      } else {
        setProductName((String)value);
      }
      break;

    case MIN_BUY_SHARE:
      if (value == null) {
        unsetMinBuyShare();
      } else {
        setMinBuyShare((Integer)value);
      }
      break;

    case SELL_STATE:
      if (value == null) {
        unsetSellState();
      } else {
        setSellState((EProductSellState)value);
      }
      break;

    case PERIOD:
      if (value == null) {
        unsetPeriod();
      } else {
        setPeriod((String)value);
      }
      break;

    case INCOME_RATE_E6:
      if (value == null) {
        unsetIncomeRateE6();
      } else {
        setIncomeRateE6((Long)value);
      }
      break;

    case INCOME_RATE:
      if (value == null) {
        unsetIncomeRate();
      } else {
        setIncomeRate((String)value);
      }
      break;

    case MIN_INCOME_RATE_E6:
      if (value == null) {
        unsetMinIncomeRateE6();
      } else {
        setMinIncomeRateE6((Long)value);
      }
      break;

    case SOLD_PERCENT:
      if (value == null) {
        unsetSoldPercent();
      } else {
        setSoldPercent((Integer)value);
      }
      break;

    case TOTAL_SHARE:
      if (value == null) {
        unsetTotalShare();
      } else {
        setTotalShare((Integer)value);
      }
      break;

    case VIRTUAL_REMAIN_SHARE:
      if (value == null) {
        unsetVirtualRemainShare();
      } else {
        setVirtualRemainShare((Integer)value);
      }
      break;

    case REMAIN_SHARE:
      if (value == null) {
        unsetRemainShare();
      } else {
        setRemainShare((Integer)value);
      }
      break;

    case MAX_BUY_SHARE:
      if (value == null) {
        unsetMaxBuyShare();
      } else {
        setMaxBuyShare((Integer)value);
      }
      break;

    case INCR_SHARE:
      if (value == null) {
        unsetIncrShare();
      } else {
        setIncrShare((Integer)value);
      }
      break;

    case SELL_BEGIN_TIME:
      if (value == null) {
        unsetSellBeginTime();
      } else {
        setSellBeginTime((Integer)value);
      }
      break;

    case SELL_END_TIME:
      if (value == null) {
        unsetSellEndTime();
      } else {
        setSellEndTime((Integer)value);
      }
      break;

    case INCOME_END_TIME:
      if (value == null) {
        unsetIncomeEndTime();
      } else {
        setIncomeEndTime((Integer)value);
      }
      break;

    case INCOME_ASSIGN_TYPE:
      if (value == null) {
        unsetIncomeAssignType();
      } else {
        setIncomeAssignType((Integer)value);
      }
      break;

    case CAN_AHEAD_END:
      if (value == null) {
        unsetCanAheadEnd();
      } else {
        setCanAheadEnd((Boolean)value);
      }
      break;

    case WILL_AHEAD_END:
      if (value == null) {
        unsetWillAheadEnd();
      } else {
        setWillAheadEnd((Boolean)value);
      }
      break;

    case GROUP:
      if (value == null) {
        unsetGroup();
      } else {
        setGroup((String)value);
      }
      break;

    case GROUP_PERCENT:
      if (value == null) {
        unsetGroupPercent();
      } else {
        setGroupPercent((Integer)value);
      }
      break;

    case SOLD_OUT_TIME_USED:
      if (value == null) {
        unsetSoldOutTimeUsed();
      } else {
        setSoldOutTimeUsed((Integer)value);
      }
      break;

    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case TAB_PARAMS:
      if (value == null) {
        unsetTabParams();
      } else {
        setTabParams((List<com.bangcar.app.mapi.common.KV>)value);
      }
      break;

    case LAST_SELL_TIME:
      if (value == null) {
        unsetLastSellTime();
      } else {
        setLastSellTime((Integer)value);
      }
      break;

    case DETAIL_ITEMS:
      if (value == null) {
        unsetDetailItems();
      } else {
        setDetailItems((List<com.bangcar.app.mapi.common.KV>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case HEAD:
      return getHead();

    case PRODUCT_NAME:
      return getProductName();

    case MIN_BUY_SHARE:
      return Integer.valueOf(getMinBuyShare());

    case SELL_STATE:
      return getSellState();

    case PERIOD:
      return getPeriod();

    case INCOME_RATE_E6:
      return Long.valueOf(getIncomeRateE6());

    case INCOME_RATE:
      return getIncomeRate();

    case MIN_INCOME_RATE_E6:
      return Long.valueOf(getMinIncomeRateE6());

    case SOLD_PERCENT:
      return Integer.valueOf(getSoldPercent());

    case TOTAL_SHARE:
      return Integer.valueOf(getTotalShare());

    case VIRTUAL_REMAIN_SHARE:
      return Integer.valueOf(getVirtualRemainShare());

    case REMAIN_SHARE:
      return Integer.valueOf(getRemainShare());

    case MAX_BUY_SHARE:
      return Integer.valueOf(getMaxBuyShare());

    case INCR_SHARE:
      return Integer.valueOf(getIncrShare());

    case SELL_BEGIN_TIME:
      return Integer.valueOf(getSellBeginTime());

    case SELL_END_TIME:
      return Integer.valueOf(getSellEndTime());

    case INCOME_END_TIME:
      return Integer.valueOf(getIncomeEndTime());

    case INCOME_ASSIGN_TYPE:
      return Integer.valueOf(getIncomeAssignType());

    case CAN_AHEAD_END:
      return Boolean.valueOf(isCanAheadEnd());

    case WILL_AHEAD_END:
      return Boolean.valueOf(isWillAheadEnd());

    case GROUP:
      return getGroup();

    case GROUP_PERCENT:
      return Integer.valueOf(getGroupPercent());

    case SOLD_OUT_TIME_USED:
      return Integer.valueOf(getSoldOutTimeUsed());

    case PID:
      return Integer.valueOf(getPid());

    case TAB_PARAMS:
      return getTabParams();

    case LAST_SELL_TIME:
      return Integer.valueOf(getLastSellTime());

    case DETAIL_ITEMS:
      return getDetailItems();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case HEAD:
      return isSetHead();
    case PRODUCT_NAME:
      return isSetProductName();
    case MIN_BUY_SHARE:
      return isSetMinBuyShare();
    case SELL_STATE:
      return isSetSellState();
    case PERIOD:
      return isSetPeriod();
    case INCOME_RATE_E6:
      return isSetIncomeRateE6();
    case INCOME_RATE:
      return isSetIncomeRate();
    case MIN_INCOME_RATE_E6:
      return isSetMinIncomeRateE6();
    case SOLD_PERCENT:
      return isSetSoldPercent();
    case TOTAL_SHARE:
      return isSetTotalShare();
    case VIRTUAL_REMAIN_SHARE:
      return isSetVirtualRemainShare();
    case REMAIN_SHARE:
      return isSetRemainShare();
    case MAX_BUY_SHARE:
      return isSetMaxBuyShare();
    case INCR_SHARE:
      return isSetIncrShare();
    case SELL_BEGIN_TIME:
      return isSetSellBeginTime();
    case SELL_END_TIME:
      return isSetSellEndTime();
    case INCOME_END_TIME:
      return isSetIncomeEndTime();
    case INCOME_ASSIGN_TYPE:
      return isSetIncomeAssignType();
    case CAN_AHEAD_END:
      return isSetCanAheadEnd();
    case WILL_AHEAD_END:
      return isSetWillAheadEnd();
    case GROUP:
      return isSetGroup();
    case GROUP_PERCENT:
      return isSetGroupPercent();
    case SOLD_OUT_TIME_USED:
      return isSetSoldOutTimeUsed();
    case PID:
      return isSetPid();
    case TAB_PARAMS:
      return isSetTabParams();
    case LAST_SELL_TIME:
      return isSetLastSellTime();
    case DETAIL_ITEMS:
      return isSetDetailItems();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProductDetailResp)
      return this.equals((ProductDetailResp)that);
    return false;
  }

  public boolean equals(ProductDetailResp that) {
    if (that == null)
      return false;

    boolean this_present_head = true && this.isSetHead();
    boolean that_present_head = true && that.isSetHead();
    if (this_present_head || that_present_head) {
      if (!(this_present_head && that_present_head))
        return false;
      if (!this.head.equals(that.head))
        return false;
    }

    boolean this_present_productName = true && this.isSetProductName();
    boolean that_present_productName = true && that.isSetProductName();
    if (this_present_productName || that_present_productName) {
      if (!(this_present_productName && that_present_productName))
        return false;
      if (!this.productName.equals(that.productName))
        return false;
    }

    boolean this_present_minBuyShare = true;
    boolean that_present_minBuyShare = true;
    if (this_present_minBuyShare || that_present_minBuyShare) {
      if (!(this_present_minBuyShare && that_present_minBuyShare))
        return false;
      if (this.minBuyShare != that.minBuyShare)
        return false;
    }

    boolean this_present_sellState = true && this.isSetSellState();
    boolean that_present_sellState = true && that.isSetSellState();
    if (this_present_sellState || that_present_sellState) {
      if (!(this_present_sellState && that_present_sellState))
        return false;
      if (!this.sellState.equals(that.sellState))
        return false;
    }

    boolean this_present_period = true && this.isSetPeriod();
    boolean that_present_period = true && that.isSetPeriod();
    if (this_present_period || that_present_period) {
      if (!(this_present_period && that_present_period))
        return false;
      if (!this.period.equals(that.period))
        return false;
    }

    boolean this_present_incomeRateE6 = true;
    boolean that_present_incomeRateE6 = true;
    if (this_present_incomeRateE6 || that_present_incomeRateE6) {
      if (!(this_present_incomeRateE6 && that_present_incomeRateE6))
        return false;
      if (this.incomeRateE6 != that.incomeRateE6)
        return false;
    }

    boolean this_present_incomeRate = true && this.isSetIncomeRate();
    boolean that_present_incomeRate = true && that.isSetIncomeRate();
    if (this_present_incomeRate || that_present_incomeRate) {
      if (!(this_present_incomeRate && that_present_incomeRate))
        return false;
      if (!this.incomeRate.equals(that.incomeRate))
        return false;
    }

    boolean this_present_minIncomeRateE6 = true;
    boolean that_present_minIncomeRateE6 = true;
    if (this_present_minIncomeRateE6 || that_present_minIncomeRateE6) {
      if (!(this_present_minIncomeRateE6 && that_present_minIncomeRateE6))
        return false;
      if (this.minIncomeRateE6 != that.minIncomeRateE6)
        return false;
    }

    boolean this_present_soldPercent = true;
    boolean that_present_soldPercent = true;
    if (this_present_soldPercent || that_present_soldPercent) {
      if (!(this_present_soldPercent && that_present_soldPercent))
        return false;
      if (this.soldPercent != that.soldPercent)
        return false;
    }

    boolean this_present_totalShare = true;
    boolean that_present_totalShare = true;
    if (this_present_totalShare || that_present_totalShare) {
      if (!(this_present_totalShare && that_present_totalShare))
        return false;
      if (this.totalShare != that.totalShare)
        return false;
    }

    boolean this_present_virtualRemainShare = true;
    boolean that_present_virtualRemainShare = true;
    if (this_present_virtualRemainShare || that_present_virtualRemainShare) {
      if (!(this_present_virtualRemainShare && that_present_virtualRemainShare))
        return false;
      if (this.virtualRemainShare != that.virtualRemainShare)
        return false;
    }

    boolean this_present_remainShare = true;
    boolean that_present_remainShare = true;
    if (this_present_remainShare || that_present_remainShare) {
      if (!(this_present_remainShare && that_present_remainShare))
        return false;
      if (this.remainShare != that.remainShare)
        return false;
    }

    boolean this_present_maxBuyShare = true;
    boolean that_present_maxBuyShare = true;
    if (this_present_maxBuyShare || that_present_maxBuyShare) {
      if (!(this_present_maxBuyShare && that_present_maxBuyShare))
        return false;
      if (this.maxBuyShare != that.maxBuyShare)
        return false;
    }

    boolean this_present_incrShare = true;
    boolean that_present_incrShare = true;
    if (this_present_incrShare || that_present_incrShare) {
      if (!(this_present_incrShare && that_present_incrShare))
        return false;
      if (this.incrShare != that.incrShare)
        return false;
    }

    boolean this_present_sellBeginTime = true;
    boolean that_present_sellBeginTime = true;
    if (this_present_sellBeginTime || that_present_sellBeginTime) {
      if (!(this_present_sellBeginTime && that_present_sellBeginTime))
        return false;
      if (this.sellBeginTime != that.sellBeginTime)
        return false;
    }

    boolean this_present_sellEndTime = true;
    boolean that_present_sellEndTime = true;
    if (this_present_sellEndTime || that_present_sellEndTime) {
      if (!(this_present_sellEndTime && that_present_sellEndTime))
        return false;
      if (this.sellEndTime != that.sellEndTime)
        return false;
    }

    boolean this_present_incomeEndTime = true;
    boolean that_present_incomeEndTime = true;
    if (this_present_incomeEndTime || that_present_incomeEndTime) {
      if (!(this_present_incomeEndTime && that_present_incomeEndTime))
        return false;
      if (this.incomeEndTime != that.incomeEndTime)
        return false;
    }

    boolean this_present_incomeAssignType = true;
    boolean that_present_incomeAssignType = true;
    if (this_present_incomeAssignType || that_present_incomeAssignType) {
      if (!(this_present_incomeAssignType && that_present_incomeAssignType))
        return false;
      if (this.incomeAssignType != that.incomeAssignType)
        return false;
    }

    boolean this_present_canAheadEnd = true;
    boolean that_present_canAheadEnd = true;
    if (this_present_canAheadEnd || that_present_canAheadEnd) {
      if (!(this_present_canAheadEnd && that_present_canAheadEnd))
        return false;
      if (this.canAheadEnd != that.canAheadEnd)
        return false;
    }

    boolean this_present_willAheadEnd = true;
    boolean that_present_willAheadEnd = true;
    if (this_present_willAheadEnd || that_present_willAheadEnd) {
      if (!(this_present_willAheadEnd && that_present_willAheadEnd))
        return false;
      if (this.willAheadEnd != that.willAheadEnd)
        return false;
    }

    boolean this_present_group = true && this.isSetGroup();
    boolean that_present_group = true && that.isSetGroup();
    if (this_present_group || that_present_group) {
      if (!(this_present_group && that_present_group))
        return false;
      if (!this.group.equals(that.group))
        return false;
    }

    boolean this_present_groupPercent = true && this.isSetGroupPercent();
    boolean that_present_groupPercent = true && that.isSetGroupPercent();
    if (this_present_groupPercent || that_present_groupPercent) {
      if (!(this_present_groupPercent && that_present_groupPercent))
        return false;
      if (this.groupPercent != that.groupPercent)
        return false;
    }

    boolean this_present_soldOutTimeUsed = true && this.isSetSoldOutTimeUsed();
    boolean that_present_soldOutTimeUsed = true && that.isSetSoldOutTimeUsed();
    if (this_present_soldOutTimeUsed || that_present_soldOutTimeUsed) {
      if (!(this_present_soldOutTimeUsed && that_present_soldOutTimeUsed))
        return false;
      if (this.soldOutTimeUsed != that.soldOutTimeUsed)
        return false;
    }

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_tabParams = true && this.isSetTabParams();
    boolean that_present_tabParams = true && that.isSetTabParams();
    if (this_present_tabParams || that_present_tabParams) {
      if (!(this_present_tabParams && that_present_tabParams))
        return false;
      if (!this.tabParams.equals(that.tabParams))
        return false;
    }

    boolean this_present_lastSellTime = true;
    boolean that_present_lastSellTime = true;
    if (this_present_lastSellTime || that_present_lastSellTime) {
      if (!(this_present_lastSellTime && that_present_lastSellTime))
        return false;
      if (this.lastSellTime != that.lastSellTime)
        return false;
    }

    boolean this_present_detailItems = true && this.isSetDetailItems();
    boolean that_present_detailItems = true && that.isSetDetailItems();
    if (this_present_detailItems || that_present_detailItems) {
      if (!(this_present_detailItems && that_present_detailItems))
        return false;
      if (!this.detailItems.equals(that.detailItems))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ProductDetailResp other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetHead()).compareTo(other.isSetHead());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHead()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.head, other.head);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductName()).compareTo(other.isSetProductName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productName, other.productName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinBuyShare()).compareTo(other.isSetMinBuyShare());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinBuyShare()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minBuyShare, other.minBuyShare);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSellState()).compareTo(other.isSetSellState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSellState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sellState, other.sellState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPeriod()).compareTo(other.isSetPeriod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPeriod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.period, other.period);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncomeRateE6()).compareTo(other.isSetIncomeRateE6());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncomeRateE6()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.incomeRateE6, other.incomeRateE6);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncomeRate()).compareTo(other.isSetIncomeRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncomeRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.incomeRate, other.incomeRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinIncomeRateE6()).compareTo(other.isSetMinIncomeRateE6());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinIncomeRateE6()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minIncomeRateE6, other.minIncomeRateE6);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSoldPercent()).compareTo(other.isSetSoldPercent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSoldPercent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.soldPercent, other.soldPercent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalShare()).compareTo(other.isSetTotalShare());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalShare()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalShare, other.totalShare);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVirtualRemainShare()).compareTo(other.isSetVirtualRemainShare());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVirtualRemainShare()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.virtualRemainShare, other.virtualRemainShare);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemainShare()).compareTo(other.isSetRemainShare());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemainShare()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remainShare, other.remainShare);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxBuyShare()).compareTo(other.isSetMaxBuyShare());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxBuyShare()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxBuyShare, other.maxBuyShare);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncrShare()).compareTo(other.isSetIncrShare());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncrShare()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.incrShare, other.incrShare);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSellBeginTime()).compareTo(other.isSetSellBeginTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSellBeginTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sellBeginTime, other.sellBeginTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSellEndTime()).compareTo(other.isSetSellEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSellEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sellEndTime, other.sellEndTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncomeEndTime()).compareTo(other.isSetIncomeEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncomeEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.incomeEndTime, other.incomeEndTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncomeAssignType()).compareTo(other.isSetIncomeAssignType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncomeAssignType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.incomeAssignType, other.incomeAssignType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCanAheadEnd()).compareTo(other.isSetCanAheadEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCanAheadEnd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.canAheadEnd, other.canAheadEnd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWillAheadEnd()).compareTo(other.isSetWillAheadEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWillAheadEnd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.willAheadEnd, other.willAheadEnd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroup()).compareTo(other.isSetGroup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroup()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group, other.group);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupPercent()).compareTo(other.isSetGroupPercent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupPercent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupPercent, other.groupPercent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSoldOutTimeUsed()).compareTo(other.isSetSoldOutTimeUsed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSoldOutTimeUsed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.soldOutTimeUsed, other.soldOutTimeUsed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTabParams()).compareTo(other.isSetTabParams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTabParams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tabParams, other.tabParams);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastSellTime()).compareTo(other.isSetLastSellTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastSellTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastSellTime, other.lastSellTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDetailItems()).compareTo(other.isSetDetailItems());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDetailItems()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.detailItems, other.detailItems);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProductDetailResp(");
    boolean first = true;

    sb.append("head:");
    if (this.head == null) {
      sb.append("null");
    } else {
      sb.append(this.head);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productName:");
    if (this.productName == null) {
      sb.append("null");
    } else {
      sb.append(this.productName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("minBuyShare:");
    sb.append(this.minBuyShare);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sellState:");
    if (this.sellState == null) {
      sb.append("null");
    } else {
      sb.append(this.sellState);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("period:");
    if (this.period == null) {
      sb.append("null");
    } else {
      sb.append(this.period);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("incomeRateE6:");
    sb.append(this.incomeRateE6);
    first = false;
    if (!first) sb.append(", ");
    sb.append("incomeRate:");
    if (this.incomeRate == null) {
      sb.append("null");
    } else {
      sb.append(this.incomeRate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("minIncomeRateE6:");
    sb.append(this.minIncomeRateE6);
    first = false;
    if (!first) sb.append(", ");
    sb.append("soldPercent:");
    sb.append(this.soldPercent);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalShare:");
    sb.append(this.totalShare);
    first = false;
    if (!first) sb.append(", ");
    sb.append("virtualRemainShare:");
    sb.append(this.virtualRemainShare);
    first = false;
    if (!first) sb.append(", ");
    sb.append("remainShare:");
    sb.append(this.remainShare);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxBuyShare:");
    sb.append(this.maxBuyShare);
    first = false;
    if (!first) sb.append(", ");
    sb.append("incrShare:");
    sb.append(this.incrShare);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sellBeginTime:");
    sb.append(this.sellBeginTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sellEndTime:");
    sb.append(this.sellEndTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("incomeEndTime:");
    sb.append(this.incomeEndTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("incomeAssignType:");
    sb.append(this.incomeAssignType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("canAheadEnd:");
    sb.append(this.canAheadEnd);
    first = false;
    if (!first) sb.append(", ");
    sb.append("willAheadEnd:");
    sb.append(this.willAheadEnd);
    first = false;
    if (isSetGroup()) {
      if (!first) sb.append(", ");
      sb.append("group:");
      if (this.group == null) {
        sb.append("null");
      } else {
        sb.append(this.group);
      }
      first = false;
    }
    if (isSetGroupPercent()) {
      if (!first) sb.append(", ");
      sb.append("groupPercent:");
      sb.append(this.groupPercent);
      first = false;
    }
    if (isSetSoldOutTimeUsed()) {
      if (!first) sb.append(", ");
      sb.append("soldOutTimeUsed:");
      sb.append(this.soldOutTimeUsed);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tabParams:");
    if (this.tabParams == null) {
      sb.append("null");
    } else {
      sb.append(this.tabParams);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastSellTime:");
    sb.append(this.lastSellTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("detailItems:");
    if (this.detailItems == null) {
      sb.append("null");
    } else {
      sb.append(this.detailItems);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (head != null) {
      head.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProductDetailRespStandardSchemeFactory implements SchemeFactory {
    public ProductDetailRespStandardScheme getScheme() {
      return new ProductDetailRespStandardScheme();
    }
  }

  private static class ProductDetailRespStandardScheme extends StandardScheme<ProductDetailResp> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProductDetailResp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HEAD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.head = new com.bangcar.app.mapi.base.MApiRespHead();
              struct.head.read(iprot);
              struct.setHeadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PRODUCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productName = iprot.readString();
              struct.setProductNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MIN_BUY_SHARE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.minBuyShare = iprot.readI32();
              struct.setMinBuyShareIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SELL_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sellState = EProductSellState.findByValue(iprot.readI32());
              struct.setSellStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PERIOD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.period = iprot.readString();
              struct.setPeriodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // INCOME_RATE_E6
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.incomeRateE6 = iprot.readI64();
              struct.setIncomeRateE6IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // INCOME_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.incomeRate = iprot.readString();
              struct.setIncomeRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MIN_INCOME_RATE_E6
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.minIncomeRateE6 = iprot.readI64();
              struct.setMinIncomeRateE6IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SOLD_PERCENT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.soldPercent = iprot.readI32();
              struct.setSoldPercentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TOTAL_SHARE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalShare = iprot.readI32();
              struct.setTotalShareIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // VIRTUAL_REMAIN_SHARE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.virtualRemainShare = iprot.readI32();
              struct.setVirtualRemainShareIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // REMAIN_SHARE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.remainShare = iprot.readI32();
              struct.setRemainShareIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // MAX_BUY_SHARE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxBuyShare = iprot.readI32();
              struct.setMaxBuyShareIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // INCR_SHARE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.incrShare = iprot.readI32();
              struct.setIncrShareIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // SELL_BEGIN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sellBeginTime = iprot.readI32();
              struct.setSellBeginTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // SELL_END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sellEndTime = iprot.readI32();
              struct.setSellEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // INCOME_END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.incomeEndTime = iprot.readI32();
              struct.setIncomeEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // INCOME_ASSIGN_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.incomeAssignType = iprot.readI32();
              struct.setIncomeAssignTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // CAN_AHEAD_END
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.canAheadEnd = iprot.readBool();
              struct.setCanAheadEndIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // WILL_AHEAD_END
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.willAheadEnd = iprot.readBool();
              struct.setWillAheadEndIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // GROUP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.group = iprot.readString();
              struct.setGroupIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // GROUP_PERCENT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.groupPercent = iprot.readI32();
              struct.setGroupPercentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // SOLD_OUT_TIME_USED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.soldOutTimeUsed = iprot.readI32();
              struct.setSoldOutTimeUsedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // TAB_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.tabParams = new ArrayList<com.bangcar.app.mapi.common.KV>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  com.bangcar.app.mapi.common.KV _elem2;
                  _elem2 = new com.bangcar.app.mapi.common.KV();
                  _elem2.read(iprot);
                  struct.tabParams.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setTabParamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // LAST_SELL_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lastSellTime = iprot.readI32();
              struct.setLastSellTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // DETAIL_ITEMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.detailItems = new ArrayList<com.bangcar.app.mapi.common.KV>(_list3.size);
                for (int _i4 = 0; _i4 < _list3.size; ++_i4)
                {
                  com.bangcar.app.mapi.common.KV _elem5;
                  _elem5 = new com.bangcar.app.mapi.common.KV();
                  _elem5.read(iprot);
                  struct.detailItems.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setDetailItemsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProductDetailResp struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.head != null) {
        oprot.writeFieldBegin(HEAD_FIELD_DESC);
        struct.head.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.productName != null) {
        oprot.writeFieldBegin(PRODUCT_NAME_FIELD_DESC);
        oprot.writeString(struct.productName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MIN_BUY_SHARE_FIELD_DESC);
      oprot.writeI32(struct.minBuyShare);
      oprot.writeFieldEnd();
      if (struct.sellState != null) {
        oprot.writeFieldBegin(SELL_STATE_FIELD_DESC);
        oprot.writeI32(struct.sellState.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.period != null) {
        oprot.writeFieldBegin(PERIOD_FIELD_DESC);
        oprot.writeString(struct.period);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INCOME_RATE_E6_FIELD_DESC);
      oprot.writeI64(struct.incomeRateE6);
      oprot.writeFieldEnd();
      if (struct.incomeRate != null) {
        oprot.writeFieldBegin(INCOME_RATE_FIELD_DESC);
        oprot.writeString(struct.incomeRate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MIN_INCOME_RATE_E6_FIELD_DESC);
      oprot.writeI64(struct.minIncomeRateE6);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SOLD_PERCENT_FIELD_DESC);
      oprot.writeI32(struct.soldPercent);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_SHARE_FIELD_DESC);
      oprot.writeI32(struct.totalShare);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VIRTUAL_REMAIN_SHARE_FIELD_DESC);
      oprot.writeI32(struct.virtualRemainShare);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REMAIN_SHARE_FIELD_DESC);
      oprot.writeI32(struct.remainShare);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_BUY_SHARE_FIELD_DESC);
      oprot.writeI32(struct.maxBuyShare);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INCR_SHARE_FIELD_DESC);
      oprot.writeI32(struct.incrShare);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SELL_BEGIN_TIME_FIELD_DESC);
      oprot.writeI32(struct.sellBeginTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SELL_END_TIME_FIELD_DESC);
      oprot.writeI32(struct.sellEndTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INCOME_END_TIME_FIELD_DESC);
      oprot.writeI32(struct.incomeEndTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INCOME_ASSIGN_TYPE_FIELD_DESC);
      oprot.writeI32(struct.incomeAssignType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CAN_AHEAD_END_FIELD_DESC);
      oprot.writeBool(struct.canAheadEnd);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WILL_AHEAD_END_FIELD_DESC);
      oprot.writeBool(struct.willAheadEnd);
      oprot.writeFieldEnd();
      if (struct.group != null) {
        if (struct.isSetGroup()) {
          oprot.writeFieldBegin(GROUP_FIELD_DESC);
          oprot.writeString(struct.group);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetGroupPercent()) {
        oprot.writeFieldBegin(GROUP_PERCENT_FIELD_DESC);
        oprot.writeI32(struct.groupPercent);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSoldOutTimeUsed()) {
        oprot.writeFieldBegin(SOLD_OUT_TIME_USED_FIELD_DESC);
        oprot.writeI32(struct.soldOutTimeUsed);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      if (struct.tabParams != null) {
        oprot.writeFieldBegin(TAB_PARAMS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.tabParams.size()));
          for (com.bangcar.app.mapi.common.KV _iter6 : struct.tabParams)
          {
            _iter6.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LAST_SELL_TIME_FIELD_DESC);
      oprot.writeI32(struct.lastSellTime);
      oprot.writeFieldEnd();
      if (struct.detailItems != null) {
        oprot.writeFieldBegin(DETAIL_ITEMS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.detailItems.size()));
          for (com.bangcar.app.mapi.common.KV _iter7 : struct.detailItems)
          {
            _iter7.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProductDetailRespTupleSchemeFactory implements SchemeFactory {
    public ProductDetailRespTupleScheme getScheme() {
      return new ProductDetailRespTupleScheme();
    }
  }

  private static class ProductDetailRespTupleScheme extends TupleScheme<ProductDetailResp> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProductDetailResp struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetHead()) {
        optionals.set(0);
      }
      if (struct.isSetProductName()) {
        optionals.set(1);
      }
      if (struct.isSetMinBuyShare()) {
        optionals.set(2);
      }
      if (struct.isSetSellState()) {
        optionals.set(3);
      }
      if (struct.isSetPeriod()) {
        optionals.set(4);
      }
      if (struct.isSetIncomeRateE6()) {
        optionals.set(5);
      }
      if (struct.isSetIncomeRate()) {
        optionals.set(6);
      }
      if (struct.isSetMinIncomeRateE6()) {
        optionals.set(7);
      }
      if (struct.isSetSoldPercent()) {
        optionals.set(8);
      }
      if (struct.isSetTotalShare()) {
        optionals.set(9);
      }
      if (struct.isSetVirtualRemainShare()) {
        optionals.set(10);
      }
      if (struct.isSetRemainShare()) {
        optionals.set(11);
      }
      if (struct.isSetMaxBuyShare()) {
        optionals.set(12);
      }
      if (struct.isSetIncrShare()) {
        optionals.set(13);
      }
      if (struct.isSetSellBeginTime()) {
        optionals.set(14);
      }
      if (struct.isSetSellEndTime()) {
        optionals.set(15);
      }
      if (struct.isSetIncomeEndTime()) {
        optionals.set(16);
      }
      if (struct.isSetIncomeAssignType()) {
        optionals.set(17);
      }
      if (struct.isSetCanAheadEnd()) {
        optionals.set(18);
      }
      if (struct.isSetWillAheadEnd()) {
        optionals.set(19);
      }
      if (struct.isSetGroup()) {
        optionals.set(20);
      }
      if (struct.isSetGroupPercent()) {
        optionals.set(21);
      }
      if (struct.isSetSoldOutTimeUsed()) {
        optionals.set(22);
      }
      if (struct.isSetPid()) {
        optionals.set(23);
      }
      if (struct.isSetTabParams()) {
        optionals.set(24);
      }
      if (struct.isSetLastSellTime()) {
        optionals.set(25);
      }
      if (struct.isSetDetailItems()) {
        optionals.set(26);
      }
      oprot.writeBitSet(optionals, 27);
      if (struct.isSetHead()) {
        struct.head.write(oprot);
      }
      if (struct.isSetProductName()) {
        oprot.writeString(struct.productName);
      }
      if (struct.isSetMinBuyShare()) {
        oprot.writeI32(struct.minBuyShare);
      }
      if (struct.isSetSellState()) {
        oprot.writeI32(struct.sellState.getValue());
      }
      if (struct.isSetPeriod()) {
        oprot.writeString(struct.period);
      }
      if (struct.isSetIncomeRateE6()) {
        oprot.writeI64(struct.incomeRateE6);
      }
      if (struct.isSetIncomeRate()) {
        oprot.writeString(struct.incomeRate);
      }
      if (struct.isSetMinIncomeRateE6()) {
        oprot.writeI64(struct.minIncomeRateE6);
      }
      if (struct.isSetSoldPercent()) {
        oprot.writeI32(struct.soldPercent);
      }
      if (struct.isSetTotalShare()) {
        oprot.writeI32(struct.totalShare);
      }
      if (struct.isSetVirtualRemainShare()) {
        oprot.writeI32(struct.virtualRemainShare);
      }
      if (struct.isSetRemainShare()) {
        oprot.writeI32(struct.remainShare);
      }
      if (struct.isSetMaxBuyShare()) {
        oprot.writeI32(struct.maxBuyShare);
      }
      if (struct.isSetIncrShare()) {
        oprot.writeI32(struct.incrShare);
      }
      if (struct.isSetSellBeginTime()) {
        oprot.writeI32(struct.sellBeginTime);
      }
      if (struct.isSetSellEndTime()) {
        oprot.writeI32(struct.sellEndTime);
      }
      if (struct.isSetIncomeEndTime()) {
        oprot.writeI32(struct.incomeEndTime);
      }
      if (struct.isSetIncomeAssignType()) {
        oprot.writeI32(struct.incomeAssignType);
      }
      if (struct.isSetCanAheadEnd()) {
        oprot.writeBool(struct.canAheadEnd);
      }
      if (struct.isSetWillAheadEnd()) {
        oprot.writeBool(struct.willAheadEnd);
      }
      if (struct.isSetGroup()) {
        oprot.writeString(struct.group);
      }
      if (struct.isSetGroupPercent()) {
        oprot.writeI32(struct.groupPercent);
      }
      if (struct.isSetSoldOutTimeUsed()) {
        oprot.writeI32(struct.soldOutTimeUsed);
      }
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetTabParams()) {
        {
          oprot.writeI32(struct.tabParams.size());
          for (com.bangcar.app.mapi.common.KV _iter8 : struct.tabParams)
          {
            _iter8.write(oprot);
          }
        }
      }
      if (struct.isSetLastSellTime()) {
        oprot.writeI32(struct.lastSellTime);
      }
      if (struct.isSetDetailItems()) {
        {
          oprot.writeI32(struct.detailItems.size());
          for (com.bangcar.app.mapi.common.KV _iter9 : struct.detailItems)
          {
            _iter9.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProductDetailResp struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(27);
      if (incoming.get(0)) {
        struct.head = new com.bangcar.app.mapi.base.MApiRespHead();
        struct.head.read(iprot);
        struct.setHeadIsSet(true);
      }
      if (incoming.get(1)) {
        struct.productName = iprot.readString();
        struct.setProductNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.minBuyShare = iprot.readI32();
        struct.setMinBuyShareIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sellState = EProductSellState.findByValue(iprot.readI32());
        struct.setSellStateIsSet(true);
      }
      if (incoming.get(4)) {
        struct.period = iprot.readString();
        struct.setPeriodIsSet(true);
      }
      if (incoming.get(5)) {
        struct.incomeRateE6 = iprot.readI64();
        struct.setIncomeRateE6IsSet(true);
      }
      if (incoming.get(6)) {
        struct.incomeRate = iprot.readString();
        struct.setIncomeRateIsSet(true);
      }
      if (incoming.get(7)) {
        struct.minIncomeRateE6 = iprot.readI64();
        struct.setMinIncomeRateE6IsSet(true);
      }
      if (incoming.get(8)) {
        struct.soldPercent = iprot.readI32();
        struct.setSoldPercentIsSet(true);
      }
      if (incoming.get(9)) {
        struct.totalShare = iprot.readI32();
        struct.setTotalShareIsSet(true);
      }
      if (incoming.get(10)) {
        struct.virtualRemainShare = iprot.readI32();
        struct.setVirtualRemainShareIsSet(true);
      }
      if (incoming.get(11)) {
        struct.remainShare = iprot.readI32();
        struct.setRemainShareIsSet(true);
      }
      if (incoming.get(12)) {
        struct.maxBuyShare = iprot.readI32();
        struct.setMaxBuyShareIsSet(true);
      }
      if (incoming.get(13)) {
        struct.incrShare = iprot.readI32();
        struct.setIncrShareIsSet(true);
      }
      if (incoming.get(14)) {
        struct.sellBeginTime = iprot.readI32();
        struct.setSellBeginTimeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.sellEndTime = iprot.readI32();
        struct.setSellEndTimeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.incomeEndTime = iprot.readI32();
        struct.setIncomeEndTimeIsSet(true);
      }
      if (incoming.get(17)) {
        struct.incomeAssignType = iprot.readI32();
        struct.setIncomeAssignTypeIsSet(true);
      }
      if (incoming.get(18)) {
        struct.canAheadEnd = iprot.readBool();
        struct.setCanAheadEndIsSet(true);
      }
      if (incoming.get(19)) {
        struct.willAheadEnd = iprot.readBool();
        struct.setWillAheadEndIsSet(true);
      }
      if (incoming.get(20)) {
        struct.group = iprot.readString();
        struct.setGroupIsSet(true);
      }
      if (incoming.get(21)) {
        struct.groupPercent = iprot.readI32();
        struct.setGroupPercentIsSet(true);
      }
      if (incoming.get(22)) {
        struct.soldOutTimeUsed = iprot.readI32();
        struct.setSoldOutTimeUsedIsSet(true);
      }
      if (incoming.get(23)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(24)) {
        {
          org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.tabParams = new ArrayList<com.bangcar.app.mapi.common.KV>(_list10.size);
          for (int _i11 = 0; _i11 < _list10.size; ++_i11)
          {
            com.bangcar.app.mapi.common.KV _elem12;
            _elem12 = new com.bangcar.app.mapi.common.KV();
            _elem12.read(iprot);
            struct.tabParams.add(_elem12);
          }
        }
        struct.setTabParamsIsSet(true);
      }
      if (incoming.get(25)) {
        struct.lastSellTime = iprot.readI32();
        struct.setLastSellTimeIsSet(true);
      }
      if (incoming.get(26)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.detailItems = new ArrayList<com.bangcar.app.mapi.common.KV>(_list13.size);
          for (int _i14 = 0; _i14 < _list13.size; ++_i14)
          {
            com.bangcar.app.mapi.common.KV _elem15;
            _elem15 = new com.bangcar.app.mapi.common.KV();
            _elem15.read(iprot);
            struct.detailItems.add(_elem15);
          }
        }
        struct.setDetailItemsIsSet(true);
      }
    }
  }

}

