/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.bangcar.app.mapi.product;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.EncodingUtils;

import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;

public class Comment implements org.apache.thrift.TBase<Comment, Comment._Fields>, java.io.Serializable, Cloneable, Comparable<Comment> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Comment");

  private static final org.apache.thrift.protocol.TField COMMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("commentId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CORP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("corpId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PRODUCT_SHORT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("productShortName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TO_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("toUid", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField TO_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("toName", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("position", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField TO_POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("toPosition", org.apache.thrift.protocol.TType.I32, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CommentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CommentTupleSchemeFactory());
  }

  public int commentId; // required
  public int corpId; // required
  public int pid; // required
  public String productShortName; // required
  public int uid; // required
  public String name; // required
  public int toUid; // required
  public String toName; // required
  public String message; // required
  public int createTime; // required
  public int updateTime; // required
  public int position; // required
  public int toPosition; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COMMENT_ID((short)1, "commentId"),
    CORP_ID((short)2, "corpId"),
    PID((short)3, "pid"),
    PRODUCT_SHORT_NAME((short)4, "productShortName"),
    UID((short)5, "uid"),
    NAME((short)6, "name"),
    TO_UID((short)7, "toUid"),
    TO_NAME((short)8, "toName"),
    MESSAGE((short)9, "message"),
    CREATE_TIME((short)10, "createTime"),
    UPDATE_TIME((short)11, "updateTime"),
    POSITION((short)12, "position"),
    TO_POSITION((short)13, "toPosition");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COMMENT_ID
          return COMMENT_ID;
        case 2: // CORP_ID
          return CORP_ID;
        case 3: // PID
          return PID;
        case 4: // PRODUCT_SHORT_NAME
          return PRODUCT_SHORT_NAME;
        case 5: // UID
          return UID;
        case 6: // NAME
          return NAME;
        case 7: // TO_UID
          return TO_UID;
        case 8: // TO_NAME
          return TO_NAME;
        case 9: // MESSAGE
          return MESSAGE;
        case 10: // CREATE_TIME
          return CREATE_TIME;
        case 11: // UPDATE_TIME
          return UPDATE_TIME;
        case 12: // POSITION
          return POSITION;
        case 13: // TO_POSITION
          return TO_POSITION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COMMENTID_ISSET_ID = 0;
  private static final int __CORPID_ISSET_ID = 1;
  private static final int __PID_ISSET_ID = 2;
  private static final int __UID_ISSET_ID = 3;
  private static final int __TOUID_ISSET_ID = 4;
  private static final int __CREATETIME_ISSET_ID = 5;
  private static final int __UPDATETIME_ISSET_ID = 6;
  private static final int __POSITION_ISSET_ID = 7;
  private static final int __TOPOSITION_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COMMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("commentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CORP_ID, new org.apache.thrift.meta_data.FieldMetaData("corpId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRODUCT_SHORT_NAME, new org.apache.thrift.meta_data.FieldMetaData("productShortName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TO_UID, new org.apache.thrift.meta_data.FieldMetaData("toUid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TO_NAME, new org.apache.thrift.meta_data.FieldMetaData("toName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POSITION, new org.apache.thrift.meta_data.FieldMetaData("position", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TO_POSITION, new org.apache.thrift.meta_data.FieldMetaData("toPosition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Comment.class, metaDataMap);
  }

  public Comment() {
  }

  public Comment(
    int commentId,
    int corpId,
    int pid,
    String productShortName,
    int uid,
    String name,
    int toUid,
    String toName,
    String message,
    int createTime,
    int updateTime,
    int position,
    int toPosition)
  {
    this();
    this.commentId = commentId;
    setCommentIdIsSet(true);
    this.corpId = corpId;
    setCorpIdIsSet(true);
    this.pid = pid;
    setPidIsSet(true);
    this.productShortName = productShortName;
    this.uid = uid;
    setUidIsSet(true);
    this.name = name;
    this.toUid = toUid;
    setToUidIsSet(true);
    this.toName = toName;
    this.message = message;
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    this.position = position;
    setPositionIsSet(true);
    this.toPosition = toPosition;
    setToPositionIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Comment(Comment other) {
    __isset_bitfield = other.__isset_bitfield;
    this.commentId = other.commentId;
    this.corpId = other.corpId;
    this.pid = other.pid;
    if (other.isSetProductShortName()) {
      this.productShortName = other.productShortName;
    }
    this.uid = other.uid;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.toUid = other.toUid;
    if (other.isSetToName()) {
      this.toName = other.toName;
    }
    if (other.isSetMessage()) {
      this.message = other.message;
    }
    this.createTime = other.createTime;
    this.updateTime = other.updateTime;
    this.position = other.position;
    this.toPosition = other.toPosition;
  }

  public Comment deepCopy() {
    return new Comment(this);
  }

  @Override
  public void clear() {
    setCommentIdIsSet(false);
    this.commentId = 0;
    setCorpIdIsSet(false);
    this.corpId = 0;
    setPidIsSet(false);
    this.pid = 0;
    this.productShortName = null;
    setUidIsSet(false);
    this.uid = 0;
    this.name = null;
    setToUidIsSet(false);
    this.toUid = 0;
    this.toName = null;
    this.message = null;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    setUpdateTimeIsSet(false);
    this.updateTime = 0;
    setPositionIsSet(false);
    this.position = 0;
    setToPositionIsSet(false);
    this.toPosition = 0;
  }

  public int getCommentId() {
    return this.commentId;
  }

  public Comment setCommentId(int commentId) {
    this.commentId = commentId;
    setCommentIdIsSet(true);
    return this;
  }

  public void unsetCommentId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMMENTID_ISSET_ID);
  }

  /** Returns true if field commentId is set (has been assigned a value) and false otherwise */
  public boolean isSetCommentId() {
    return EncodingUtils.testBit(__isset_bitfield, __COMMENTID_ISSET_ID);
  }

  public void setCommentIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMMENTID_ISSET_ID, value);
  }

  public int getCorpId() {
    return this.corpId;
  }

  public Comment setCorpId(int corpId) {
    this.corpId = corpId;
    setCorpIdIsSet(true);
    return this;
  }

  public void unsetCorpId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CORPID_ISSET_ID);
  }

  /** Returns true if field corpId is set (has been assigned a value) and false otherwise */
  public boolean isSetCorpId() {
    return EncodingUtils.testBit(__isset_bitfield, __CORPID_ISSET_ID);
  }

  public void setCorpIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CORPID_ISSET_ID, value);
  }

  public int getPid() {
    return this.pid;
  }

  public Comment setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public String getProductShortName() {
    return this.productShortName;
  }

  public Comment setProductShortName(String productShortName) {
    this.productShortName = productShortName;
    return this;
  }

  public void unsetProductShortName() {
    this.productShortName = null;
  }

  /** Returns true if field productShortName is set (has been assigned a value) and false otherwise */
  public boolean isSetProductShortName() {
    return this.productShortName != null;
  }

  public void setProductShortNameIsSet(boolean value) {
    if (!value) {
      this.productShortName = null;
    }
  }

  public int getUid() {
    return this.uid;
  }

  public Comment setUid(int uid) {
    this.uid = uid;
    setUidIsSet(true);
    return this;
  }

  public void unsetUid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
  }

  /** Returns true if field uid is set (has been assigned a value) and false otherwise */
  public boolean isSetUid() {
    return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
  }

  public void setUidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public Comment setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getToUid() {
    return this.toUid;
  }

  public Comment setToUid(int toUid) {
    this.toUid = toUid;
    setToUidIsSet(true);
    return this;
  }

  public void unsetToUid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOUID_ISSET_ID);
  }

  /** Returns true if field toUid is set (has been assigned a value) and false otherwise */
  public boolean isSetToUid() {
    return EncodingUtils.testBit(__isset_bitfield, __TOUID_ISSET_ID);
  }

  public void setToUidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOUID_ISSET_ID, value);
  }

  public String getToName() {
    return this.toName;
  }

  public Comment setToName(String toName) {
    this.toName = toName;
    return this;
  }

  public void unsetToName() {
    this.toName = null;
  }

  /** Returns true if field toName is set (has been assigned a value) and false otherwise */
  public boolean isSetToName() {
    return this.toName != null;
  }

  public void setToNameIsSet(boolean value) {
    if (!value) {
      this.toName = null;
    }
  }

  public String getMessage() {
    return this.message;
  }

  public Comment setMessage(String message) {
    this.message = message;
    return this;
  }

  public void unsetMessage() {
    this.message = null;
  }

  /** Returns true if field message is set (has been assigned a value) and false otherwise */
  public boolean isSetMessage() {
    return this.message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  public int getCreateTime() {
    return this.createTime;
  }

  public Comment setCreateTime(int createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public int getUpdateTime() {
    return this.updateTime;
  }

  public Comment setUpdateTime(int updateTime) {
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    return this;
  }

  public void unsetUpdateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  public void setUpdateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATETIME_ISSET_ID, value);
  }

  public int getPosition() {
    return this.position;
  }

  public Comment setPosition(int position) {
    this.position = position;
    setPositionIsSet(true);
    return this;
  }

  public void unsetPosition() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITION_ISSET_ID);
  }

  /** Returns true if field position is set (has been assigned a value) and false otherwise */
  public boolean isSetPosition() {
    return EncodingUtils.testBit(__isset_bitfield, __POSITION_ISSET_ID);
  }

  public void setPositionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITION_ISSET_ID, value);
  }

  public int getToPosition() {
    return this.toPosition;
  }

  public Comment setToPosition(int toPosition) {
    this.toPosition = toPosition;
    setToPositionIsSet(true);
    return this;
  }

  public void unsetToPosition() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOPOSITION_ISSET_ID);
  }

  /** Returns true if field toPosition is set (has been assigned a value) and false otherwise */
  public boolean isSetToPosition() {
    return EncodingUtils.testBit(__isset_bitfield, __TOPOSITION_ISSET_ID);
  }

  public void setToPositionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOPOSITION_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COMMENT_ID:
      if (value == null) {
        unsetCommentId();
      } else {
        setCommentId((Integer)value);
      }
      break;

    case CORP_ID:
      if (value == null) {
        unsetCorpId();
      } else {
        setCorpId((Integer)value);
      }
      break;

    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case PRODUCT_SHORT_NAME:
      if (value == null) {
        unsetProductShortName();
      } else {
        setProductShortName((String)value);
      }
      break;

    case UID:
      if (value == null) {
        unsetUid();
      } else {
        setUid((Integer)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case TO_UID:
      if (value == null) {
        unsetToUid();
      } else {
        setToUid((Integer)value);
      }
      break;

    case TO_NAME:
      if (value == null) {
        unsetToName();
      } else {
        setToName((String)value);
      }
      break;

    case MESSAGE:
      if (value == null) {
        unsetMessage();
      } else {
        setMessage((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Integer)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((Integer)value);
      }
      break;

    case POSITION:
      if (value == null) {
        unsetPosition();
      } else {
        setPosition((Integer)value);
      }
      break;

    case TO_POSITION:
      if (value == null) {
        unsetToPosition();
      } else {
        setToPosition((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COMMENT_ID:
      return Integer.valueOf(getCommentId());

    case CORP_ID:
      return Integer.valueOf(getCorpId());

    case PID:
      return Integer.valueOf(getPid());

    case PRODUCT_SHORT_NAME:
      return getProductShortName();

    case UID:
      return Integer.valueOf(getUid());

    case NAME:
      return getName();

    case TO_UID:
      return Integer.valueOf(getToUid());

    case TO_NAME:
      return getToName();

    case MESSAGE:
      return getMessage();

    case CREATE_TIME:
      return Integer.valueOf(getCreateTime());

    case UPDATE_TIME:
      return Integer.valueOf(getUpdateTime());

    case POSITION:
      return Integer.valueOf(getPosition());

    case TO_POSITION:
      return Integer.valueOf(getToPosition());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COMMENT_ID:
      return isSetCommentId();
    case CORP_ID:
      return isSetCorpId();
    case PID:
      return isSetPid();
    case PRODUCT_SHORT_NAME:
      return isSetProductShortName();
    case UID:
      return isSetUid();
    case NAME:
      return isSetName();
    case TO_UID:
      return isSetToUid();
    case TO_NAME:
      return isSetToName();
    case MESSAGE:
      return isSetMessage();
    case CREATE_TIME:
      return isSetCreateTime();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case POSITION:
      return isSetPosition();
    case TO_POSITION:
      return isSetToPosition();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Comment)
      return this.equals((Comment)that);
    return false;
  }

  public boolean equals(Comment that) {
    if (that == null)
      return false;

    boolean this_present_commentId = true;
    boolean that_present_commentId = true;
    if (this_present_commentId || that_present_commentId) {
      if (!(this_present_commentId && that_present_commentId))
        return false;
      if (this.commentId != that.commentId)
        return false;
    }

    boolean this_present_corpId = true;
    boolean that_present_corpId = true;
    if (this_present_corpId || that_present_corpId) {
      if (!(this_present_corpId && that_present_corpId))
        return false;
      if (this.corpId != that.corpId)
        return false;
    }

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_productShortName = true && this.isSetProductShortName();
    boolean that_present_productShortName = true && that.isSetProductShortName();
    if (this_present_productShortName || that_present_productShortName) {
      if (!(this_present_productShortName && that_present_productShortName))
        return false;
      if (!this.productShortName.equals(that.productShortName))
        return false;
    }

    boolean this_present_uid = true;
    boolean that_present_uid = true;
    if (this_present_uid || that_present_uid) {
      if (!(this_present_uid && that_present_uid))
        return false;
      if (this.uid != that.uid)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_toUid = true;
    boolean that_present_toUid = true;
    if (this_present_toUid || that_present_toUid) {
      if (!(this_present_toUid && that_present_toUid))
        return false;
      if (this.toUid != that.toUid)
        return false;
    }

    boolean this_present_toName = true && this.isSetToName();
    boolean that_present_toName = true && that.isSetToName();
    if (this_present_toName || that_present_toName) {
      if (!(this_present_toName && that_present_toName))
        return false;
      if (!this.toName.equals(that.toName))
        return false;
    }

    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_updateTime = true;
    boolean that_present_updateTime = true;
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (this.updateTime != that.updateTime)
        return false;
    }

    boolean this_present_position = true;
    boolean that_present_position = true;
    if (this_present_position || that_present_position) {
      if (!(this_present_position && that_present_position))
        return false;
      if (this.position != that.position)
        return false;
    }

    boolean this_present_toPosition = true;
    boolean that_present_toPosition = true;
    if (this_present_toPosition || that_present_toPosition) {
      if (!(this_present_toPosition && that_present_toPosition))
        return false;
      if (this.toPosition != that.toPosition)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Comment other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCommentId()).compareTo(other.isSetCommentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentId, other.commentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCorpId()).compareTo(other.isSetCorpId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCorpId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.corpId, other.corpId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductShortName()).compareTo(other.isSetProductShortName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductShortName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productShortName, other.productShortName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToUid()).compareTo(other.isSetToUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toUid, other.toUid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToName()).compareTo(other.isSetToName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toName, other.toName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPosition()).compareTo(other.isSetPosition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPosition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.position, other.position);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToPosition()).compareTo(other.isSetToPosition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToPosition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toPosition, other.toPosition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Comment(");
    boolean first = true;

    sb.append("commentId:");
    sb.append(this.commentId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("corpId:");
    sb.append(this.corpId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("productShortName:");
    if (this.productShortName == null) {
      sb.append("null");
    } else {
      sb.append(this.productShortName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("uid:");
    sb.append(this.uid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("toUid:");
    sb.append(this.toUid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("toName:");
    if (this.toName == null) {
      sb.append("null");
    } else {
      sb.append(this.toName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("message:");
    if (this.message == null) {
      sb.append("null");
    } else {
      sb.append(this.message);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateTime:");
    sb.append(this.updateTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("position:");
    sb.append(this.position);
    first = false;
    if (!first) sb.append(", ");
    sb.append("toPosition:");
    sb.append(this.toPosition);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CommentStandardSchemeFactory implements SchemeFactory {
    public CommentStandardScheme getScheme() {
      return new CommentStandardScheme();
    }
  }

  private static class CommentStandardScheme extends StandardScheme<Comment> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Comment struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COMMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.commentId = iprot.readI32();
              struct.setCommentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CORP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.corpId = iprot.readI32();
              struct.setCorpIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PRODUCT_SHORT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productShortName = iprot.readString();
              struct.setProductShortNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // UID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.uid = iprot.readI32();
              struct.setUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TO_UID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.toUid = iprot.readI32();
              struct.setToUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TO_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.toName = iprot.readString();
              struct.setToNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.message = iprot.readString();
              struct.setMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createTime = iprot.readI32();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.updateTime = iprot.readI32();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // POSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.position = iprot.readI32();
              struct.setPositionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // TO_POSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.toPosition = iprot.readI32();
              struct.setToPositionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Comment struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(COMMENT_ID_FIELD_DESC);
      oprot.writeI32(struct.commentId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CORP_ID_FIELD_DESC);
      oprot.writeI32(struct.corpId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      if (struct.productShortName != null) {
        oprot.writeFieldBegin(PRODUCT_SHORT_NAME_FIELD_DESC);
        oprot.writeString(struct.productShortName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(UID_FIELD_DESC);
      oprot.writeI32(struct.uid);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TO_UID_FIELD_DESC);
      oprot.writeI32(struct.toUid);
      oprot.writeFieldEnd();
      if (struct.toName != null) {
        oprot.writeFieldBegin(TO_NAME_FIELD_DESC);
        oprot.writeString(struct.toName);
        oprot.writeFieldEnd();
      }
      if (struct.message != null) {
        oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
        oprot.writeString(struct.message);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI32(struct.createTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
      oprot.writeI32(struct.updateTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POSITION_FIELD_DESC);
      oprot.writeI32(struct.position);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TO_POSITION_FIELD_DESC);
      oprot.writeI32(struct.toPosition);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CommentTupleSchemeFactory implements SchemeFactory {
    public CommentTupleScheme getScheme() {
      return new CommentTupleScheme();
    }
  }

  private static class CommentTupleScheme extends TupleScheme<Comment> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Comment struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCommentId()) {
        optionals.set(0);
      }
      if (struct.isSetCorpId()) {
        optionals.set(1);
      }
      if (struct.isSetPid()) {
        optionals.set(2);
      }
      if (struct.isSetProductShortName()) {
        optionals.set(3);
      }
      if (struct.isSetUid()) {
        optionals.set(4);
      }
      if (struct.isSetName()) {
        optionals.set(5);
      }
      if (struct.isSetToUid()) {
        optionals.set(6);
      }
      if (struct.isSetToName()) {
        optionals.set(7);
      }
      if (struct.isSetMessage()) {
        optionals.set(8);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(9);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(10);
      }
      if (struct.isSetPosition()) {
        optionals.set(11);
      }
      if (struct.isSetToPosition()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetCommentId()) {
        oprot.writeI32(struct.commentId);
      }
      if (struct.isSetCorpId()) {
        oprot.writeI32(struct.corpId);
      }
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetProductShortName()) {
        oprot.writeString(struct.productShortName);
      }
      if (struct.isSetUid()) {
        oprot.writeI32(struct.uid);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetToUid()) {
        oprot.writeI32(struct.toUid);
      }
      if (struct.isSetToName()) {
        oprot.writeString(struct.toName);
      }
      if (struct.isSetMessage()) {
        oprot.writeString(struct.message);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI32(struct.createTime);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeI32(struct.updateTime);
      }
      if (struct.isSetPosition()) {
        oprot.writeI32(struct.position);
      }
      if (struct.isSetToPosition()) {
        oprot.writeI32(struct.toPosition);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Comment struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.commentId = iprot.readI32();
        struct.setCommentIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.corpId = iprot.readI32();
        struct.setCorpIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(3)) {
        struct.productShortName = iprot.readString();
        struct.setProductShortNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.uid = iprot.readI32();
        struct.setUidIsSet(true);
      }
      if (incoming.get(5)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.toUid = iprot.readI32();
        struct.setToUidIsSet(true);
      }
      if (incoming.get(7)) {
        struct.toName = iprot.readString();
        struct.setToNameIsSet(true);
      }
      if (incoming.get(8)) {
        struct.message = iprot.readString();
        struct.setMessageIsSet(true);
      }
      if (incoming.get(9)) {
        struct.createTime = iprot.readI32();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.updateTime = iprot.readI32();
        struct.setUpdateTimeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.position = iprot.readI32();
        struct.setPositionIsSet(true);
      }
      if (incoming.get(12)) {
        struct.toPosition = iprot.readI32();
        struct.setToPositionIsSet(true);
      }
    }
  }

}

