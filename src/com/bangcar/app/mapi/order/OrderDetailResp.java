/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.bangcar.app.mapi.order;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.EncodingUtils;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;

public class OrderDetailResp implements org.apache.thrift.TBase<OrderDetailResp, OrderDetailResp._Fields>, java.io.Serializable, Cloneable, Comparable<OrderDetailResp> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OrderDetailResp");

  private static final org.apache.thrift.protocol.TField HEAD_FIELD_DESC = new org.apache.thrift.protocol.TField("head", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField ORDER_ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("orderItems", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField INVEST_ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("investItems", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField PRODUCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("productName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField AGREE_ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("agreeItems", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField PAY_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("payState", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField REMAIN_SECONDS_FIELD_DESC = new org.apache.thrift.protocol.TField("remainSeconds", org.apache.thrift.protocol.TType.I32, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OrderDetailRespStandardSchemeFactory());
    schemes.put(TupleScheme.class, new OrderDetailRespTupleSchemeFactory());
  }

  public com.bangcar.app.mapi.base.MApiRespHead head; // required
  /**
   * 订单信息
   */
  public List<com.bangcar.app.mapi.common.KV> orderItems; // required
  /**
   * 投资人信息
   */
  public List<com.bangcar.app.mapi.common.KV> investItems; // required
  /**
   * 产品名
   */
  public String productName; // required
  /**
   * 产品状态
   */
  public String status; // required
  /**
   * 合同
   */
  public List<com.bangcar.app.mapi.common.Agree> agreeItems; // required
  /**
   * 产品id（如果手机端不支持，值为null）
   */
  public int pid; // required
  /**
   * 订单支付状态
   * 
   * @see com.bangcar.app.mapi.common.EPayState
   */
  public com.bangcar.app.mapi.common.EPayState payState; // required
  /**
   * 剩余支付时间
   */
  public int remainSeconds; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HEAD((short)1, "head"),
    /**
     * 订单信息
     */
    ORDER_ITEMS((short)2, "orderItems"),
    /**
     * 投资人信息
     */
    INVEST_ITEMS((short)3, "investItems"),
    /**
     * 产品名
     */
    PRODUCT_NAME((short)4, "productName"),
    /**
     * 产品状态
     */
    STATUS((short)5, "status"),
    /**
     * 合同
     */
    AGREE_ITEMS((short)6, "agreeItems"),
    /**
     * 产品id（如果手机端不支持，值为null）
     */
    PID((short)7, "pid"),
    /**
     * 订单支付状态
     * 
     * @see com.bangcar.app.mapi.common.EPayState
     */
    PAY_STATE((short)8, "payState"),
    /**
     * 剩余支付时间
     */
    REMAIN_SECONDS((short)9, "remainSeconds");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HEAD
          return HEAD;
        case 2: // ORDER_ITEMS
          return ORDER_ITEMS;
        case 3: // INVEST_ITEMS
          return INVEST_ITEMS;
        case 4: // PRODUCT_NAME
          return PRODUCT_NAME;
        case 5: // STATUS
          return STATUS;
        case 6: // AGREE_ITEMS
          return AGREE_ITEMS;
        case 7: // PID
          return PID;
        case 8: // PAY_STATE
          return PAY_STATE;
        case 9: // REMAIN_SECONDS
          return REMAIN_SECONDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __REMAINSECONDS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HEAD, new org.apache.thrift.meta_data.FieldMetaData("head", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bangcar.app.mapi.base.MApiRespHead.class)));
    tmpMap.put(_Fields.ORDER_ITEMS, new org.apache.thrift.meta_data.FieldMetaData("orderItems", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bangcar.app.mapi.common.KV.class))));
    tmpMap.put(_Fields.INVEST_ITEMS, new org.apache.thrift.meta_data.FieldMetaData("investItems", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bangcar.app.mapi.common.KV.class))));
    tmpMap.put(_Fields.PRODUCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("productName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AGREE_ITEMS, new org.apache.thrift.meta_data.FieldMetaData("agreeItems", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bangcar.app.mapi.common.Agree.class))));
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAY_STATE, new org.apache.thrift.meta_data.FieldMetaData("payState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.bangcar.app.mapi.common.EPayState.class)));
    tmpMap.put(_Fields.REMAIN_SECONDS, new org.apache.thrift.meta_data.FieldMetaData("remainSeconds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OrderDetailResp.class, metaDataMap);
  }

  public OrderDetailResp() {
  }

  public OrderDetailResp(
    com.bangcar.app.mapi.base.MApiRespHead head,
    List<com.bangcar.app.mapi.common.KV> orderItems,
    List<com.bangcar.app.mapi.common.KV> investItems,
    String productName,
    String status,
    List<com.bangcar.app.mapi.common.Agree> agreeItems,
    int pid,
    com.bangcar.app.mapi.common.EPayState payState,
    int remainSeconds)
  {
    this();
    this.head = head;
    this.orderItems = orderItems;
    this.investItems = investItems;
    this.productName = productName;
    this.status = status;
    this.agreeItems = agreeItems;
    this.pid = pid;
    setPidIsSet(true);
    this.payState = payState;
    this.remainSeconds = remainSeconds;
    setRemainSecondsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OrderDetailResp(OrderDetailResp other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetHead()) {
      this.head = new com.bangcar.app.mapi.base.MApiRespHead(other.head);
    }
    if (other.isSetOrderItems()) {
      List<com.bangcar.app.mapi.common.KV> __this__orderItems = new ArrayList<com.bangcar.app.mapi.common.KV>(other.orderItems.size());
      for (com.bangcar.app.mapi.common.KV other_element : other.orderItems) {
        __this__orderItems.add(new com.bangcar.app.mapi.common.KV(other_element));
      }
      this.orderItems = __this__orderItems;
    }
    if (other.isSetInvestItems()) {
      List<com.bangcar.app.mapi.common.KV> __this__investItems = new ArrayList<com.bangcar.app.mapi.common.KV>(other.investItems.size());
      for (com.bangcar.app.mapi.common.KV other_element : other.investItems) {
        __this__investItems.add(new com.bangcar.app.mapi.common.KV(other_element));
      }
      this.investItems = __this__investItems;
    }
    if (other.isSetProductName()) {
      this.productName = other.productName;
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetAgreeItems()) {
      List<com.bangcar.app.mapi.common.Agree> __this__agreeItems = new ArrayList<com.bangcar.app.mapi.common.Agree>(other.agreeItems.size());
      for (com.bangcar.app.mapi.common.Agree other_element : other.agreeItems) {
        __this__agreeItems.add(new com.bangcar.app.mapi.common.Agree(other_element));
      }
      this.agreeItems = __this__agreeItems;
    }
    this.pid = other.pid;
    if (other.isSetPayState()) {
      this.payState = other.payState;
    }
    this.remainSeconds = other.remainSeconds;
  }

  public OrderDetailResp deepCopy() {
    return new OrderDetailResp(this);
  }

  @Override
  public void clear() {
    this.head = null;
    this.orderItems = null;
    this.investItems = null;
    this.productName = null;
    this.status = null;
    this.agreeItems = null;
    setPidIsSet(false);
    this.pid = 0;
    this.payState = null;
    setRemainSecondsIsSet(false);
    this.remainSeconds = 0;
  }

  public com.bangcar.app.mapi.base.MApiRespHead getHead() {
    return this.head;
  }

  public OrderDetailResp setHead(com.bangcar.app.mapi.base.MApiRespHead head) {
    this.head = head;
    return this;
  }

  public void unsetHead() {
    this.head = null;
  }

  /** Returns true if field head is set (has been assigned a value) and false otherwise */
  public boolean isSetHead() {
    return this.head != null;
  }

  public void setHeadIsSet(boolean value) {
    if (!value) {
      this.head = null;
    }
  }

  public int getOrderItemsSize() {
    return (this.orderItems == null) ? 0 : this.orderItems.size();
  }

  public java.util.Iterator<com.bangcar.app.mapi.common.KV> getOrderItemsIterator() {
    return (this.orderItems == null) ? null : this.orderItems.iterator();
  }

  public void addToOrderItems(com.bangcar.app.mapi.common.KV elem) {
    if (this.orderItems == null) {
      this.orderItems = new ArrayList<com.bangcar.app.mapi.common.KV>();
    }
    this.orderItems.add(elem);
  }

  /**
   * 订单信息
   */
  public List<com.bangcar.app.mapi.common.KV> getOrderItems() {
    return this.orderItems;
  }

  /**
   * 订单信息
   */
  public OrderDetailResp setOrderItems(List<com.bangcar.app.mapi.common.KV> orderItems) {
    this.orderItems = orderItems;
    return this;
  }

  public void unsetOrderItems() {
    this.orderItems = null;
  }

  /** Returns true if field orderItems is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderItems() {
    return this.orderItems != null;
  }

  public void setOrderItemsIsSet(boolean value) {
    if (!value) {
      this.orderItems = null;
    }
  }

  public int getInvestItemsSize() {
    return (this.investItems == null) ? 0 : this.investItems.size();
  }

  public java.util.Iterator<com.bangcar.app.mapi.common.KV> getInvestItemsIterator() {
    return (this.investItems == null) ? null : this.investItems.iterator();
  }

  public void addToInvestItems(com.bangcar.app.mapi.common.KV elem) {
    if (this.investItems == null) {
      this.investItems = new ArrayList<com.bangcar.app.mapi.common.KV>();
    }
    this.investItems.add(elem);
  }

  /**
   * 投资人信息
   */
  public List<com.bangcar.app.mapi.common.KV> getInvestItems() {
    return this.investItems;
  }

  /**
   * 投资人信息
   */
  public OrderDetailResp setInvestItems(List<com.bangcar.app.mapi.common.KV> investItems) {
    this.investItems = investItems;
    return this;
  }

  public void unsetInvestItems() {
    this.investItems = null;
  }

  /** Returns true if field investItems is set (has been assigned a value) and false otherwise */
  public boolean isSetInvestItems() {
    return this.investItems != null;
  }

  public void setInvestItemsIsSet(boolean value) {
    if (!value) {
      this.investItems = null;
    }
  }

  /**
   * 产品名
   */
  public String getProductName() {
    return this.productName;
  }

  /**
   * 产品名
   */
  public OrderDetailResp setProductName(String productName) {
    this.productName = productName;
    return this;
  }

  public void unsetProductName() {
    this.productName = null;
  }

  /** Returns true if field productName is set (has been assigned a value) and false otherwise */
  public boolean isSetProductName() {
    return this.productName != null;
  }

  public void setProductNameIsSet(boolean value) {
    if (!value) {
      this.productName = null;
    }
  }

  /**
   * 产品状态
   */
  public String getStatus() {
    return this.status;
  }

  /**
   * 产品状态
   */
  public OrderDetailResp setStatus(String status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public int getAgreeItemsSize() {
    return (this.agreeItems == null) ? 0 : this.agreeItems.size();
  }

  public java.util.Iterator<com.bangcar.app.mapi.common.Agree> getAgreeItemsIterator() {
    return (this.agreeItems == null) ? null : this.agreeItems.iterator();
  }

  public void addToAgreeItems(com.bangcar.app.mapi.common.Agree elem) {
    if (this.agreeItems == null) {
      this.agreeItems = new ArrayList<com.bangcar.app.mapi.common.Agree>();
    }
    this.agreeItems.add(elem);
  }

  /**
   * 合同
   */
  public List<com.bangcar.app.mapi.common.Agree> getAgreeItems() {
    return this.agreeItems;
  }

  /**
   * 合同
   */
  public OrderDetailResp setAgreeItems(List<com.bangcar.app.mapi.common.Agree> agreeItems) {
    this.agreeItems = agreeItems;
    return this;
  }

  public void unsetAgreeItems() {
    this.agreeItems = null;
  }

  /** Returns true if field agreeItems is set (has been assigned a value) and false otherwise */
  public boolean isSetAgreeItems() {
    return this.agreeItems != null;
  }

  public void setAgreeItemsIsSet(boolean value) {
    if (!value) {
      this.agreeItems = null;
    }
  }

  /**
   * 产品id（如果手机端不支持，值为null）
   */
  public int getPid() {
    return this.pid;
  }

  /**
   * 产品id（如果手机端不支持，值为null）
   */
  public OrderDetailResp setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  /**
   * 订单支付状态
   * 
   * @see com.bangcar.app.mapi.common.EPayState
   */
  public com.bangcar.app.mapi.common.EPayState getPayState() {
    return this.payState;
  }

  /**
   * 订单支付状态
   * 
   * @see com.bangcar.app.mapi.common.EPayState
   */
  public OrderDetailResp setPayState(com.bangcar.app.mapi.common.EPayState payState) {
    this.payState = payState;
    return this;
  }

  public void unsetPayState() {
    this.payState = null;
  }

  /** Returns true if field payState is set (has been assigned a value) and false otherwise */
  public boolean isSetPayState() {
    return this.payState != null;
  }

  public void setPayStateIsSet(boolean value) {
    if (!value) {
      this.payState = null;
    }
  }

  /**
   * 剩余支付时间
   */
  public int getRemainSeconds() {
    return this.remainSeconds;
  }

  /**
   * 剩余支付时间
   */
  public OrderDetailResp setRemainSeconds(int remainSeconds) {
    this.remainSeconds = remainSeconds;
    setRemainSecondsIsSet(true);
    return this;
  }

  public void unsetRemainSeconds() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REMAINSECONDS_ISSET_ID);
  }

  /** Returns true if field remainSeconds is set (has been assigned a value) and false otherwise */
  public boolean isSetRemainSeconds() {
    return EncodingUtils.testBit(__isset_bitfield, __REMAINSECONDS_ISSET_ID);
  }

  public void setRemainSecondsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REMAINSECONDS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case HEAD:
      if (value == null) {
        unsetHead();
      } else {
        setHead((com.bangcar.app.mapi.base.MApiRespHead)value);
      }
      break;

    case ORDER_ITEMS:
      if (value == null) {
        unsetOrderItems();
      } else {
        setOrderItems((List<com.bangcar.app.mapi.common.KV>)value);
      }
      break;

    case INVEST_ITEMS:
      if (value == null) {
        unsetInvestItems();
      } else {
        setInvestItems((List<com.bangcar.app.mapi.common.KV>)value);
      }
      break;

    case PRODUCT_NAME:
      if (value == null) {
        unsetProductName();
      } else {
        setProductName((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((String)value);
      }
      break;

    case AGREE_ITEMS:
      if (value == null) {
        unsetAgreeItems();
      } else {
        setAgreeItems((List<com.bangcar.app.mapi.common.Agree>)value);
      }
      break;

    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case PAY_STATE:
      if (value == null) {
        unsetPayState();
      } else {
        setPayState((com.bangcar.app.mapi.common.EPayState)value);
      }
      break;

    case REMAIN_SECONDS:
      if (value == null) {
        unsetRemainSeconds();
      } else {
        setRemainSeconds((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case HEAD:
      return getHead();

    case ORDER_ITEMS:
      return getOrderItems();

    case INVEST_ITEMS:
      return getInvestItems();

    case PRODUCT_NAME:
      return getProductName();

    case STATUS:
      return getStatus();

    case AGREE_ITEMS:
      return getAgreeItems();

    case PID:
      return Integer.valueOf(getPid());

    case PAY_STATE:
      return getPayState();

    case REMAIN_SECONDS:
      return Integer.valueOf(getRemainSeconds());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case HEAD:
      return isSetHead();
    case ORDER_ITEMS:
      return isSetOrderItems();
    case INVEST_ITEMS:
      return isSetInvestItems();
    case PRODUCT_NAME:
      return isSetProductName();
    case STATUS:
      return isSetStatus();
    case AGREE_ITEMS:
      return isSetAgreeItems();
    case PID:
      return isSetPid();
    case PAY_STATE:
      return isSetPayState();
    case REMAIN_SECONDS:
      return isSetRemainSeconds();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OrderDetailResp)
      return this.equals((OrderDetailResp)that);
    return false;
  }

  public boolean equals(OrderDetailResp that) {
    if (that == null)
      return false;

    boolean this_present_head = true && this.isSetHead();
    boolean that_present_head = true && that.isSetHead();
    if (this_present_head || that_present_head) {
      if (!(this_present_head && that_present_head))
        return false;
      if (!this.head.equals(that.head))
        return false;
    }

    boolean this_present_orderItems = true && this.isSetOrderItems();
    boolean that_present_orderItems = true && that.isSetOrderItems();
    if (this_present_orderItems || that_present_orderItems) {
      if (!(this_present_orderItems && that_present_orderItems))
        return false;
      if (!this.orderItems.equals(that.orderItems))
        return false;
    }

    boolean this_present_investItems = true && this.isSetInvestItems();
    boolean that_present_investItems = true && that.isSetInvestItems();
    if (this_present_investItems || that_present_investItems) {
      if (!(this_present_investItems && that_present_investItems))
        return false;
      if (!this.investItems.equals(that.investItems))
        return false;
    }

    boolean this_present_productName = true && this.isSetProductName();
    boolean that_present_productName = true && that.isSetProductName();
    if (this_present_productName || that_present_productName) {
      if (!(this_present_productName && that_present_productName))
        return false;
      if (!this.productName.equals(that.productName))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_agreeItems = true && this.isSetAgreeItems();
    boolean that_present_agreeItems = true && that.isSetAgreeItems();
    if (this_present_agreeItems || that_present_agreeItems) {
      if (!(this_present_agreeItems && that_present_agreeItems))
        return false;
      if (!this.agreeItems.equals(that.agreeItems))
        return false;
    }

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_payState = true && this.isSetPayState();
    boolean that_present_payState = true && that.isSetPayState();
    if (this_present_payState || that_present_payState) {
      if (!(this_present_payState && that_present_payState))
        return false;
      if (!this.payState.equals(that.payState))
        return false;
    }

    boolean this_present_remainSeconds = true;
    boolean that_present_remainSeconds = true;
    if (this_present_remainSeconds || that_present_remainSeconds) {
      if (!(this_present_remainSeconds && that_present_remainSeconds))
        return false;
      if (this.remainSeconds != that.remainSeconds)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(OrderDetailResp other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetHead()).compareTo(other.isSetHead());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHead()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.head, other.head);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderItems()).compareTo(other.isSetOrderItems());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderItems()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderItems, other.orderItems);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInvestItems()).compareTo(other.isSetInvestItems());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvestItems()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.investItems, other.investItems);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductName()).compareTo(other.isSetProductName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productName, other.productName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAgreeItems()).compareTo(other.isSetAgreeItems());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgreeItems()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agreeItems, other.agreeItems);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayState()).compareTo(other.isSetPayState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payState, other.payState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemainSeconds()).compareTo(other.isSetRemainSeconds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemainSeconds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remainSeconds, other.remainSeconds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OrderDetailResp(");
    boolean first = true;

    sb.append("head:");
    if (this.head == null) {
      sb.append("null");
    } else {
      sb.append(this.head);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderItems:");
    if (this.orderItems == null) {
      sb.append("null");
    } else {
      sb.append(this.orderItems);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("investItems:");
    if (this.investItems == null) {
      sb.append("null");
    } else {
      sb.append(this.investItems);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productName:");
    if (this.productName == null) {
      sb.append("null");
    } else {
      sb.append(this.productName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("agreeItems:");
    if (this.agreeItems == null) {
      sb.append("null");
    } else {
      sb.append(this.agreeItems);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("payState:");
    if (this.payState == null) {
      sb.append("null");
    } else {
      sb.append(this.payState);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remainSeconds:");
    sb.append(this.remainSeconds);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (head != null) {
      head.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OrderDetailRespStandardSchemeFactory implements SchemeFactory {
    public OrderDetailRespStandardScheme getScheme() {
      return new OrderDetailRespStandardScheme();
    }
  }

  private static class OrderDetailRespStandardScheme extends StandardScheme<OrderDetailResp> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OrderDetailResp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HEAD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.head = new com.bangcar.app.mapi.base.MApiRespHead();
              struct.head.read(iprot);
              struct.setHeadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ORDER_ITEMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.orderItems = new ArrayList<com.bangcar.app.mapi.common.KV>(_list16.size);
                for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                {
                  com.bangcar.app.mapi.common.KV _elem18;
                  _elem18 = new com.bangcar.app.mapi.common.KV();
                  _elem18.read(iprot);
                  struct.orderItems.add(_elem18);
                }
                iprot.readListEnd();
              }
              struct.setOrderItemsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INVEST_ITEMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list19 = iprot.readListBegin();
                struct.investItems = new ArrayList<com.bangcar.app.mapi.common.KV>(_list19.size);
                for (int _i20 = 0; _i20 < _list19.size; ++_i20)
                {
                  com.bangcar.app.mapi.common.KV _elem21;
                  _elem21 = new com.bangcar.app.mapi.common.KV();
                  _elem21.read(iprot);
                  struct.investItems.add(_elem21);
                }
                iprot.readListEnd();
              }
              struct.setInvestItemsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PRODUCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productName = iprot.readString();
              struct.setProductNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.status = iprot.readString();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // AGREE_ITEMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list22 = iprot.readListBegin();
                struct.agreeItems = new ArrayList<com.bangcar.app.mapi.common.Agree>(_list22.size);
                for (int _i23 = 0; _i23 < _list22.size; ++_i23)
                {
                  com.bangcar.app.mapi.common.Agree _elem24;
                  _elem24 = new com.bangcar.app.mapi.common.Agree();
                  _elem24.read(iprot);
                  struct.agreeItems.add(_elem24);
                }
                iprot.readListEnd();
              }
              struct.setAgreeItemsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PAY_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.payState = com.bangcar.app.mapi.common.EPayState.findByValue(iprot.readI32());
              struct.setPayStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // REMAIN_SECONDS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.remainSeconds = iprot.readI32();
              struct.setRemainSecondsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OrderDetailResp struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.head != null) {
        oprot.writeFieldBegin(HEAD_FIELD_DESC);
        struct.head.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.orderItems != null) {
        oprot.writeFieldBegin(ORDER_ITEMS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.orderItems.size()));
          for (com.bangcar.app.mapi.common.KV _iter25 : struct.orderItems)
          {
            _iter25.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.investItems != null) {
        oprot.writeFieldBegin(INVEST_ITEMS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.investItems.size()));
          for (com.bangcar.app.mapi.common.KV _iter26 : struct.investItems)
          {
            _iter26.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.productName != null) {
        oprot.writeFieldBegin(PRODUCT_NAME_FIELD_DESC);
        oprot.writeString(struct.productName);
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeString(struct.status);
        oprot.writeFieldEnd();
      }
      if (struct.agreeItems != null) {
        oprot.writeFieldBegin(AGREE_ITEMS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.agreeItems.size()));
          for (com.bangcar.app.mapi.common.Agree _iter27 : struct.agreeItems)
          {
            _iter27.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      if (struct.payState != null) {
        oprot.writeFieldBegin(PAY_STATE_FIELD_DESC);
        oprot.writeI32(struct.payState.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REMAIN_SECONDS_FIELD_DESC);
      oprot.writeI32(struct.remainSeconds);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OrderDetailRespTupleSchemeFactory implements SchemeFactory {
    public OrderDetailRespTupleScheme getScheme() {
      return new OrderDetailRespTupleScheme();
    }
  }

  private static class OrderDetailRespTupleScheme extends TupleScheme<OrderDetailResp> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OrderDetailResp struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetHead()) {
        optionals.set(0);
      }
      if (struct.isSetOrderItems()) {
        optionals.set(1);
      }
      if (struct.isSetInvestItems()) {
        optionals.set(2);
      }
      if (struct.isSetProductName()) {
        optionals.set(3);
      }
      if (struct.isSetStatus()) {
        optionals.set(4);
      }
      if (struct.isSetAgreeItems()) {
        optionals.set(5);
      }
      if (struct.isSetPid()) {
        optionals.set(6);
      }
      if (struct.isSetPayState()) {
        optionals.set(7);
      }
      if (struct.isSetRemainSeconds()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetHead()) {
        struct.head.write(oprot);
      }
      if (struct.isSetOrderItems()) {
        {
          oprot.writeI32(struct.orderItems.size());
          for (com.bangcar.app.mapi.common.KV _iter28 : struct.orderItems)
          {
            _iter28.write(oprot);
          }
        }
      }
      if (struct.isSetInvestItems()) {
        {
          oprot.writeI32(struct.investItems.size());
          for (com.bangcar.app.mapi.common.KV _iter29 : struct.investItems)
          {
            _iter29.write(oprot);
          }
        }
      }
      if (struct.isSetProductName()) {
        oprot.writeString(struct.productName);
      }
      if (struct.isSetStatus()) {
        oprot.writeString(struct.status);
      }
      if (struct.isSetAgreeItems()) {
        {
          oprot.writeI32(struct.agreeItems.size());
          for (com.bangcar.app.mapi.common.Agree _iter30 : struct.agreeItems)
          {
            _iter30.write(oprot);
          }
        }
      }
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetPayState()) {
        oprot.writeI32(struct.payState.getValue());
      }
      if (struct.isSetRemainSeconds()) {
        oprot.writeI32(struct.remainSeconds);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OrderDetailResp struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.head = new com.bangcar.app.mapi.base.MApiRespHead();
        struct.head.read(iprot);
        struct.setHeadIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.orderItems = new ArrayList<com.bangcar.app.mapi.common.KV>(_list31.size);
          for (int _i32 = 0; _i32 < _list31.size; ++_i32)
          {
            com.bangcar.app.mapi.common.KV _elem33;
            _elem33 = new com.bangcar.app.mapi.common.KV();
            _elem33.read(iprot);
            struct.orderItems.add(_elem33);
          }
        }
        struct.setOrderItemsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list34 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.investItems = new ArrayList<com.bangcar.app.mapi.common.KV>(_list34.size);
          for (int _i35 = 0; _i35 < _list34.size; ++_i35)
          {
            com.bangcar.app.mapi.common.KV _elem36;
            _elem36 = new com.bangcar.app.mapi.common.KV();
            _elem36.read(iprot);
            struct.investItems.add(_elem36);
          }
        }
        struct.setInvestItemsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.productName = iprot.readString();
        struct.setProductNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.status = iprot.readString();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.agreeItems = new ArrayList<com.bangcar.app.mapi.common.Agree>(_list37.size);
          for (int _i38 = 0; _i38 < _list37.size; ++_i38)
          {
            com.bangcar.app.mapi.common.Agree _elem39;
            _elem39 = new com.bangcar.app.mapi.common.Agree();
            _elem39.read(iprot);
            struct.agreeItems.add(_elem39);
          }
        }
        struct.setAgreeItemsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(7)) {
        struct.payState = com.bangcar.app.mapi.common.EPayState.findByValue(iprot.readI32());
        struct.setPayStateIsSet(true);
      }
      if (incoming.get(8)) {
        struct.remainSeconds = iprot.readI32();
        struct.setRemainSecondsIsSet(true);
      }
    }
  }

}

