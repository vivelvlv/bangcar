/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.bangcar.app.mapi.order;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.EncodingUtils;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;

public class OrderListResp implements org.apache.thrift.TBase<OrderListResp, OrderListResp._Fields>, java.io.Serializable, Cloneable, Comparable<OrderListResp> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OrderListResp");

  private static final org.apache.thrift.protocol.TField HEAD_FIELD_DESC = new org.apache.thrift.protocol.TField("head", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField ORDERS_FIELD_DESC = new org.apache.thrift.protocol.TField("orders", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TOTAL_PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("totalPage", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField TOTAL_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("totalPrice", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField IN_RECENT_SETTLING_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("inRecentSettlingOrder", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField CORP_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("corpInfo", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField IS_HAVE_HISTORY_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("isHaveHistoryOrder", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField EXCEPT_INCOME_FIELD_DESC = new org.apache.thrift.protocol.TField("exceptIncome", org.apache.thrift.protocol.TType.STRING, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OrderListRespStandardSchemeFactory());
    schemes.put(TupleScheme.class, new OrderListRespTupleSchemeFactory());
  }

  public com.bangcar.app.mapi.base.MApiRespHead head; // required
  /**
   * 订单
   */
  public List<UserOrder> orders; // required
  /**
   * 当前页码
   */
  public int page; // required
  /**
   * 总页数
   */
  public int totalPage; // required
  /**
   * 再投金额
   */
  public String totalPrice; // required
  /**
   * 即将到期的订单
   */
  public InRecentSettlingOrder inRecentSettlingOrder; // required
  /**
   * 公司理财数据
   */
  public CorpInfo corpInfo; // required
  /**
   * 是否有历史订单
   */
  public boolean isHaveHistoryOrder; // required
  /**
   * 预期收益
   */
  public String exceptIncome; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HEAD((short)1, "head"),
    /**
     * 订单
     */
    ORDERS((short)2, "orders"),
    /**
     * 当前页码
     */
    PAGE((short)3, "page"),
    /**
     * 总页数
     */
    TOTAL_PAGE((short)4, "totalPage"),
    /**
     * 再投金额
     */
    TOTAL_PRICE((short)5, "totalPrice"),
    /**
     * 即将到期的订单
     */
    IN_RECENT_SETTLING_ORDER((short)6, "inRecentSettlingOrder"),
    /**
     * 公司理财数据
     */
    CORP_INFO((short)7, "corpInfo"),
    /**
     * 是否有历史订单
     */
    IS_HAVE_HISTORY_ORDER((short)8, "isHaveHistoryOrder"),
    /**
     * 预期收益
     */
    EXCEPT_INCOME((short)9, "exceptIncome");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HEAD
          return HEAD;
        case 2: // ORDERS
          return ORDERS;
        case 3: // PAGE
          return PAGE;
        case 4: // TOTAL_PAGE
          return TOTAL_PAGE;
        case 5: // TOTAL_PRICE
          return TOTAL_PRICE;
        case 6: // IN_RECENT_SETTLING_ORDER
          return IN_RECENT_SETTLING_ORDER;
        case 7: // CORP_INFO
          return CORP_INFO;
        case 8: // IS_HAVE_HISTORY_ORDER
          return IS_HAVE_HISTORY_ORDER;
        case 9: // EXCEPT_INCOME
          return EXCEPT_INCOME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PAGE_ISSET_ID = 0;
  private static final int __TOTALPAGE_ISSET_ID = 1;
  private static final int __ISHAVEHISTORYORDER_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HEAD, new org.apache.thrift.meta_data.FieldMetaData("head", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bangcar.app.mapi.base.MApiRespHead.class)));
    tmpMap.put(_Fields.ORDERS, new org.apache.thrift.meta_data.FieldMetaData("orders", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserOrder.class))));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_PAGE, new org.apache.thrift.meta_data.FieldMetaData("totalPage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_PRICE, new org.apache.thrift.meta_data.FieldMetaData("totalPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IN_RECENT_SETTLING_ORDER, new org.apache.thrift.meta_data.FieldMetaData("inRecentSettlingOrder", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InRecentSettlingOrder.class)));
    tmpMap.put(_Fields.CORP_INFO, new org.apache.thrift.meta_data.FieldMetaData("corpInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CorpInfo.class)));
    tmpMap.put(_Fields.IS_HAVE_HISTORY_ORDER, new org.apache.thrift.meta_data.FieldMetaData("isHaveHistoryOrder", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.EXCEPT_INCOME, new org.apache.thrift.meta_data.FieldMetaData("exceptIncome", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OrderListResp.class, metaDataMap);
  }

  public OrderListResp() {
  }

  public OrderListResp(
    com.bangcar.app.mapi.base.MApiRespHead head,
    List<UserOrder> orders,
    int page,
    int totalPage,
    String totalPrice,
    InRecentSettlingOrder inRecentSettlingOrder,
    CorpInfo corpInfo,
    boolean isHaveHistoryOrder,
    String exceptIncome)
  {
    this();
    this.head = head;
    this.orders = orders;
    this.page = page;
    setPageIsSet(true);
    this.totalPage = totalPage;
    setTotalPageIsSet(true);
    this.totalPrice = totalPrice;
    this.inRecentSettlingOrder = inRecentSettlingOrder;
    this.corpInfo = corpInfo;
    this.isHaveHistoryOrder = isHaveHistoryOrder;
    setIsHaveHistoryOrderIsSet(true);
    this.exceptIncome = exceptIncome;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OrderListResp(OrderListResp other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetHead()) {
      this.head = new com.bangcar.app.mapi.base.MApiRespHead(other.head);
    }
    if (other.isSetOrders()) {
      List<UserOrder> __this__orders = new ArrayList<UserOrder>(other.orders.size());
      for (UserOrder other_element : other.orders) {
        __this__orders.add(new UserOrder(other_element));
      }
      this.orders = __this__orders;
    }
    this.page = other.page;
    this.totalPage = other.totalPage;
    if (other.isSetTotalPrice()) {
      this.totalPrice = other.totalPrice;
    }
    if (other.isSetInRecentSettlingOrder()) {
      this.inRecentSettlingOrder = new InRecentSettlingOrder(other.inRecentSettlingOrder);
    }
    if (other.isSetCorpInfo()) {
      this.corpInfo = new CorpInfo(other.corpInfo);
    }
    this.isHaveHistoryOrder = other.isHaveHistoryOrder;
    if (other.isSetExceptIncome()) {
      this.exceptIncome = other.exceptIncome;
    }
  }

  public OrderListResp deepCopy() {
    return new OrderListResp(this);
  }

  @Override
  public void clear() {
    this.head = null;
    this.orders = null;
    setPageIsSet(false);
    this.page = 0;
    setTotalPageIsSet(false);
    this.totalPage = 0;
    this.totalPrice = null;
    this.inRecentSettlingOrder = null;
    this.corpInfo = null;
    setIsHaveHistoryOrderIsSet(false);
    this.isHaveHistoryOrder = false;
    this.exceptIncome = null;
  }

  public com.bangcar.app.mapi.base.MApiRespHead getHead() {
    return this.head;
  }

  public OrderListResp setHead(com.bangcar.app.mapi.base.MApiRespHead head) {
    this.head = head;
    return this;
  }

  public void unsetHead() {
    this.head = null;
  }

  /** Returns true if field head is set (has been assigned a value) and false otherwise */
  public boolean isSetHead() {
    return this.head != null;
  }

  public void setHeadIsSet(boolean value) {
    if (!value) {
      this.head = null;
    }
  }

  public int getOrdersSize() {
    return (this.orders == null) ? 0 : this.orders.size();
  }

  public java.util.Iterator<UserOrder> getOrdersIterator() {
    return (this.orders == null) ? null : this.orders.iterator();
  }

  public void addToOrders(UserOrder elem) {
    if (this.orders == null) {
      this.orders = new ArrayList<UserOrder>();
    }
    this.orders.add(elem);
  }

  /**
   * 订单
   */
  public List<UserOrder> getOrders() {
    return this.orders;
  }

  /**
   * 订单
   */
  public OrderListResp setOrders(List<UserOrder> orders) {
    this.orders = orders;
    return this;
  }

  public void unsetOrders() {
    this.orders = null;
  }

  /** Returns true if field orders is set (has been assigned a value) and false otherwise */
  public boolean isSetOrders() {
    return this.orders != null;
  }

  public void setOrdersIsSet(boolean value) {
    if (!value) {
      this.orders = null;
    }
  }

  /**
   * 当前页码
   */
  public int getPage() {
    return this.page;
  }

  /**
   * 当前页码
   */
  public OrderListResp setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  /**
   * 总页数
   */
  public int getTotalPage() {
    return this.totalPage;
  }

  /**
   * 总页数
   */
  public OrderListResp setTotalPage(int totalPage) {
    this.totalPage = totalPage;
    setTotalPageIsSet(true);
    return this;
  }

  public void unsetTotalPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALPAGE_ISSET_ID);
  }

  /** Returns true if field totalPage is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalPage() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALPAGE_ISSET_ID);
  }

  public void setTotalPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALPAGE_ISSET_ID, value);
  }

  /**
   * 再投金额
   */
  public String getTotalPrice() {
    return this.totalPrice;
  }

  /**
   * 再投金额
   */
  public OrderListResp setTotalPrice(String totalPrice) {
    this.totalPrice = totalPrice;
    return this;
  }

  public void unsetTotalPrice() {
    this.totalPrice = null;
  }

  /** Returns true if field totalPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalPrice() {
    return this.totalPrice != null;
  }

  public void setTotalPriceIsSet(boolean value) {
    if (!value) {
      this.totalPrice = null;
    }
  }

  /**
   * 即将到期的订单
   */
  public InRecentSettlingOrder getInRecentSettlingOrder() {
    return this.inRecentSettlingOrder;
  }

  /**
   * 即将到期的订单
   */
  public OrderListResp setInRecentSettlingOrder(InRecentSettlingOrder inRecentSettlingOrder) {
    this.inRecentSettlingOrder = inRecentSettlingOrder;
    return this;
  }

  public void unsetInRecentSettlingOrder() {
    this.inRecentSettlingOrder = null;
  }

  /** Returns true if field inRecentSettlingOrder is set (has been assigned a value) and false otherwise */
  public boolean isSetInRecentSettlingOrder() {
    return this.inRecentSettlingOrder != null;
  }

  public void setInRecentSettlingOrderIsSet(boolean value) {
    if (!value) {
      this.inRecentSettlingOrder = null;
    }
  }

  /**
   * 公司理财数据
   */
  public CorpInfo getCorpInfo() {
    return this.corpInfo;
  }

  /**
   * 公司理财数据
   */
  public OrderListResp setCorpInfo(CorpInfo corpInfo) {
    this.corpInfo = corpInfo;
    return this;
  }

  public void unsetCorpInfo() {
    this.corpInfo = null;
  }

  /** Returns true if field corpInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetCorpInfo() {
    return this.corpInfo != null;
  }

  public void setCorpInfoIsSet(boolean value) {
    if (!value) {
      this.corpInfo = null;
    }
  }

  /**
   * 是否有历史订单
   */
  public boolean isIsHaveHistoryOrder() {
    return this.isHaveHistoryOrder;
  }

  /**
   * 是否有历史订单
   */
  public OrderListResp setIsHaveHistoryOrder(boolean isHaveHistoryOrder) {
    this.isHaveHistoryOrder = isHaveHistoryOrder;
    setIsHaveHistoryOrderIsSet(true);
    return this;
  }

  public void unsetIsHaveHistoryOrder() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISHAVEHISTORYORDER_ISSET_ID);
  }

  /** Returns true if field isHaveHistoryOrder is set (has been assigned a value) and false otherwise */
  public boolean isSetIsHaveHistoryOrder() {
    return EncodingUtils.testBit(__isset_bitfield, __ISHAVEHISTORYORDER_ISSET_ID);
  }

  public void setIsHaveHistoryOrderIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISHAVEHISTORYORDER_ISSET_ID, value);
  }

  /**
   * 预期收益
   */
  public String getExceptIncome() {
    return this.exceptIncome;
  }

  /**
   * 预期收益
   */
  public OrderListResp setExceptIncome(String exceptIncome) {
    this.exceptIncome = exceptIncome;
    return this;
  }

  public void unsetExceptIncome() {
    this.exceptIncome = null;
  }

  /** Returns true if field exceptIncome is set (has been assigned a value) and false otherwise */
  public boolean isSetExceptIncome() {
    return this.exceptIncome != null;
  }

  public void setExceptIncomeIsSet(boolean value) {
    if (!value) {
      this.exceptIncome = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case HEAD:
      if (value == null) {
        unsetHead();
      } else {
        setHead((com.bangcar.app.mapi.base.MApiRespHead)value);
      }
      break;

    case ORDERS:
      if (value == null) {
        unsetOrders();
      } else {
        setOrders((List<UserOrder>)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case TOTAL_PAGE:
      if (value == null) {
        unsetTotalPage();
      } else {
        setTotalPage((Integer)value);
      }
      break;

    case TOTAL_PRICE:
      if (value == null) {
        unsetTotalPrice();
      } else {
        setTotalPrice((String)value);
      }
      break;

    case IN_RECENT_SETTLING_ORDER:
      if (value == null) {
        unsetInRecentSettlingOrder();
      } else {
        setInRecentSettlingOrder((InRecentSettlingOrder)value);
      }
      break;

    case CORP_INFO:
      if (value == null) {
        unsetCorpInfo();
      } else {
        setCorpInfo((CorpInfo)value);
      }
      break;

    case IS_HAVE_HISTORY_ORDER:
      if (value == null) {
        unsetIsHaveHistoryOrder();
      } else {
        setIsHaveHistoryOrder((Boolean)value);
      }
      break;

    case EXCEPT_INCOME:
      if (value == null) {
        unsetExceptIncome();
      } else {
        setExceptIncome((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case HEAD:
      return getHead();

    case ORDERS:
      return getOrders();

    case PAGE:
      return Integer.valueOf(getPage());

    case TOTAL_PAGE:
      return Integer.valueOf(getTotalPage());

    case TOTAL_PRICE:
      return getTotalPrice();

    case IN_RECENT_SETTLING_ORDER:
      return getInRecentSettlingOrder();

    case CORP_INFO:
      return getCorpInfo();

    case IS_HAVE_HISTORY_ORDER:
      return Boolean.valueOf(isIsHaveHistoryOrder());

    case EXCEPT_INCOME:
      return getExceptIncome();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case HEAD:
      return isSetHead();
    case ORDERS:
      return isSetOrders();
    case PAGE:
      return isSetPage();
    case TOTAL_PAGE:
      return isSetTotalPage();
    case TOTAL_PRICE:
      return isSetTotalPrice();
    case IN_RECENT_SETTLING_ORDER:
      return isSetInRecentSettlingOrder();
    case CORP_INFO:
      return isSetCorpInfo();
    case IS_HAVE_HISTORY_ORDER:
      return isSetIsHaveHistoryOrder();
    case EXCEPT_INCOME:
      return isSetExceptIncome();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OrderListResp)
      return this.equals((OrderListResp)that);
    return false;
  }

  public boolean equals(OrderListResp that) {
    if (that == null)
      return false;

    boolean this_present_head = true && this.isSetHead();
    boolean that_present_head = true && that.isSetHead();
    if (this_present_head || that_present_head) {
      if (!(this_present_head && that_present_head))
        return false;
      if (!this.head.equals(that.head))
        return false;
    }

    boolean this_present_orders = true && this.isSetOrders();
    boolean that_present_orders = true && that.isSetOrders();
    if (this_present_orders || that_present_orders) {
      if (!(this_present_orders && that_present_orders))
        return false;
      if (!this.orders.equals(that.orders))
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_totalPage = true;
    boolean that_present_totalPage = true;
    if (this_present_totalPage || that_present_totalPage) {
      if (!(this_present_totalPage && that_present_totalPage))
        return false;
      if (this.totalPage != that.totalPage)
        return false;
    }

    boolean this_present_totalPrice = true && this.isSetTotalPrice();
    boolean that_present_totalPrice = true && that.isSetTotalPrice();
    if (this_present_totalPrice || that_present_totalPrice) {
      if (!(this_present_totalPrice && that_present_totalPrice))
        return false;
      if (!this.totalPrice.equals(that.totalPrice))
        return false;
    }

    boolean this_present_inRecentSettlingOrder = true && this.isSetInRecentSettlingOrder();
    boolean that_present_inRecentSettlingOrder = true && that.isSetInRecentSettlingOrder();
    if (this_present_inRecentSettlingOrder || that_present_inRecentSettlingOrder) {
      if (!(this_present_inRecentSettlingOrder && that_present_inRecentSettlingOrder))
        return false;
      if (!this.inRecentSettlingOrder.equals(that.inRecentSettlingOrder))
        return false;
    }

    boolean this_present_corpInfo = true && this.isSetCorpInfo();
    boolean that_present_corpInfo = true && that.isSetCorpInfo();
    if (this_present_corpInfo || that_present_corpInfo) {
      if (!(this_present_corpInfo && that_present_corpInfo))
        return false;
      if (!this.corpInfo.equals(that.corpInfo))
        return false;
    }

    boolean this_present_isHaveHistoryOrder = true;
    boolean that_present_isHaveHistoryOrder = true;
    if (this_present_isHaveHistoryOrder || that_present_isHaveHistoryOrder) {
      if (!(this_present_isHaveHistoryOrder && that_present_isHaveHistoryOrder))
        return false;
      if (this.isHaveHistoryOrder != that.isHaveHistoryOrder)
        return false;
    }

    boolean this_present_exceptIncome = true && this.isSetExceptIncome();
    boolean that_present_exceptIncome = true && that.isSetExceptIncome();
    if (this_present_exceptIncome || that_present_exceptIncome) {
      if (!(this_present_exceptIncome && that_present_exceptIncome))
        return false;
      if (!this.exceptIncome.equals(that.exceptIncome))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(OrderListResp other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetHead()).compareTo(other.isSetHead());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHead()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.head, other.head);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrders()).compareTo(other.isSetOrders());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrders()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orders, other.orders);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalPage()).compareTo(other.isSetTotalPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalPage, other.totalPage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalPrice()).compareTo(other.isSetTotalPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalPrice, other.totalPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInRecentSettlingOrder()).compareTo(other.isSetInRecentSettlingOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInRecentSettlingOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inRecentSettlingOrder, other.inRecentSettlingOrder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCorpInfo()).compareTo(other.isSetCorpInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCorpInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.corpInfo, other.corpInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsHaveHistoryOrder()).compareTo(other.isSetIsHaveHistoryOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsHaveHistoryOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isHaveHistoryOrder, other.isHaveHistoryOrder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExceptIncome()).compareTo(other.isSetExceptIncome());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExceptIncome()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exceptIncome, other.exceptIncome);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OrderListResp(");
    boolean first = true;

    sb.append("head:");
    if (this.head == null) {
      sb.append("null");
    } else {
      sb.append(this.head);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orders:");
    if (this.orders == null) {
      sb.append("null");
    } else {
      sb.append(this.orders);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalPage:");
    sb.append(this.totalPage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalPrice:");
    if (this.totalPrice == null) {
      sb.append("null");
    } else {
      sb.append(this.totalPrice);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("inRecentSettlingOrder:");
    if (this.inRecentSettlingOrder == null) {
      sb.append("null");
    } else {
      sb.append(this.inRecentSettlingOrder);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("corpInfo:");
    if (this.corpInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.corpInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isHaveHistoryOrder:");
    sb.append(this.isHaveHistoryOrder);
    first = false;
    if (!first) sb.append(", ");
    sb.append("exceptIncome:");
    if (this.exceptIncome == null) {
      sb.append("null");
    } else {
      sb.append(this.exceptIncome);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (head != null) {
      head.validate();
    }
    if (inRecentSettlingOrder != null) {
      inRecentSettlingOrder.validate();
    }
    if (corpInfo != null) {
      corpInfo.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OrderListRespStandardSchemeFactory implements SchemeFactory {
    public OrderListRespStandardScheme getScheme() {
      return new OrderListRespStandardScheme();
    }
  }

  private static class OrderListRespStandardScheme extends StandardScheme<OrderListResp> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OrderListResp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HEAD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.head = new com.bangcar.app.mapi.base.MApiRespHead();
              struct.head.read(iprot);
              struct.setHeadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ORDERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.orders = new ArrayList<UserOrder>(_list8.size);
                for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                {
                  UserOrder _elem10;
                  _elem10 = new UserOrder();
                  _elem10.read(iprot);
                  struct.orders.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setOrdersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TOTAL_PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalPage = iprot.readI32();
              struct.setTotalPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TOTAL_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.totalPrice = iprot.readString();
              struct.setTotalPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IN_RECENT_SETTLING_ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.inRecentSettlingOrder = new InRecentSettlingOrder();
              struct.inRecentSettlingOrder.read(iprot);
              struct.setInRecentSettlingOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CORP_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.corpInfo = new CorpInfo();
              struct.corpInfo.read(iprot);
              struct.setCorpInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IS_HAVE_HISTORY_ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isHaveHistoryOrder = iprot.readBool();
              struct.setIsHaveHistoryOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // EXCEPT_INCOME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exceptIncome = iprot.readString();
              struct.setExceptIncomeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OrderListResp struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.head != null) {
        oprot.writeFieldBegin(HEAD_FIELD_DESC);
        struct.head.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.orders != null) {
        oprot.writeFieldBegin(ORDERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.orders.size()));
          for (UserOrder _iter11 : struct.orders)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_PAGE_FIELD_DESC);
      oprot.writeI32(struct.totalPage);
      oprot.writeFieldEnd();
      if (struct.totalPrice != null) {
        oprot.writeFieldBegin(TOTAL_PRICE_FIELD_DESC);
        oprot.writeString(struct.totalPrice);
        oprot.writeFieldEnd();
      }
      if (struct.inRecentSettlingOrder != null) {
        oprot.writeFieldBegin(IN_RECENT_SETTLING_ORDER_FIELD_DESC);
        struct.inRecentSettlingOrder.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.corpInfo != null) {
        oprot.writeFieldBegin(CORP_INFO_FIELD_DESC);
        struct.corpInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_HAVE_HISTORY_ORDER_FIELD_DESC);
      oprot.writeBool(struct.isHaveHistoryOrder);
      oprot.writeFieldEnd();
      if (struct.exceptIncome != null) {
        oprot.writeFieldBegin(EXCEPT_INCOME_FIELD_DESC);
        oprot.writeString(struct.exceptIncome);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OrderListRespTupleSchemeFactory implements SchemeFactory {
    public OrderListRespTupleScheme getScheme() {
      return new OrderListRespTupleScheme();
    }
  }

  private static class OrderListRespTupleScheme extends TupleScheme<OrderListResp> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OrderListResp struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetHead()) {
        optionals.set(0);
      }
      if (struct.isSetOrders()) {
        optionals.set(1);
      }
      if (struct.isSetPage()) {
        optionals.set(2);
      }
      if (struct.isSetTotalPage()) {
        optionals.set(3);
      }
      if (struct.isSetTotalPrice()) {
        optionals.set(4);
      }
      if (struct.isSetInRecentSettlingOrder()) {
        optionals.set(5);
      }
      if (struct.isSetCorpInfo()) {
        optionals.set(6);
      }
      if (struct.isSetIsHaveHistoryOrder()) {
        optionals.set(7);
      }
      if (struct.isSetExceptIncome()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetHead()) {
        struct.head.write(oprot);
      }
      if (struct.isSetOrders()) {
        {
          oprot.writeI32(struct.orders.size());
          for (UserOrder _iter12 : struct.orders)
          {
            _iter12.write(oprot);
          }
        }
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetTotalPage()) {
        oprot.writeI32(struct.totalPage);
      }
      if (struct.isSetTotalPrice()) {
        oprot.writeString(struct.totalPrice);
      }
      if (struct.isSetInRecentSettlingOrder()) {
        struct.inRecentSettlingOrder.write(oprot);
      }
      if (struct.isSetCorpInfo()) {
        struct.corpInfo.write(oprot);
      }
      if (struct.isSetIsHaveHistoryOrder()) {
        oprot.writeBool(struct.isHaveHistoryOrder);
      }
      if (struct.isSetExceptIncome()) {
        oprot.writeString(struct.exceptIncome);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OrderListResp struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.head = new com.bangcar.app.mapi.base.MApiRespHead();
        struct.head.read(iprot);
        struct.setHeadIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.orders = new ArrayList<UserOrder>(_list13.size);
          for (int _i14 = 0; _i14 < _list13.size; ++_i14)
          {
            UserOrder _elem15;
            _elem15 = new UserOrder();
            _elem15.read(iprot);
            struct.orders.add(_elem15);
          }
        }
        struct.setOrdersIsSet(true);
      }
      if (incoming.get(2)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(3)) {
        struct.totalPage = iprot.readI32();
        struct.setTotalPageIsSet(true);
      }
      if (incoming.get(4)) {
        struct.totalPrice = iprot.readString();
        struct.setTotalPriceIsSet(true);
      }
      if (incoming.get(5)) {
        struct.inRecentSettlingOrder = new InRecentSettlingOrder();
        struct.inRecentSettlingOrder.read(iprot);
        struct.setInRecentSettlingOrderIsSet(true);
      }
      if (incoming.get(6)) {
        struct.corpInfo = new CorpInfo();
        struct.corpInfo.read(iprot);
        struct.setCorpInfoIsSet(true);
      }
      if (incoming.get(7)) {
        struct.isHaveHistoryOrder = iprot.readBool();
        struct.setIsHaveHistoryOrderIsSet(true);
      }
      if (incoming.get(8)) {
        struct.exceptIncome = iprot.readString();
        struct.setExceptIncomeIsSet(true);
      }
    }
  }

}

