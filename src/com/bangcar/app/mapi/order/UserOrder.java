/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.bangcar.app.mapi.order;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;

public class UserOrder implements org.apache.thrift.TBase<UserOrder, UserOrder._Fields>, java.io.Serializable, Cloneable, Comparable<UserOrder> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserOrder");

  private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PRODUCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("productName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DETAIL_ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("detailItems", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField DATE_ITEM_FIELD_DESC = new org.apache.thrift.protocol.TField("dateItem", org.apache.thrift.protocol.TType.STRUCT, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserOrderStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserOrderTupleSchemeFactory());
  }

  /**
   * 订单ID
   */
  public String orderId; // required
  /**
   * 产品名
   */
  public String productName; // required
  /**
   * 状态描述
   */
  public String status; // required
  public List<com.bangcar.app.mapi.common.KV> detailItems; // required
  public com.bangcar.app.mapi.common.KV dateItem; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 订单ID
     */
    ORDER_ID((short)1, "orderId"),
    /**
     * 产品名
     */
    PRODUCT_NAME((short)2, "productName"),
    /**
     * 状态描述
     */
    STATUS((short)3, "status"),
    DETAIL_ITEMS((short)4, "detailItems"),
    DATE_ITEM((short)5, "dateItem");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORDER_ID
          return ORDER_ID;
        case 2: // PRODUCT_NAME
          return PRODUCT_NAME;
        case 3: // STATUS
          return STATUS;
        case 4: // DETAIL_ITEMS
          return DETAIL_ITEMS;
        case 5: // DATE_ITEM
          return DATE_ITEM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("productName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DETAIL_ITEMS, new org.apache.thrift.meta_data.FieldMetaData("detailItems", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bangcar.app.mapi.common.KV.class))));
    tmpMap.put(_Fields.DATE_ITEM, new org.apache.thrift.meta_data.FieldMetaData("dateItem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bangcar.app.mapi.common.KV.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserOrder.class, metaDataMap);
  }

  public UserOrder() {
  }

  public UserOrder(
    String orderId,
    String productName,
    String status,
    List<com.bangcar.app.mapi.common.KV> detailItems,
    com.bangcar.app.mapi.common.KV dateItem)
  {
    this();
    this.orderId = orderId;
    this.productName = productName;
    this.status = status;
    this.detailItems = detailItems;
    this.dateItem = dateItem;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserOrder(UserOrder other) {
    if (other.isSetOrderId()) {
      this.orderId = other.orderId;
    }
    if (other.isSetProductName()) {
      this.productName = other.productName;
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetDetailItems()) {
      List<com.bangcar.app.mapi.common.KV> __this__detailItems = new ArrayList<com.bangcar.app.mapi.common.KV>(other.detailItems.size());
      for (com.bangcar.app.mapi.common.KV other_element : other.detailItems) {
        __this__detailItems.add(new com.bangcar.app.mapi.common.KV(other_element));
      }
      this.detailItems = __this__detailItems;
    }
    if (other.isSetDateItem()) {
      this.dateItem = new com.bangcar.app.mapi.common.KV(other.dateItem);
    }
  }

  public UserOrder deepCopy() {
    return new UserOrder(this);
  }

  @Override
  public void clear() {
    this.orderId = null;
    this.productName = null;
    this.status = null;
    this.detailItems = null;
    this.dateItem = null;
  }

  /**
   * 订单ID
   */
  public String getOrderId() {
    return this.orderId;
  }

  /**
   * 订单ID
   */
  public UserOrder setOrderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

  public void unsetOrderId() {
    this.orderId = null;
  }

  /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderId() {
    return this.orderId != null;
  }

  public void setOrderIdIsSet(boolean value) {
    if (!value) {
      this.orderId = null;
    }
  }

  /**
   * 产品名
   */
  public String getProductName() {
    return this.productName;
  }

  /**
   * 产品名
   */
  public UserOrder setProductName(String productName) {
    this.productName = productName;
    return this;
  }

  public void unsetProductName() {
    this.productName = null;
  }

  /** Returns true if field productName is set (has been assigned a value) and false otherwise */
  public boolean isSetProductName() {
    return this.productName != null;
  }

  public void setProductNameIsSet(boolean value) {
    if (!value) {
      this.productName = null;
    }
  }

  /**
   * 状态描述
   */
  public String getStatus() {
    return this.status;
  }

  /**
   * 状态描述
   */
  public UserOrder setStatus(String status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public int getDetailItemsSize() {
    return (this.detailItems == null) ? 0 : this.detailItems.size();
  }

  public java.util.Iterator<com.bangcar.app.mapi.common.KV> getDetailItemsIterator() {
    return (this.detailItems == null) ? null : this.detailItems.iterator();
  }

  public void addToDetailItems(com.bangcar.app.mapi.common.KV elem) {
    if (this.detailItems == null) {
      this.detailItems = new ArrayList<com.bangcar.app.mapi.common.KV>();
    }
    this.detailItems.add(elem);
  }

  public List<com.bangcar.app.mapi.common.KV> getDetailItems() {
    return this.detailItems;
  }

  public UserOrder setDetailItems(List<com.bangcar.app.mapi.common.KV> detailItems) {
    this.detailItems = detailItems;
    return this;
  }

  public void unsetDetailItems() {
    this.detailItems = null;
  }

  /** Returns true if field detailItems is set (has been assigned a value) and false otherwise */
  public boolean isSetDetailItems() {
    return this.detailItems != null;
  }

  public void setDetailItemsIsSet(boolean value) {
    if (!value) {
      this.detailItems = null;
    }
  }

  public com.bangcar.app.mapi.common.KV getDateItem() {
    return this.dateItem;
  }

  public UserOrder setDateItem(com.bangcar.app.mapi.common.KV dateItem) {
    this.dateItem = dateItem;
    return this;
  }

  public void unsetDateItem() {
    this.dateItem = null;
  }

  /** Returns true if field dateItem is set (has been assigned a value) and false otherwise */
  public boolean isSetDateItem() {
    return this.dateItem != null;
  }

  public void setDateItemIsSet(boolean value) {
    if (!value) {
      this.dateItem = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ORDER_ID:
      if (value == null) {
        unsetOrderId();
      } else {
        setOrderId((String)value);
      }
      break;

    case PRODUCT_NAME:
      if (value == null) {
        unsetProductName();
      } else {
        setProductName((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((String)value);
      }
      break;

    case DETAIL_ITEMS:
      if (value == null) {
        unsetDetailItems();
      } else {
        setDetailItems((List<com.bangcar.app.mapi.common.KV>)value);
      }
      break;

    case DATE_ITEM:
      if (value == null) {
        unsetDateItem();
      } else {
        setDateItem((com.bangcar.app.mapi.common.KV)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ORDER_ID:
      return getOrderId();

    case PRODUCT_NAME:
      return getProductName();

    case STATUS:
      return getStatus();

    case DETAIL_ITEMS:
      return getDetailItems();

    case DATE_ITEM:
      return getDateItem();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ORDER_ID:
      return isSetOrderId();
    case PRODUCT_NAME:
      return isSetProductName();
    case STATUS:
      return isSetStatus();
    case DETAIL_ITEMS:
      return isSetDetailItems();
    case DATE_ITEM:
      return isSetDateItem();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserOrder)
      return this.equals((UserOrder)that);
    return false;
  }

  public boolean equals(UserOrder that) {
    if (that == null)
      return false;

    boolean this_present_orderId = true && this.isSetOrderId();
    boolean that_present_orderId = true && that.isSetOrderId();
    if (this_present_orderId || that_present_orderId) {
      if (!(this_present_orderId && that_present_orderId))
        return false;
      if (!this.orderId.equals(that.orderId))
        return false;
    }

    boolean this_present_productName = true && this.isSetProductName();
    boolean that_present_productName = true && that.isSetProductName();
    if (this_present_productName || that_present_productName) {
      if (!(this_present_productName && that_present_productName))
        return false;
      if (!this.productName.equals(that.productName))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_detailItems = true && this.isSetDetailItems();
    boolean that_present_detailItems = true && that.isSetDetailItems();
    if (this_present_detailItems || that_present_detailItems) {
      if (!(this_present_detailItems && that_present_detailItems))
        return false;
      if (!this.detailItems.equals(that.detailItems))
        return false;
    }

    boolean this_present_dateItem = true && this.isSetDateItem();
    boolean that_present_dateItem = true && that.isSetDateItem();
    if (this_present_dateItem || that_present_dateItem) {
      if (!(this_present_dateItem && that_present_dateItem))
        return false;
      if (!this.dateItem.equals(that.dateItem))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(UserOrder other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductName()).compareTo(other.isSetProductName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productName, other.productName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDetailItems()).compareTo(other.isSetDetailItems());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDetailItems()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.detailItems, other.detailItems);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDateItem()).compareTo(other.isSetDateItem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDateItem()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateItem, other.dateItem);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserOrder(");
    boolean first = true;

    sb.append("orderId:");
    if (this.orderId == null) {
      sb.append("null");
    } else {
      sb.append(this.orderId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productName:");
    if (this.productName == null) {
      sb.append("null");
    } else {
      sb.append(this.productName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("detailItems:");
    if (this.detailItems == null) {
      sb.append("null");
    } else {
      sb.append(this.detailItems);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dateItem:");
    if (this.dateItem == null) {
      sb.append("null");
    } else {
      sb.append(this.dateItem);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (dateItem != null) {
      dateItem.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserOrderStandardSchemeFactory implements SchemeFactory {
    public UserOrderStandardScheme getScheme() {
      return new UserOrderStandardScheme();
    }
  }

  private static class UserOrderStandardScheme extends StandardScheme<UserOrder> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserOrder struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderId = iprot.readString();
              struct.setOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PRODUCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productName = iprot.readString();
              struct.setProductNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.status = iprot.readString();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DETAIL_ITEMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.detailItems = new ArrayList<com.bangcar.app.mapi.common.KV>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  com.bangcar.app.mapi.common.KV _elem2;
                  _elem2 = new com.bangcar.app.mapi.common.KV();
                  _elem2.read(iprot);
                  struct.detailItems.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setDetailItemsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DATE_ITEM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.dateItem = new com.bangcar.app.mapi.common.KV();
              struct.dateItem.read(iprot);
              struct.setDateItemIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserOrder struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.orderId != null) {
        oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
        oprot.writeString(struct.orderId);
        oprot.writeFieldEnd();
      }
      if (struct.productName != null) {
        oprot.writeFieldBegin(PRODUCT_NAME_FIELD_DESC);
        oprot.writeString(struct.productName);
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeString(struct.status);
        oprot.writeFieldEnd();
      }
      if (struct.detailItems != null) {
        oprot.writeFieldBegin(DETAIL_ITEMS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.detailItems.size()));
          for (com.bangcar.app.mapi.common.KV _iter3 : struct.detailItems)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.dateItem != null) {
        oprot.writeFieldBegin(DATE_ITEM_FIELD_DESC);
        struct.dateItem.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserOrderTupleSchemeFactory implements SchemeFactory {
    public UserOrderTupleScheme getScheme() {
      return new UserOrderTupleScheme();
    }
  }

  private static class UserOrderTupleScheme extends TupleScheme<UserOrder> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserOrder struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOrderId()) {
        optionals.set(0);
      }
      if (struct.isSetProductName()) {
        optionals.set(1);
      }
      if (struct.isSetStatus()) {
        optionals.set(2);
      }
      if (struct.isSetDetailItems()) {
        optionals.set(3);
      }
      if (struct.isSetDateItem()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetOrderId()) {
        oprot.writeString(struct.orderId);
      }
      if (struct.isSetProductName()) {
        oprot.writeString(struct.productName);
      }
      if (struct.isSetStatus()) {
        oprot.writeString(struct.status);
      }
      if (struct.isSetDetailItems()) {
        {
          oprot.writeI32(struct.detailItems.size());
          for (com.bangcar.app.mapi.common.KV _iter4 : struct.detailItems)
          {
            _iter4.write(oprot);
          }
        }
      }
      if (struct.isSetDateItem()) {
        struct.dateItem.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserOrder struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.orderId = iprot.readString();
        struct.setOrderIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.productName = iprot.readString();
        struct.setProductNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.status = iprot.readString();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.detailItems = new ArrayList<com.bangcar.app.mapi.common.KV>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            com.bangcar.app.mapi.common.KV _elem7;
            _elem7 = new com.bangcar.app.mapi.common.KV();
            _elem7.read(iprot);
            struct.detailItems.add(_elem7);
          }
        }
        struct.setDetailItemsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.dateItem = new com.bangcar.app.mapi.common.KV();
        struct.dateItem.read(iprot);
        struct.setDateItemIsSet(true);
      }
    }
  }

}

