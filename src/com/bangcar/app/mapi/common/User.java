/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.bangcar.app.mapi.common;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.EncodingUtils;

import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;

public class User implements org.apache.thrift.TBase<User, User._Fields>, java.io.Serializable, Cloneable, Comparable<User> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("User");

  private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField EMAIL_VERIFIED_FIELD_DESC = new org.apache.thrift.protocol.TField("emailVerified", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobile", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CORP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("corpId", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField IS_RESET_PWD_FIELD_DESC = new org.apache.thrift.protocol.TField("isResetPwd", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ID_CARD_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("idCardNo", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField AVATAR_FIELD_DESC = new org.apache.thrift.protocol.TField("avatar", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField CORP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("corpName", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField INVITE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("inviteType", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField AUTH_STEP_FIELD_DESC = new org.apache.thrift.protocol.TField("authStep", org.apache.thrift.protocol.TType.I32, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserTupleSchemeFactory());
  }

  /**
   * 用户ID
   */
  public int uid; // required
  /**
   * 用户EMail
   */
  public String email; // required
  /**
   * 是否已验证Email
   */
  public int emailVerified; // required
  /**
   * 手机号
   */
  public String mobile; // required
  /**
   * 用户公司ID
   */
  public int corpId; // required
  /**
   * 是否已重置密码
   */
  public int isResetPwd; // required
  /**
   * 用户名字
   */
  public String name; // required
  /**
   * 用户身份证号
   */
  public String idCardNo; // required
  /**
   * 用户头像
   */
  public String avatar; // required
  /**
   * 用户公司名称
   */
  public String corpName; // required
  /**
   * 邀请类型
   * 
   * @see EInviteType
   */
  public EInviteType inviteType; // required
  /**
   * 用户认证阶段
   * 
   * @see EAuthStep
   */
  public EAuthStep authStep; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 用户ID
     */
    UID((short)1, "uid"),
    /**
     * 用户EMail
     */
    EMAIL((short)2, "email"),
    /**
     * 是否已验证Email
     */
    EMAIL_VERIFIED((short)3, "emailVerified"),
    /**
     * 手机号
     */
    MOBILE((short)4, "mobile"),
    /**
     * 用户公司ID
     */
    CORP_ID((short)5, "corpId"),
    /**
     * 是否已重置密码
     */
    IS_RESET_PWD((short)6, "isResetPwd"),
    /**
     * 用户名字
     */
    NAME((short)7, "name"),
    /**
     * 用户身份证号
     */
    ID_CARD_NO((short)8, "idCardNo"),
    /**
     * 用户头像
     */
    AVATAR((short)9, "avatar"),
    /**
     * 用户公司名称
     */
    CORP_NAME((short)10, "corpName"),
    /**
     * 邀请类型
     * 
     * @see EInviteType
     */
    INVITE_TYPE((short)11, "inviteType"),
    /**
     * 用户认证阶段
     * 
     * @see EAuthStep
     */
    AUTH_STEP((short)12, "authStep");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UID
          return UID;
        case 2: // EMAIL
          return EMAIL;
        case 3: // EMAIL_VERIFIED
          return EMAIL_VERIFIED;
        case 4: // MOBILE
          return MOBILE;
        case 5: // CORP_ID
          return CORP_ID;
        case 6: // IS_RESET_PWD
          return IS_RESET_PWD;
        case 7: // NAME
          return NAME;
        case 8: // ID_CARD_NO
          return ID_CARD_NO;
        case 9: // AVATAR
          return AVATAR;
        case 10: // CORP_NAME
          return CORP_NAME;
        case 11: // INVITE_TYPE
          return INVITE_TYPE;
        case 12: // AUTH_STEP
          return AUTH_STEP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __UID_ISSET_ID = 0;
  private static final int __EMAILVERIFIED_ISSET_ID = 1;
  private static final int __CORPID_ISSET_ID = 2;
  private static final int __ISRESETPWD_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMAIL_VERIFIED, new org.apache.thrift.meta_data.FieldMetaData("emailVerified", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MOBILE, new org.apache.thrift.meta_data.FieldMetaData("mobile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CORP_ID, new org.apache.thrift.meta_data.FieldMetaData("corpId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_RESET_PWD, new org.apache.thrift.meta_data.FieldMetaData("isResetPwd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ID_CARD_NO, new org.apache.thrift.meta_data.FieldMetaData("idCardNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AVATAR, new org.apache.thrift.meta_data.FieldMetaData("avatar", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CORP_NAME, new org.apache.thrift.meta_data.FieldMetaData("corpName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INVITE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("inviteType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EInviteType.class)));
    tmpMap.put(_Fields.AUTH_STEP, new org.apache.thrift.meta_data.FieldMetaData("authStep", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EAuthStep.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(User.class, metaDataMap);
  }

  public User() {
  }

  public User(
    int uid,
    String email,
    int emailVerified,
    String mobile,
    int corpId,
    int isResetPwd,
    String name,
    String idCardNo,
    String avatar,
    String corpName,
    EInviteType inviteType,
    EAuthStep authStep)
  {
    this();
    this.uid = uid;
    setUidIsSet(true);
    this.email = email;
    this.emailVerified = emailVerified;
    setEmailVerifiedIsSet(true);
    this.mobile = mobile;
    this.corpId = corpId;
    setCorpIdIsSet(true);
    this.isResetPwd = isResetPwd;
    setIsResetPwdIsSet(true);
    this.name = name;
    this.idCardNo = idCardNo;
    this.avatar = avatar;
    this.corpName = corpName;
    this.inviteType = inviteType;
    this.authStep = authStep;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public User(User other) {
    __isset_bitfield = other.__isset_bitfield;
    this.uid = other.uid;
    if (other.isSetEmail()) {
      this.email = other.email;
    }
    this.emailVerified = other.emailVerified;
    if (other.isSetMobile()) {
      this.mobile = other.mobile;
    }
    this.corpId = other.corpId;
    this.isResetPwd = other.isResetPwd;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetIdCardNo()) {
      this.idCardNo = other.idCardNo;
    }
    if (other.isSetAvatar()) {
      this.avatar = other.avatar;
    }
    if (other.isSetCorpName()) {
      this.corpName = other.corpName;
    }
    if (other.isSetInviteType()) {
      this.inviteType = other.inviteType;
    }
    if (other.isSetAuthStep()) {
      this.authStep = other.authStep;
    }
  }

  public User deepCopy() {
    return new User(this);
  }

  @Override
  public void clear() {
    setUidIsSet(false);
    this.uid = 0;
    this.email = null;
    setEmailVerifiedIsSet(false);
    this.emailVerified = 0;
    this.mobile = null;
    setCorpIdIsSet(false);
    this.corpId = 0;
    setIsResetPwdIsSet(false);
    this.isResetPwd = 0;
    this.name = null;
    this.idCardNo = null;
    this.avatar = null;
    this.corpName = null;
    this.inviteType = null;
    this.authStep = null;
  }

  /**
   * 用户ID
   */
  public int getUid() {
    return this.uid;
  }

  /**
   * 用户ID
   */
  public User setUid(int uid) {
    this.uid = uid;
    setUidIsSet(true);
    return this;
  }

  public void unsetUid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
  }

  /** Returns true if field uid is set (has been assigned a value) and false otherwise */
  public boolean isSetUid() {
    return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
  }

  public void setUidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
  }

  /**
   * 用户EMail
   */
  public String getEmail() {
    return this.email;
  }

  /**
   * 用户EMail
   */
  public User setEmail(String email) {
    this.email = email;
    return this;
  }

  public void unsetEmail() {
    this.email = null;
  }

  /** Returns true if field email is set (has been assigned a value) and false otherwise */
  public boolean isSetEmail() {
    return this.email != null;
  }

  public void setEmailIsSet(boolean value) {
    if (!value) {
      this.email = null;
    }
  }

  /**
   * 是否已验证Email
   */
  public int getEmailVerified() {
    return this.emailVerified;
  }

  /**
   * 是否已验证Email
   */
  public User setEmailVerified(int emailVerified) {
    this.emailVerified = emailVerified;
    setEmailVerifiedIsSet(true);
    return this;
  }

  public void unsetEmailVerified() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EMAILVERIFIED_ISSET_ID);
  }

  /** Returns true if field emailVerified is set (has been assigned a value) and false otherwise */
  public boolean isSetEmailVerified() {
    return EncodingUtils.testBit(__isset_bitfield, __EMAILVERIFIED_ISSET_ID);
  }

  public void setEmailVerifiedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EMAILVERIFIED_ISSET_ID, value);
  }

  /**
   * 手机号
   */
  public String getMobile() {
    return this.mobile;
  }

  /**
   * 手机号
   */
  public User setMobile(String mobile) {
    this.mobile = mobile;
    return this;
  }

  public void unsetMobile() {
    this.mobile = null;
  }

  /** Returns true if field mobile is set (has been assigned a value) and false otherwise */
  public boolean isSetMobile() {
    return this.mobile != null;
  }

  public void setMobileIsSet(boolean value) {
    if (!value) {
      this.mobile = null;
    }
  }

  /**
   * 用户公司ID
   */
  public int getCorpId() {
    return this.corpId;
  }

  /**
   * 用户公司ID
   */
  public User setCorpId(int corpId) {
    this.corpId = corpId;
    setCorpIdIsSet(true);
    return this;
  }

  public void unsetCorpId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CORPID_ISSET_ID);
  }

  /** Returns true if field corpId is set (has been assigned a value) and false otherwise */
  public boolean isSetCorpId() {
    return EncodingUtils.testBit(__isset_bitfield, __CORPID_ISSET_ID);
  }

  public void setCorpIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CORPID_ISSET_ID, value);
  }

  /**
   * 是否已重置密码
   */
  public int getIsResetPwd() {
    return this.isResetPwd;
  }

  /**
   * 是否已重置密码
   */
  public User setIsResetPwd(int isResetPwd) {
    this.isResetPwd = isResetPwd;
    setIsResetPwdIsSet(true);
    return this;
  }

  public void unsetIsResetPwd() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISRESETPWD_ISSET_ID);
  }

  /** Returns true if field isResetPwd is set (has been assigned a value) and false otherwise */
  public boolean isSetIsResetPwd() {
    return EncodingUtils.testBit(__isset_bitfield, __ISRESETPWD_ISSET_ID);
  }

  public void setIsResetPwdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISRESETPWD_ISSET_ID, value);
  }

  /**
   * 用户名字
   */
  public String getName() {
    return this.name;
  }

  /**
   * 用户名字
   */
  public User setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  /**
   * 用户身份证号
   */
  public String getIdCardNo() {
    return this.idCardNo;
  }

  /**
   * 用户身份证号
   */
  public User setIdCardNo(String idCardNo) {
    this.idCardNo = idCardNo;
    return this;
  }

  public void unsetIdCardNo() {
    this.idCardNo = null;
  }

  /** Returns true if field idCardNo is set (has been assigned a value) and false otherwise */
  public boolean isSetIdCardNo() {
    return this.idCardNo != null;
  }

  public void setIdCardNoIsSet(boolean value) {
    if (!value) {
      this.idCardNo = null;
    }
  }

  /**
   * 用户头像
   */
  public String getAvatar() {
    return this.avatar;
  }

  /**
   * 用户头像
   */
  public User setAvatar(String avatar) {
    this.avatar = avatar;
    return this;
  }

  public void unsetAvatar() {
    this.avatar = null;
  }

  /** Returns true if field avatar is set (has been assigned a value) and false otherwise */
  public boolean isSetAvatar() {
    return this.avatar != null;
  }

  public void setAvatarIsSet(boolean value) {
    if (!value) {
      this.avatar = null;
    }
  }

  /**
   * 用户公司名称
   */
  public String getCorpName() {
    return this.corpName;
  }

  /**
   * 用户公司名称
   */
  public User setCorpName(String corpName) {
    this.corpName = corpName;
    return this;
  }

  public void unsetCorpName() {
    this.corpName = null;
  }

  /** Returns true if field corpName is set (has been assigned a value) and false otherwise */
  public boolean isSetCorpName() {
    return this.corpName != null;
  }

  public void setCorpNameIsSet(boolean value) {
    if (!value) {
      this.corpName = null;
    }
  }

  /**
   * 邀请类型
   * 
   * @see EInviteType
   */
  public EInviteType getInviteType() {
    return this.inviteType;
  }

  /**
   * 邀请类型
   * 
   * @see EInviteType
   */
  public User setInviteType(EInviteType inviteType) {
    this.inviteType = inviteType;
    return this;
  }

  public void unsetInviteType() {
    this.inviteType = null;
  }

  /** Returns true if field inviteType is set (has been assigned a value) and false otherwise */
  public boolean isSetInviteType() {
    return this.inviteType != null;
  }

  public void setInviteTypeIsSet(boolean value) {
    if (!value) {
      this.inviteType = null;
    }
  }

  /**
   * 用户认证阶段
   * 
   * @see EAuthStep
   */
  public EAuthStep getAuthStep() {
    return this.authStep;
  }

  /**
   * 用户认证阶段
   * 
   * @see EAuthStep
   */
  public User setAuthStep(EAuthStep authStep) {
    this.authStep = authStep;
    return this;
  }

  public void unsetAuthStep() {
    this.authStep = null;
  }

  /** Returns true if field authStep is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthStep() {
    return this.authStep != null;
  }

  public void setAuthStepIsSet(boolean value) {
    if (!value) {
      this.authStep = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case UID:
      if (value == null) {
        unsetUid();
      } else {
        setUid((Integer)value);
      }
      break;

    case EMAIL:
      if (value == null) {
        unsetEmail();
      } else {
        setEmail((String)value);
      }
      break;

    case EMAIL_VERIFIED:
      if (value == null) {
        unsetEmailVerified();
      } else {
        setEmailVerified((Integer)value);
      }
      break;

    case MOBILE:
      if (value == null) {
        unsetMobile();
      } else {
        setMobile((String)value);
      }
      break;

    case CORP_ID:
      if (value == null) {
        unsetCorpId();
      } else {
        setCorpId((Integer)value);
      }
      break;

    case IS_RESET_PWD:
      if (value == null) {
        unsetIsResetPwd();
      } else {
        setIsResetPwd((Integer)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case ID_CARD_NO:
      if (value == null) {
        unsetIdCardNo();
      } else {
        setIdCardNo((String)value);
      }
      break;

    case AVATAR:
      if (value == null) {
        unsetAvatar();
      } else {
        setAvatar((String)value);
      }
      break;

    case CORP_NAME:
      if (value == null) {
        unsetCorpName();
      } else {
        setCorpName((String)value);
      }
      break;

    case INVITE_TYPE:
      if (value == null) {
        unsetInviteType();
      } else {
        setInviteType((EInviteType)value);
      }
      break;

    case AUTH_STEP:
      if (value == null) {
        unsetAuthStep();
      } else {
        setAuthStep((EAuthStep)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case UID:
      return Integer.valueOf(getUid());

    case EMAIL:
      return getEmail();

    case EMAIL_VERIFIED:
      return Integer.valueOf(getEmailVerified());

    case MOBILE:
      return getMobile();

    case CORP_ID:
      return Integer.valueOf(getCorpId());

    case IS_RESET_PWD:
      return Integer.valueOf(getIsResetPwd());

    case NAME:
      return getName();

    case ID_CARD_NO:
      return getIdCardNo();

    case AVATAR:
      return getAvatar();

    case CORP_NAME:
      return getCorpName();

    case INVITE_TYPE:
      return getInviteType();

    case AUTH_STEP:
      return getAuthStep();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case UID:
      return isSetUid();
    case EMAIL:
      return isSetEmail();
    case EMAIL_VERIFIED:
      return isSetEmailVerified();
    case MOBILE:
      return isSetMobile();
    case CORP_ID:
      return isSetCorpId();
    case IS_RESET_PWD:
      return isSetIsResetPwd();
    case NAME:
      return isSetName();
    case ID_CARD_NO:
      return isSetIdCardNo();
    case AVATAR:
      return isSetAvatar();
    case CORP_NAME:
      return isSetCorpName();
    case INVITE_TYPE:
      return isSetInviteType();
    case AUTH_STEP:
      return isSetAuthStep();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof User)
      return this.equals((User)that);
    return false;
  }

  public boolean equals(User that) {
    if (that == null)
      return false;

    boolean this_present_uid = true;
    boolean that_present_uid = true;
    if (this_present_uid || that_present_uid) {
      if (!(this_present_uid && that_present_uid))
        return false;
      if (this.uid != that.uid)
        return false;
    }

    boolean this_present_email = true && this.isSetEmail();
    boolean that_present_email = true && that.isSetEmail();
    if (this_present_email || that_present_email) {
      if (!(this_present_email && that_present_email))
        return false;
      if (!this.email.equals(that.email))
        return false;
    }

    boolean this_present_emailVerified = true;
    boolean that_present_emailVerified = true;
    if (this_present_emailVerified || that_present_emailVerified) {
      if (!(this_present_emailVerified && that_present_emailVerified))
        return false;
      if (this.emailVerified != that.emailVerified)
        return false;
    }

    boolean this_present_mobile = true && this.isSetMobile();
    boolean that_present_mobile = true && that.isSetMobile();
    if (this_present_mobile || that_present_mobile) {
      if (!(this_present_mobile && that_present_mobile))
        return false;
      if (!this.mobile.equals(that.mobile))
        return false;
    }

    boolean this_present_corpId = true;
    boolean that_present_corpId = true;
    if (this_present_corpId || that_present_corpId) {
      if (!(this_present_corpId && that_present_corpId))
        return false;
      if (this.corpId != that.corpId)
        return false;
    }

    boolean this_present_isResetPwd = true;
    boolean that_present_isResetPwd = true;
    if (this_present_isResetPwd || that_present_isResetPwd) {
      if (!(this_present_isResetPwd && that_present_isResetPwd))
        return false;
      if (this.isResetPwd != that.isResetPwd)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_idCardNo = true && this.isSetIdCardNo();
    boolean that_present_idCardNo = true && that.isSetIdCardNo();
    if (this_present_idCardNo || that_present_idCardNo) {
      if (!(this_present_idCardNo && that_present_idCardNo))
        return false;
      if (!this.idCardNo.equals(that.idCardNo))
        return false;
    }

    boolean this_present_avatar = true && this.isSetAvatar();
    boolean that_present_avatar = true && that.isSetAvatar();
    if (this_present_avatar || that_present_avatar) {
      if (!(this_present_avatar && that_present_avatar))
        return false;
      if (!this.avatar.equals(that.avatar))
        return false;
    }

    boolean this_present_corpName = true && this.isSetCorpName();
    boolean that_present_corpName = true && that.isSetCorpName();
    if (this_present_corpName || that_present_corpName) {
      if (!(this_present_corpName && that_present_corpName))
        return false;
      if (!this.corpName.equals(that.corpName))
        return false;
    }

    boolean this_present_inviteType = true && this.isSetInviteType();
    boolean that_present_inviteType = true && that.isSetInviteType();
    if (this_present_inviteType || that_present_inviteType) {
      if (!(this_present_inviteType && that_present_inviteType))
        return false;
      if (!this.inviteType.equals(that.inviteType))
        return false;
    }

    boolean this_present_authStep = true && this.isSetAuthStep();
    boolean that_present_authStep = true && that.isSetAuthStep();
    if (this_present_authStep || that_present_authStep) {
      if (!(this_present_authStep && that_present_authStep))
        return false;
      if (!this.authStep.equals(that.authStep))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(User other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmail()).compareTo(other.isSetEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, other.email);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmailVerified()).compareTo(other.isSetEmailVerified());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmailVerified()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emailVerified, other.emailVerified);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMobile()).compareTo(other.isSetMobile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMobile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobile, other.mobile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCorpId()).compareTo(other.isSetCorpId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCorpId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.corpId, other.corpId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsResetPwd()).compareTo(other.isSetIsResetPwd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsResetPwd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isResetPwd, other.isResetPwd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdCardNo()).compareTo(other.isSetIdCardNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdCardNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idCardNo, other.idCardNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAvatar()).compareTo(other.isSetAvatar());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvatar()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avatar, other.avatar);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCorpName()).compareTo(other.isSetCorpName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCorpName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.corpName, other.corpName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInviteType()).compareTo(other.isSetInviteType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInviteType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inviteType, other.inviteType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuthStep()).compareTo(other.isSetAuthStep());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthStep()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authStep, other.authStep);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("User(");
    boolean first = true;

    sb.append("uid:");
    sb.append(this.uid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("email:");
    if (this.email == null) {
      sb.append("null");
    } else {
      sb.append(this.email);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("emailVerified:");
    sb.append(this.emailVerified);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mobile:");
    if (this.mobile == null) {
      sb.append("null");
    } else {
      sb.append(this.mobile);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("corpId:");
    sb.append(this.corpId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isResetPwd:");
    sb.append(this.isResetPwd);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("idCardNo:");
    if (this.idCardNo == null) {
      sb.append("null");
    } else {
      sb.append(this.idCardNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("avatar:");
    if (this.avatar == null) {
      sb.append("null");
    } else {
      sb.append(this.avatar);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("corpName:");
    if (this.corpName == null) {
      sb.append("null");
    } else {
      sb.append(this.corpName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("inviteType:");
    if (this.inviteType == null) {
      sb.append("null");
    } else {
      sb.append(this.inviteType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("authStep:");
    if (this.authStep == null) {
      sb.append("null");
    } else {
      sb.append(this.authStep);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserStandardSchemeFactory implements SchemeFactory {
    public UserStandardScheme getScheme() {
      return new UserStandardScheme();
    }
  }

  private static class UserStandardScheme extends StandardScheme<User> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, User struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.uid = iprot.readI32();
              struct.setUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.email = iprot.readString();
              struct.setEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EMAIL_VERIFIED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.emailVerified = iprot.readI32();
              struct.setEmailVerifiedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MOBILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mobile = iprot.readString();
              struct.setMobileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CORP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.corpId = iprot.readI32();
              struct.setCorpIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IS_RESET_PWD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isResetPwd = iprot.readI32();
              struct.setIsResetPwdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ID_CARD_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.idCardNo = iprot.readString();
              struct.setIdCardNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // AVATAR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.avatar = iprot.readString();
              struct.setAvatarIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CORP_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.corpName = iprot.readString();
              struct.setCorpNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // INVITE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.inviteType = EInviteType.findByValue(iprot.readI32());
              struct.setInviteTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // AUTH_STEP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.authStep = EAuthStep.findByValue(iprot.readI32());
              struct.setAuthStepIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, User struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(UID_FIELD_DESC);
      oprot.writeI32(struct.uid);
      oprot.writeFieldEnd();
      if (struct.email != null) {
        oprot.writeFieldBegin(EMAIL_FIELD_DESC);
        oprot.writeString(struct.email);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(EMAIL_VERIFIED_FIELD_DESC);
      oprot.writeI32(struct.emailVerified);
      oprot.writeFieldEnd();
      if (struct.mobile != null) {
        oprot.writeFieldBegin(MOBILE_FIELD_DESC);
        oprot.writeString(struct.mobile);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CORP_ID_FIELD_DESC);
      oprot.writeI32(struct.corpId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_RESET_PWD_FIELD_DESC);
      oprot.writeI32(struct.isResetPwd);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.idCardNo != null) {
        oprot.writeFieldBegin(ID_CARD_NO_FIELD_DESC);
        oprot.writeString(struct.idCardNo);
        oprot.writeFieldEnd();
      }
      if (struct.avatar != null) {
        oprot.writeFieldBegin(AVATAR_FIELD_DESC);
        oprot.writeString(struct.avatar);
        oprot.writeFieldEnd();
      }
      if (struct.corpName != null) {
        oprot.writeFieldBegin(CORP_NAME_FIELD_DESC);
        oprot.writeString(struct.corpName);
        oprot.writeFieldEnd();
      }
      if (struct.inviteType != null) {
        oprot.writeFieldBegin(INVITE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.inviteType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.authStep != null) {
        oprot.writeFieldBegin(AUTH_STEP_FIELD_DESC);
        oprot.writeI32(struct.authStep.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserTupleSchemeFactory implements SchemeFactory {
    public UserTupleScheme getScheme() {
      return new UserTupleScheme();
    }
  }

  private static class UserTupleScheme extends TupleScheme<User> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, User struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUid()) {
        optionals.set(0);
      }
      if (struct.isSetEmail()) {
        optionals.set(1);
      }
      if (struct.isSetEmailVerified()) {
        optionals.set(2);
      }
      if (struct.isSetMobile()) {
        optionals.set(3);
      }
      if (struct.isSetCorpId()) {
        optionals.set(4);
      }
      if (struct.isSetIsResetPwd()) {
        optionals.set(5);
      }
      if (struct.isSetName()) {
        optionals.set(6);
      }
      if (struct.isSetIdCardNo()) {
        optionals.set(7);
      }
      if (struct.isSetAvatar()) {
        optionals.set(8);
      }
      if (struct.isSetCorpName()) {
        optionals.set(9);
      }
      if (struct.isSetInviteType()) {
        optionals.set(10);
      }
      if (struct.isSetAuthStep()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetUid()) {
        oprot.writeI32(struct.uid);
      }
      if (struct.isSetEmail()) {
        oprot.writeString(struct.email);
      }
      if (struct.isSetEmailVerified()) {
        oprot.writeI32(struct.emailVerified);
      }
      if (struct.isSetMobile()) {
        oprot.writeString(struct.mobile);
      }
      if (struct.isSetCorpId()) {
        oprot.writeI32(struct.corpId);
      }
      if (struct.isSetIsResetPwd()) {
        oprot.writeI32(struct.isResetPwd);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetIdCardNo()) {
        oprot.writeString(struct.idCardNo);
      }
      if (struct.isSetAvatar()) {
        oprot.writeString(struct.avatar);
      }
      if (struct.isSetCorpName()) {
        oprot.writeString(struct.corpName);
      }
      if (struct.isSetInviteType()) {
        oprot.writeI32(struct.inviteType.getValue());
      }
      if (struct.isSetAuthStep()) {
        oprot.writeI32(struct.authStep.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, User struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.uid = iprot.readI32();
        struct.setUidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.email = iprot.readString();
        struct.setEmailIsSet(true);
      }
      if (incoming.get(2)) {
        struct.emailVerified = iprot.readI32();
        struct.setEmailVerifiedIsSet(true);
      }
      if (incoming.get(3)) {
        struct.mobile = iprot.readString();
        struct.setMobileIsSet(true);
      }
      if (incoming.get(4)) {
        struct.corpId = iprot.readI32();
        struct.setCorpIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.isResetPwd = iprot.readI32();
        struct.setIsResetPwdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.idCardNo = iprot.readString();
        struct.setIdCardNoIsSet(true);
      }
      if (incoming.get(8)) {
        struct.avatar = iprot.readString();
        struct.setAvatarIsSet(true);
      }
      if (incoming.get(9)) {
        struct.corpName = iprot.readString();
        struct.setCorpNameIsSet(true);
      }
      if (incoming.get(10)) {
        struct.inviteType = EInviteType.findByValue(iprot.readI32());
        struct.setInviteTypeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.authStep = EAuthStep.findByValue(iprot.readI32());
        struct.setAuthStepIsSet(true);
      }
    }
  }

}

