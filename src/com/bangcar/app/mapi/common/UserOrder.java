/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.bangcar.app.mapi.common;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.EncodingUtils;

import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;

public class UserOrder implements org.apache.thrift.TBase<UserOrder, UserOrder._Fields>, java.io.Serializable, Cloneable, Comparable<UserOrder> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserOrder");

  private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TOTAL_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("totalPrice", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField INCOME_END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("incomeEndTime", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PAY_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("payState", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PRODUCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("productName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField REMAIN_SECONDS_FIELD_DESC = new org.apache.thrift.protocol.TField("remainSeconds", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField EXCEPT_INCOME_FIELD_DESC = new org.apache.thrift.protocol.TField("exceptIncome", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField EXCEPT_INCOME_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("exceptIncomeRate", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField ACTUAL_INCOME_FIELD_DESC = new org.apache.thrift.protocol.TField("actualIncome", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField ACTUAL_INCOME_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("actualIncomeRate", org.apache.thrift.protocol.TType.STRING, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserOrderStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserOrderTupleSchemeFactory());
  }

  /**
   * 订单ID
   */
  public String orderId; // required
  /**
   * 订单总金额
   */
  public String totalPrice; // required
  /**
   * 到期时间
   */
  public String incomeEndTime; // required
  /**
   * 支付状态
   * 
   * @see EPayState
   */
  public EPayState payState; // required
  /**
   * 订单状态描述
   */
  public String status; // required
  /**
   * 产品名
   */
  public String productName; // required
  /**
   * 剩余支付时间
   */
  public int remainSeconds; // required
  /**
   * 预计收益
   */
  public String exceptIncome; // required
  /**
   * 预计收益率
   */
  public String exceptIncomeRate; // required
  /**
   * 实际收益
   */
  public String actualIncome; // required
  /**
   * 实际收益率
   */
  public String actualIncomeRate; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 订单ID
     */
    ORDER_ID((short)1, "orderId"),
    /**
     * 订单总金额
     */
    TOTAL_PRICE((short)2, "totalPrice"),
    /**
     * 到期时间
     */
    INCOME_END_TIME((short)3, "incomeEndTime"),
    /**
     * 支付状态
     * 
     * @see EPayState
     */
    PAY_STATE((short)4, "payState"),
    /**
     * 订单状态描述
     */
    STATUS((short)5, "status"),
    /**
     * 产品名
     */
    PRODUCT_NAME((short)6, "productName"),
    /**
     * 剩余支付时间
     */
    REMAIN_SECONDS((short)7, "remainSeconds"),
    /**
     * 预计收益
     */
    EXCEPT_INCOME((short)8, "exceptIncome"),
    /**
     * 预计收益率
     */
    EXCEPT_INCOME_RATE((short)9, "exceptIncomeRate"),
    /**
     * 实际收益
     */
    ACTUAL_INCOME((short)10, "actualIncome"),
    /**
     * 实际收益率
     */
    ACTUAL_INCOME_RATE((short)11, "actualIncomeRate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORDER_ID
          return ORDER_ID;
        case 2: // TOTAL_PRICE
          return TOTAL_PRICE;
        case 3: // INCOME_END_TIME
          return INCOME_END_TIME;
        case 4: // PAY_STATE
          return PAY_STATE;
        case 5: // STATUS
          return STATUS;
        case 6: // PRODUCT_NAME
          return PRODUCT_NAME;
        case 7: // REMAIN_SECONDS
          return REMAIN_SECONDS;
        case 8: // EXCEPT_INCOME
          return EXCEPT_INCOME;
        case 9: // EXCEPT_INCOME_RATE
          return EXCEPT_INCOME_RATE;
        case 10: // ACTUAL_INCOME
          return ACTUAL_INCOME;
        case 11: // ACTUAL_INCOME_RATE
          return ACTUAL_INCOME_RATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REMAINSECONDS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_PRICE, new org.apache.thrift.meta_data.FieldMetaData("totalPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INCOME_END_TIME, new org.apache.thrift.meta_data.FieldMetaData("incomeEndTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAY_STATE, new org.apache.thrift.meta_data.FieldMetaData("payState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EPayState.class)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("productName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMAIN_SECONDS, new org.apache.thrift.meta_data.FieldMetaData("remainSeconds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXCEPT_INCOME, new org.apache.thrift.meta_data.FieldMetaData("exceptIncome", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXCEPT_INCOME_RATE, new org.apache.thrift.meta_data.FieldMetaData("exceptIncomeRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTUAL_INCOME, new org.apache.thrift.meta_data.FieldMetaData("actualIncome", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTUAL_INCOME_RATE, new org.apache.thrift.meta_data.FieldMetaData("actualIncomeRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserOrder.class, metaDataMap);
  }

  public UserOrder() {
  }

  public UserOrder(
    String orderId,
    String totalPrice,
    String incomeEndTime,
    EPayState payState,
    String status,
    String productName,
    int remainSeconds,
    String exceptIncome,
    String exceptIncomeRate,
    String actualIncome,
    String actualIncomeRate)
  {
    this();
    this.orderId = orderId;
    this.totalPrice = totalPrice;
    this.incomeEndTime = incomeEndTime;
    this.payState = payState;
    this.status = status;
    this.productName = productName;
    this.remainSeconds = remainSeconds;
    setRemainSecondsIsSet(true);
    this.exceptIncome = exceptIncome;
    this.exceptIncomeRate = exceptIncomeRate;
    this.actualIncome = actualIncome;
    this.actualIncomeRate = actualIncomeRate;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserOrder(UserOrder other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetOrderId()) {
      this.orderId = other.orderId;
    }
    if (other.isSetTotalPrice()) {
      this.totalPrice = other.totalPrice;
    }
    if (other.isSetIncomeEndTime()) {
      this.incomeEndTime = other.incomeEndTime;
    }
    if (other.isSetPayState()) {
      this.payState = other.payState;
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetProductName()) {
      this.productName = other.productName;
    }
    this.remainSeconds = other.remainSeconds;
    if (other.isSetExceptIncome()) {
      this.exceptIncome = other.exceptIncome;
    }
    if (other.isSetExceptIncomeRate()) {
      this.exceptIncomeRate = other.exceptIncomeRate;
    }
    if (other.isSetActualIncome()) {
      this.actualIncome = other.actualIncome;
    }
    if (other.isSetActualIncomeRate()) {
      this.actualIncomeRate = other.actualIncomeRate;
    }
  }

  public UserOrder deepCopy() {
    return new UserOrder(this);
  }

  @Override
  public void clear() {
    this.orderId = null;
    this.totalPrice = null;
    this.incomeEndTime = null;
    this.payState = null;
    this.status = null;
    this.productName = null;
    setRemainSecondsIsSet(false);
    this.remainSeconds = 0;
    this.exceptIncome = null;
    this.exceptIncomeRate = null;
    this.actualIncome = null;
    this.actualIncomeRate = null;
  }

  /**
   * 订单ID
   */
  public String getOrderId() {
    return this.orderId;
  }

  /**
   * 订单ID
   */
  public UserOrder setOrderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

  public void unsetOrderId() {
    this.orderId = null;
  }

  /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderId() {
    return this.orderId != null;
  }

  public void setOrderIdIsSet(boolean value) {
    if (!value) {
      this.orderId = null;
    }
  }

  /**
   * 订单总金额
   */
  public String getTotalPrice() {
    return this.totalPrice;
  }

  /**
   * 订单总金额
   */
  public UserOrder setTotalPrice(String totalPrice) {
    this.totalPrice = totalPrice;
    return this;
  }

  public void unsetTotalPrice() {
    this.totalPrice = null;
  }

  /** Returns true if field totalPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalPrice() {
    return this.totalPrice != null;
  }

  public void setTotalPriceIsSet(boolean value) {
    if (!value) {
      this.totalPrice = null;
    }
  }

  /**
   * 到期时间
   */
  public String getIncomeEndTime() {
    return this.incomeEndTime;
  }

  /**
   * 到期时间
   */
  public UserOrder setIncomeEndTime(String incomeEndTime) {
    this.incomeEndTime = incomeEndTime;
    return this;
  }

  public void unsetIncomeEndTime() {
    this.incomeEndTime = null;
  }

  /** Returns true if field incomeEndTime is set (has been assigned a value) and false otherwise */
  public boolean isSetIncomeEndTime() {
    return this.incomeEndTime != null;
  }

  public void setIncomeEndTimeIsSet(boolean value) {
    if (!value) {
      this.incomeEndTime = null;
    }
  }

  /**
   * 支付状态
   * 
   * @see EPayState
   */
  public EPayState getPayState() {
    return this.payState;
  }

  /**
   * 支付状态
   * 
   * @see EPayState
   */
  public UserOrder setPayState(EPayState payState) {
    this.payState = payState;
    return this;
  }

  public void unsetPayState() {
    this.payState = null;
  }

  /** Returns true if field payState is set (has been assigned a value) and false otherwise */
  public boolean isSetPayState() {
    return this.payState != null;
  }

  public void setPayStateIsSet(boolean value) {
    if (!value) {
      this.payState = null;
    }
  }

  /**
   * 订单状态描述
   */
  public String getStatus() {
    return this.status;
  }

  /**
   * 订单状态描述
   */
  public UserOrder setStatus(String status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  /**
   * 产品名
   */
  public String getProductName() {
    return this.productName;
  }

  /**
   * 产品名
   */
  public UserOrder setProductName(String productName) {
    this.productName = productName;
    return this;
  }

  public void unsetProductName() {
    this.productName = null;
  }

  /** Returns true if field productName is set (has been assigned a value) and false otherwise */
  public boolean isSetProductName() {
    return this.productName != null;
  }

  public void setProductNameIsSet(boolean value) {
    if (!value) {
      this.productName = null;
    }
  }

  /**
   * 剩余支付时间
   */
  public int getRemainSeconds() {
    return this.remainSeconds;
  }

  /**
   * 剩余支付时间
   */
  public UserOrder setRemainSeconds(int remainSeconds) {
    this.remainSeconds = remainSeconds;
    setRemainSecondsIsSet(true);
    return this;
  }

  public void unsetRemainSeconds() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REMAINSECONDS_ISSET_ID);
  }

  /** Returns true if field remainSeconds is set (has been assigned a value) and false otherwise */
  public boolean isSetRemainSeconds() {
    return EncodingUtils.testBit(__isset_bitfield, __REMAINSECONDS_ISSET_ID);
  }

  public void setRemainSecondsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REMAINSECONDS_ISSET_ID, value);
  }

  /**
   * 预计收益
   */
  public String getExceptIncome() {
    return this.exceptIncome;
  }

  /**
   * 预计收益
   */
  public UserOrder setExceptIncome(String exceptIncome) {
    this.exceptIncome = exceptIncome;
    return this;
  }

  public void unsetExceptIncome() {
    this.exceptIncome = null;
  }

  /** Returns true if field exceptIncome is set (has been assigned a value) and false otherwise */
  public boolean isSetExceptIncome() {
    return this.exceptIncome != null;
  }

  public void setExceptIncomeIsSet(boolean value) {
    if (!value) {
      this.exceptIncome = null;
    }
  }

  /**
   * 预计收益率
   */
  public String getExceptIncomeRate() {
    return this.exceptIncomeRate;
  }

  /**
   * 预计收益率
   */
  public UserOrder setExceptIncomeRate(String exceptIncomeRate) {
    this.exceptIncomeRate = exceptIncomeRate;
    return this;
  }

  public void unsetExceptIncomeRate() {
    this.exceptIncomeRate = null;
  }

  /** Returns true if field exceptIncomeRate is set (has been assigned a value) and false otherwise */
  public boolean isSetExceptIncomeRate() {
    return this.exceptIncomeRate != null;
  }

  public void setExceptIncomeRateIsSet(boolean value) {
    if (!value) {
      this.exceptIncomeRate = null;
    }
  }

  /**
   * 实际收益
   */
  public String getActualIncome() {
    return this.actualIncome;
  }

  /**
   * 实际收益
   */
  public UserOrder setActualIncome(String actualIncome) {
    this.actualIncome = actualIncome;
    return this;
  }

  public void unsetActualIncome() {
    this.actualIncome = null;
  }

  /** Returns true if field actualIncome is set (has been assigned a value) and false otherwise */
  public boolean isSetActualIncome() {
    return this.actualIncome != null;
  }

  public void setActualIncomeIsSet(boolean value) {
    if (!value) {
      this.actualIncome = null;
    }
  }

  /**
   * 实际收益率
   */
  public String getActualIncomeRate() {
    return this.actualIncomeRate;
  }

  /**
   * 实际收益率
   */
  public UserOrder setActualIncomeRate(String actualIncomeRate) {
    this.actualIncomeRate = actualIncomeRate;
    return this;
  }

  public void unsetActualIncomeRate() {
    this.actualIncomeRate = null;
  }

  /** Returns true if field actualIncomeRate is set (has been assigned a value) and false otherwise */
  public boolean isSetActualIncomeRate() {
    return this.actualIncomeRate != null;
  }

  public void setActualIncomeRateIsSet(boolean value) {
    if (!value) {
      this.actualIncomeRate = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ORDER_ID:
      if (value == null) {
        unsetOrderId();
      } else {
        setOrderId((String)value);
      }
      break;

    case TOTAL_PRICE:
      if (value == null) {
        unsetTotalPrice();
      } else {
        setTotalPrice((String)value);
      }
      break;

    case INCOME_END_TIME:
      if (value == null) {
        unsetIncomeEndTime();
      } else {
        setIncomeEndTime((String)value);
      }
      break;

    case PAY_STATE:
      if (value == null) {
        unsetPayState();
      } else {
        setPayState((EPayState)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((String)value);
      }
      break;

    case PRODUCT_NAME:
      if (value == null) {
        unsetProductName();
      } else {
        setProductName((String)value);
      }
      break;

    case REMAIN_SECONDS:
      if (value == null) {
        unsetRemainSeconds();
      } else {
        setRemainSeconds((Integer)value);
      }
      break;

    case EXCEPT_INCOME:
      if (value == null) {
        unsetExceptIncome();
      } else {
        setExceptIncome((String)value);
      }
      break;

    case EXCEPT_INCOME_RATE:
      if (value == null) {
        unsetExceptIncomeRate();
      } else {
        setExceptIncomeRate((String)value);
      }
      break;

    case ACTUAL_INCOME:
      if (value == null) {
        unsetActualIncome();
      } else {
        setActualIncome((String)value);
      }
      break;

    case ACTUAL_INCOME_RATE:
      if (value == null) {
        unsetActualIncomeRate();
      } else {
        setActualIncomeRate((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ORDER_ID:
      return getOrderId();

    case TOTAL_PRICE:
      return getTotalPrice();

    case INCOME_END_TIME:
      return getIncomeEndTime();

    case PAY_STATE:
      return getPayState();

    case STATUS:
      return getStatus();

    case PRODUCT_NAME:
      return getProductName();

    case REMAIN_SECONDS:
      return Integer.valueOf(getRemainSeconds());

    case EXCEPT_INCOME:
      return getExceptIncome();

    case EXCEPT_INCOME_RATE:
      return getExceptIncomeRate();

    case ACTUAL_INCOME:
      return getActualIncome();

    case ACTUAL_INCOME_RATE:
      return getActualIncomeRate();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ORDER_ID:
      return isSetOrderId();
    case TOTAL_PRICE:
      return isSetTotalPrice();
    case INCOME_END_TIME:
      return isSetIncomeEndTime();
    case PAY_STATE:
      return isSetPayState();
    case STATUS:
      return isSetStatus();
    case PRODUCT_NAME:
      return isSetProductName();
    case REMAIN_SECONDS:
      return isSetRemainSeconds();
    case EXCEPT_INCOME:
      return isSetExceptIncome();
    case EXCEPT_INCOME_RATE:
      return isSetExceptIncomeRate();
    case ACTUAL_INCOME:
      return isSetActualIncome();
    case ACTUAL_INCOME_RATE:
      return isSetActualIncomeRate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserOrder)
      return this.equals((UserOrder)that);
    return false;
  }

  public boolean equals(UserOrder that) {
    if (that == null)
      return false;

    boolean this_present_orderId = true && this.isSetOrderId();
    boolean that_present_orderId = true && that.isSetOrderId();
    if (this_present_orderId || that_present_orderId) {
      if (!(this_present_orderId && that_present_orderId))
        return false;
      if (!this.orderId.equals(that.orderId))
        return false;
    }

    boolean this_present_totalPrice = true && this.isSetTotalPrice();
    boolean that_present_totalPrice = true && that.isSetTotalPrice();
    if (this_present_totalPrice || that_present_totalPrice) {
      if (!(this_present_totalPrice && that_present_totalPrice))
        return false;
      if (!this.totalPrice.equals(that.totalPrice))
        return false;
    }

    boolean this_present_incomeEndTime = true && this.isSetIncomeEndTime();
    boolean that_present_incomeEndTime = true && that.isSetIncomeEndTime();
    if (this_present_incomeEndTime || that_present_incomeEndTime) {
      if (!(this_present_incomeEndTime && that_present_incomeEndTime))
        return false;
      if (!this.incomeEndTime.equals(that.incomeEndTime))
        return false;
    }

    boolean this_present_payState = true && this.isSetPayState();
    boolean that_present_payState = true && that.isSetPayState();
    if (this_present_payState || that_present_payState) {
      if (!(this_present_payState && that_present_payState))
        return false;
      if (!this.payState.equals(that.payState))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_productName = true && this.isSetProductName();
    boolean that_present_productName = true && that.isSetProductName();
    if (this_present_productName || that_present_productName) {
      if (!(this_present_productName && that_present_productName))
        return false;
      if (!this.productName.equals(that.productName))
        return false;
    }

    boolean this_present_remainSeconds = true;
    boolean that_present_remainSeconds = true;
    if (this_present_remainSeconds || that_present_remainSeconds) {
      if (!(this_present_remainSeconds && that_present_remainSeconds))
        return false;
      if (this.remainSeconds != that.remainSeconds)
        return false;
    }

    boolean this_present_exceptIncome = true && this.isSetExceptIncome();
    boolean that_present_exceptIncome = true && that.isSetExceptIncome();
    if (this_present_exceptIncome || that_present_exceptIncome) {
      if (!(this_present_exceptIncome && that_present_exceptIncome))
        return false;
      if (!this.exceptIncome.equals(that.exceptIncome))
        return false;
    }

    boolean this_present_exceptIncomeRate = true && this.isSetExceptIncomeRate();
    boolean that_present_exceptIncomeRate = true && that.isSetExceptIncomeRate();
    if (this_present_exceptIncomeRate || that_present_exceptIncomeRate) {
      if (!(this_present_exceptIncomeRate && that_present_exceptIncomeRate))
        return false;
      if (!this.exceptIncomeRate.equals(that.exceptIncomeRate))
        return false;
    }

    boolean this_present_actualIncome = true && this.isSetActualIncome();
    boolean that_present_actualIncome = true && that.isSetActualIncome();
    if (this_present_actualIncome || that_present_actualIncome) {
      if (!(this_present_actualIncome && that_present_actualIncome))
        return false;
      if (!this.actualIncome.equals(that.actualIncome))
        return false;
    }

    boolean this_present_actualIncomeRate = true && this.isSetActualIncomeRate();
    boolean that_present_actualIncomeRate = true && that.isSetActualIncomeRate();
    if (this_present_actualIncomeRate || that_present_actualIncomeRate) {
      if (!(this_present_actualIncomeRate && that_present_actualIncomeRate))
        return false;
      if (!this.actualIncomeRate.equals(that.actualIncomeRate))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(UserOrder other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalPrice()).compareTo(other.isSetTotalPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalPrice, other.totalPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncomeEndTime()).compareTo(other.isSetIncomeEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncomeEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.incomeEndTime, other.incomeEndTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayState()).compareTo(other.isSetPayState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payState, other.payState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductName()).compareTo(other.isSetProductName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productName, other.productName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemainSeconds()).compareTo(other.isSetRemainSeconds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemainSeconds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remainSeconds, other.remainSeconds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExceptIncome()).compareTo(other.isSetExceptIncome());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExceptIncome()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exceptIncome, other.exceptIncome);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExceptIncomeRate()).compareTo(other.isSetExceptIncomeRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExceptIncomeRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exceptIncomeRate, other.exceptIncomeRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActualIncome()).compareTo(other.isSetActualIncome());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActualIncome()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actualIncome, other.actualIncome);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActualIncomeRate()).compareTo(other.isSetActualIncomeRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActualIncomeRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actualIncomeRate, other.actualIncomeRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserOrder(");
    boolean first = true;

    sb.append("orderId:");
    if (this.orderId == null) {
      sb.append("null");
    } else {
      sb.append(this.orderId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalPrice:");
    if (this.totalPrice == null) {
      sb.append("null");
    } else {
      sb.append(this.totalPrice);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("incomeEndTime:");
    if (this.incomeEndTime == null) {
      sb.append("null");
    } else {
      sb.append(this.incomeEndTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("payState:");
    if (this.payState == null) {
      sb.append("null");
    } else {
      sb.append(this.payState);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productName:");
    if (this.productName == null) {
      sb.append("null");
    } else {
      sb.append(this.productName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remainSeconds:");
    sb.append(this.remainSeconds);
    first = false;
    if (!first) sb.append(", ");
    sb.append("exceptIncome:");
    if (this.exceptIncome == null) {
      sb.append("null");
    } else {
      sb.append(this.exceptIncome);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("exceptIncomeRate:");
    if (this.exceptIncomeRate == null) {
      sb.append("null");
    } else {
      sb.append(this.exceptIncomeRate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("actualIncome:");
    if (this.actualIncome == null) {
      sb.append("null");
    } else {
      sb.append(this.actualIncome);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("actualIncomeRate:");
    if (this.actualIncomeRate == null) {
      sb.append("null");
    } else {
      sb.append(this.actualIncomeRate);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserOrderStandardSchemeFactory implements SchemeFactory {
    public UserOrderStandardScheme getScheme() {
      return new UserOrderStandardScheme();
    }
  }

  private static class UserOrderStandardScheme extends StandardScheme<UserOrder> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserOrder struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderId = iprot.readString();
              struct.setOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TOTAL_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.totalPrice = iprot.readString();
              struct.setTotalPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INCOME_END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.incomeEndTime = iprot.readString();
              struct.setIncomeEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PAY_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.payState = EPayState.findByValue(iprot.readI32());
              struct.setPayStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.status = iprot.readString();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PRODUCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productName = iprot.readString();
              struct.setProductNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REMAIN_SECONDS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.remainSeconds = iprot.readI32();
              struct.setRemainSecondsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // EXCEPT_INCOME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exceptIncome = iprot.readString();
              struct.setExceptIncomeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // EXCEPT_INCOME_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exceptIncomeRate = iprot.readString();
              struct.setExceptIncomeRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ACTUAL_INCOME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.actualIncome = iprot.readString();
              struct.setActualIncomeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ACTUAL_INCOME_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.actualIncomeRate = iprot.readString();
              struct.setActualIncomeRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserOrder struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.orderId != null) {
        oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
        oprot.writeString(struct.orderId);
        oprot.writeFieldEnd();
      }
      if (struct.totalPrice != null) {
        oprot.writeFieldBegin(TOTAL_PRICE_FIELD_DESC);
        oprot.writeString(struct.totalPrice);
        oprot.writeFieldEnd();
      }
      if (struct.incomeEndTime != null) {
        oprot.writeFieldBegin(INCOME_END_TIME_FIELD_DESC);
        oprot.writeString(struct.incomeEndTime);
        oprot.writeFieldEnd();
      }
      if (struct.payState != null) {
        oprot.writeFieldBegin(PAY_STATE_FIELD_DESC);
        oprot.writeI32(struct.payState.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeString(struct.status);
        oprot.writeFieldEnd();
      }
      if (struct.productName != null) {
        oprot.writeFieldBegin(PRODUCT_NAME_FIELD_DESC);
        oprot.writeString(struct.productName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REMAIN_SECONDS_FIELD_DESC);
      oprot.writeI32(struct.remainSeconds);
      oprot.writeFieldEnd();
      if (struct.exceptIncome != null) {
        oprot.writeFieldBegin(EXCEPT_INCOME_FIELD_DESC);
        oprot.writeString(struct.exceptIncome);
        oprot.writeFieldEnd();
      }
      if (struct.exceptIncomeRate != null) {
        oprot.writeFieldBegin(EXCEPT_INCOME_RATE_FIELD_DESC);
        oprot.writeString(struct.exceptIncomeRate);
        oprot.writeFieldEnd();
      }
      if (struct.actualIncome != null) {
        oprot.writeFieldBegin(ACTUAL_INCOME_FIELD_DESC);
        oprot.writeString(struct.actualIncome);
        oprot.writeFieldEnd();
      }
      if (struct.actualIncomeRate != null) {
        oprot.writeFieldBegin(ACTUAL_INCOME_RATE_FIELD_DESC);
        oprot.writeString(struct.actualIncomeRate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserOrderTupleSchemeFactory implements SchemeFactory {
    public UserOrderTupleScheme getScheme() {
      return new UserOrderTupleScheme();
    }
  }

  private static class UserOrderTupleScheme extends TupleScheme<UserOrder> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserOrder struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOrderId()) {
        optionals.set(0);
      }
      if (struct.isSetTotalPrice()) {
        optionals.set(1);
      }
      if (struct.isSetIncomeEndTime()) {
        optionals.set(2);
      }
      if (struct.isSetPayState()) {
        optionals.set(3);
      }
      if (struct.isSetStatus()) {
        optionals.set(4);
      }
      if (struct.isSetProductName()) {
        optionals.set(5);
      }
      if (struct.isSetRemainSeconds()) {
        optionals.set(6);
      }
      if (struct.isSetExceptIncome()) {
        optionals.set(7);
      }
      if (struct.isSetExceptIncomeRate()) {
        optionals.set(8);
      }
      if (struct.isSetActualIncome()) {
        optionals.set(9);
      }
      if (struct.isSetActualIncomeRate()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetOrderId()) {
        oprot.writeString(struct.orderId);
      }
      if (struct.isSetTotalPrice()) {
        oprot.writeString(struct.totalPrice);
      }
      if (struct.isSetIncomeEndTime()) {
        oprot.writeString(struct.incomeEndTime);
      }
      if (struct.isSetPayState()) {
        oprot.writeI32(struct.payState.getValue());
      }
      if (struct.isSetStatus()) {
        oprot.writeString(struct.status);
      }
      if (struct.isSetProductName()) {
        oprot.writeString(struct.productName);
      }
      if (struct.isSetRemainSeconds()) {
        oprot.writeI32(struct.remainSeconds);
      }
      if (struct.isSetExceptIncome()) {
        oprot.writeString(struct.exceptIncome);
      }
      if (struct.isSetExceptIncomeRate()) {
        oprot.writeString(struct.exceptIncomeRate);
      }
      if (struct.isSetActualIncome()) {
        oprot.writeString(struct.actualIncome);
      }
      if (struct.isSetActualIncomeRate()) {
        oprot.writeString(struct.actualIncomeRate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserOrder struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.orderId = iprot.readString();
        struct.setOrderIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.totalPrice = iprot.readString();
        struct.setTotalPriceIsSet(true);
      }
      if (incoming.get(2)) {
        struct.incomeEndTime = iprot.readString();
        struct.setIncomeEndTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.payState = EPayState.findByValue(iprot.readI32());
        struct.setPayStateIsSet(true);
      }
      if (incoming.get(4)) {
        struct.status = iprot.readString();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(5)) {
        struct.productName = iprot.readString();
        struct.setProductNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.remainSeconds = iprot.readI32();
        struct.setRemainSecondsIsSet(true);
      }
      if (incoming.get(7)) {
        struct.exceptIncome = iprot.readString();
        struct.setExceptIncomeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.exceptIncomeRate = iprot.readString();
        struct.setExceptIncomeRateIsSet(true);
      }
      if (incoming.get(9)) {
        struct.actualIncome = iprot.readString();
        struct.setActualIncomeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.actualIncomeRate = iprot.readString();
        struct.setActualIncomeRateIsSet(true);
      }
    }
  }

}

