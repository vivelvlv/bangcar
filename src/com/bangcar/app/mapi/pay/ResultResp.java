/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.bangcar.app.mapi.pay;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;

public class ResultResp implements org.apache.thrift.TBase<ResultResp, ResultResp._Fields>, java.io.Serializable, Cloneable, Comparable<ResultResp> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ResultResp");

  private static final org.apache.thrift.protocol.TField HEAD_FIELD_DESC = new org.apache.thrift.protocol.TField("head", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField PAY_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("payState", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField FAIL_REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("failReason", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ORDER_ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("orderItems", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField INVEST_ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("investItems", org.apache.thrift.protocol.TType.LIST, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ResultRespStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ResultRespTupleSchemeFactory());
  }

  public com.bangcar.app.mapi.base.MApiRespHead head; // required
  /**
   * 支付状态
   * 
   * @see com.bangcar.app.mapi.common.EPayState
   */
  public com.bangcar.app.mapi.common.EPayState payState; // required
  /**
   * 失败原因，为空时不展示原因内容
   */
  public String failReason; // required
  /**
   * 订单信息
   */
  public List<com.bangcar.app.mapi.common.KV> orderItems; // required
  /**
   * 投资人信息
   */
  public List<com.bangcar.app.mapi.common.KV> investItems; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HEAD((short)1, "head"),
    /**
     * 支付状态
     * 
     * @see com.bangcar.app.mapi.common.EPayState
     */
    PAY_STATE((short)2, "payState"),
    /**
     * 失败原因，为空时不展示原因内容
     */
    FAIL_REASON((short)3, "failReason"),
    /**
     * 订单信息
     */
    ORDER_ITEMS((short)4, "orderItems"),
    /**
     * 投资人信息
     */
    INVEST_ITEMS((short)5, "investItems");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HEAD
          return HEAD;
        case 2: // PAY_STATE
          return PAY_STATE;
        case 3: // FAIL_REASON
          return FAIL_REASON;
        case 4: // ORDER_ITEMS
          return ORDER_ITEMS;
        case 5: // INVEST_ITEMS
          return INVEST_ITEMS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HEAD, new org.apache.thrift.meta_data.FieldMetaData("head", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bangcar.app.mapi.base.MApiRespHead.class)));
    tmpMap.put(_Fields.PAY_STATE, new org.apache.thrift.meta_data.FieldMetaData("payState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.bangcar.app.mapi.common.EPayState.class)));
    tmpMap.put(_Fields.FAIL_REASON, new org.apache.thrift.meta_data.FieldMetaData("failReason", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_ITEMS, new org.apache.thrift.meta_data.FieldMetaData("orderItems", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bangcar.app.mapi.common.KV.class))));
    tmpMap.put(_Fields.INVEST_ITEMS, new org.apache.thrift.meta_data.FieldMetaData("investItems", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bangcar.app.mapi.common.KV.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ResultResp.class, metaDataMap);
  }

  public ResultResp() {
  }

  public ResultResp(
    com.bangcar.app.mapi.base.MApiRespHead head,
    com.bangcar.app.mapi.common.EPayState payState,
    String failReason,
    List<com.bangcar.app.mapi.common.KV> orderItems,
    List<com.bangcar.app.mapi.common.KV> investItems)
  {
    this();
    this.head = head;
    this.payState = payState;
    this.failReason = failReason;
    this.orderItems = orderItems;
    this.investItems = investItems;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ResultResp(ResultResp other) {
    if (other.isSetHead()) {
      this.head = new com.bangcar.app.mapi.base.MApiRespHead(other.head);
    }
    if (other.isSetPayState()) {
      this.payState = other.payState;
    }
    if (other.isSetFailReason()) {
      this.failReason = other.failReason;
    }
    if (other.isSetOrderItems()) {
      List<com.bangcar.app.mapi.common.KV> __this__orderItems = new ArrayList<com.bangcar.app.mapi.common.KV>(other.orderItems.size());
      for (com.bangcar.app.mapi.common.KV other_element : other.orderItems) {
        __this__orderItems.add(new com.bangcar.app.mapi.common.KV(other_element));
      }
      this.orderItems = __this__orderItems;
    }
    if (other.isSetInvestItems()) {
      List<com.bangcar.app.mapi.common.KV> __this__investItems = new ArrayList<com.bangcar.app.mapi.common.KV>(other.investItems.size());
      for (com.bangcar.app.mapi.common.KV other_element : other.investItems) {
        __this__investItems.add(new com.bangcar.app.mapi.common.KV(other_element));
      }
      this.investItems = __this__investItems;
    }
  }

  public ResultResp deepCopy() {
    return new ResultResp(this);
  }

  @Override
  public void clear() {
    this.head = null;
    this.payState = null;
    this.failReason = null;
    this.orderItems = null;
    this.investItems = null;
  }

  public com.bangcar.app.mapi.base.MApiRespHead getHead() {
    return this.head;
  }

  public ResultResp setHead(com.bangcar.app.mapi.base.MApiRespHead head) {
    this.head = head;
    return this;
  }

  public void unsetHead() {
    this.head = null;
  }

  /** Returns true if field head is set (has been assigned a value) and false otherwise */
  public boolean isSetHead() {
    return this.head != null;
  }

  public void setHeadIsSet(boolean value) {
    if (!value) {
      this.head = null;
    }
  }

  /**
   * 支付状态
   * 
   * @see com.bangcar.app.mapi.common.EPayState
   */
  public com.bangcar.app.mapi.common.EPayState getPayState() {
    return this.payState;
  }

  /**
   * 支付状态
   * 
   * @see com.bangcar.app.mapi.common.EPayState
   */
  public ResultResp setPayState(com.bangcar.app.mapi.common.EPayState payState) {
    this.payState = payState;
    return this;
  }

  public void unsetPayState() {
    this.payState = null;
  }

  /** Returns true if field payState is set (has been assigned a value) and false otherwise */
  public boolean isSetPayState() {
    return this.payState != null;
  }

  public void setPayStateIsSet(boolean value) {
    if (!value) {
      this.payState = null;
    }
  }

  /**
   * 失败原因，为空时不展示原因内容
   */
  public String getFailReason() {
    return this.failReason;
  }

  /**
   * 失败原因，为空时不展示原因内容
   */
  public ResultResp setFailReason(String failReason) {
    this.failReason = failReason;
    return this;
  }

  public void unsetFailReason() {
    this.failReason = null;
  }

  /** Returns true if field failReason is set (has been assigned a value) and false otherwise */
  public boolean isSetFailReason() {
    return this.failReason != null;
  }

  public void setFailReasonIsSet(boolean value) {
    if (!value) {
      this.failReason = null;
    }
  }

  public int getOrderItemsSize() {
    return (this.orderItems == null) ? 0 : this.orderItems.size();
  }

  public java.util.Iterator<com.bangcar.app.mapi.common.KV> getOrderItemsIterator() {
    return (this.orderItems == null) ? null : this.orderItems.iterator();
  }

  public void addToOrderItems(com.bangcar.app.mapi.common.KV elem) {
    if (this.orderItems == null) {
      this.orderItems = new ArrayList<com.bangcar.app.mapi.common.KV>();
    }
    this.orderItems.add(elem);
  }

  /**
   * 订单信息
   */
  public List<com.bangcar.app.mapi.common.KV> getOrderItems() {
    return this.orderItems;
  }

  /**
   * 订单信息
   */
  public ResultResp setOrderItems(List<com.bangcar.app.mapi.common.KV> orderItems) {
    this.orderItems = orderItems;
    return this;
  }

  public void unsetOrderItems() {
    this.orderItems = null;
  }

  /** Returns true if field orderItems is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderItems() {
    return this.orderItems != null;
  }

  public void setOrderItemsIsSet(boolean value) {
    if (!value) {
      this.orderItems = null;
    }
  }

  public int getInvestItemsSize() {
    return (this.investItems == null) ? 0 : this.investItems.size();
  }

  public java.util.Iterator<com.bangcar.app.mapi.common.KV> getInvestItemsIterator() {
    return (this.investItems == null) ? null : this.investItems.iterator();
  }

  public void addToInvestItems(com.bangcar.app.mapi.common.KV elem) {
    if (this.investItems == null) {
      this.investItems = new ArrayList<com.bangcar.app.mapi.common.KV>();
    }
    this.investItems.add(elem);
  }

  /**
   * 投资人信息
   */
  public List<com.bangcar.app.mapi.common.KV> getInvestItems() {
    return this.investItems;
  }

  /**
   * 投资人信息
   */
  public ResultResp setInvestItems(List<com.bangcar.app.mapi.common.KV> investItems) {
    this.investItems = investItems;
    return this;
  }

  public void unsetInvestItems() {
    this.investItems = null;
  }

  /** Returns true if field investItems is set (has been assigned a value) and false otherwise */
  public boolean isSetInvestItems() {
    return this.investItems != null;
  }

  public void setInvestItemsIsSet(boolean value) {
    if (!value) {
      this.investItems = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case HEAD:
      if (value == null) {
        unsetHead();
      } else {
        setHead((com.bangcar.app.mapi.base.MApiRespHead)value);
      }
      break;

    case PAY_STATE:
      if (value == null) {
        unsetPayState();
      } else {
        setPayState((com.bangcar.app.mapi.common.EPayState)value);
      }
      break;

    case FAIL_REASON:
      if (value == null) {
        unsetFailReason();
      } else {
        setFailReason((String)value);
      }
      break;

    case ORDER_ITEMS:
      if (value == null) {
        unsetOrderItems();
      } else {
        setOrderItems((List<com.bangcar.app.mapi.common.KV>)value);
      }
      break;

    case INVEST_ITEMS:
      if (value == null) {
        unsetInvestItems();
      } else {
        setInvestItems((List<com.bangcar.app.mapi.common.KV>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case HEAD:
      return getHead();

    case PAY_STATE:
      return getPayState();

    case FAIL_REASON:
      return getFailReason();

    case ORDER_ITEMS:
      return getOrderItems();

    case INVEST_ITEMS:
      return getInvestItems();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case HEAD:
      return isSetHead();
    case PAY_STATE:
      return isSetPayState();
    case FAIL_REASON:
      return isSetFailReason();
    case ORDER_ITEMS:
      return isSetOrderItems();
    case INVEST_ITEMS:
      return isSetInvestItems();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ResultResp)
      return this.equals((ResultResp)that);
    return false;
  }

  public boolean equals(ResultResp that) {
    if (that == null)
      return false;

    boolean this_present_head = true && this.isSetHead();
    boolean that_present_head = true && that.isSetHead();
    if (this_present_head || that_present_head) {
      if (!(this_present_head && that_present_head))
        return false;
      if (!this.head.equals(that.head))
        return false;
    }

    boolean this_present_payState = true && this.isSetPayState();
    boolean that_present_payState = true && that.isSetPayState();
    if (this_present_payState || that_present_payState) {
      if (!(this_present_payState && that_present_payState))
        return false;
      if (!this.payState.equals(that.payState))
        return false;
    }

    boolean this_present_failReason = true && this.isSetFailReason();
    boolean that_present_failReason = true && that.isSetFailReason();
    if (this_present_failReason || that_present_failReason) {
      if (!(this_present_failReason && that_present_failReason))
        return false;
      if (!this.failReason.equals(that.failReason))
        return false;
    }

    boolean this_present_orderItems = true && this.isSetOrderItems();
    boolean that_present_orderItems = true && that.isSetOrderItems();
    if (this_present_orderItems || that_present_orderItems) {
      if (!(this_present_orderItems && that_present_orderItems))
        return false;
      if (!this.orderItems.equals(that.orderItems))
        return false;
    }

    boolean this_present_investItems = true && this.isSetInvestItems();
    boolean that_present_investItems = true && that.isSetInvestItems();
    if (this_present_investItems || that_present_investItems) {
      if (!(this_present_investItems && that_present_investItems))
        return false;
      if (!this.investItems.equals(that.investItems))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ResultResp other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetHead()).compareTo(other.isSetHead());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHead()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.head, other.head);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayState()).compareTo(other.isSetPayState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payState, other.payState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFailReason()).compareTo(other.isSetFailReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFailReason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.failReason, other.failReason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderItems()).compareTo(other.isSetOrderItems());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderItems()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderItems, other.orderItems);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInvestItems()).compareTo(other.isSetInvestItems());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvestItems()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.investItems, other.investItems);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ResultResp(");
    boolean first = true;

    sb.append("head:");
    if (this.head == null) {
      sb.append("null");
    } else {
      sb.append(this.head);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("payState:");
    if (this.payState == null) {
      sb.append("null");
    } else {
      sb.append(this.payState);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("failReason:");
    if (this.failReason == null) {
      sb.append("null");
    } else {
      sb.append(this.failReason);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderItems:");
    if (this.orderItems == null) {
      sb.append("null");
    } else {
      sb.append(this.orderItems);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("investItems:");
    if (this.investItems == null) {
      sb.append("null");
    } else {
      sb.append(this.investItems);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (head != null) {
      head.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ResultRespStandardSchemeFactory implements SchemeFactory {
    public ResultRespStandardScheme getScheme() {
      return new ResultRespStandardScheme();
    }
  }

  private static class ResultRespStandardScheme extends StandardScheme<ResultResp> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ResultResp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HEAD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.head = new com.bangcar.app.mapi.base.MApiRespHead();
              struct.head.read(iprot);
              struct.setHeadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PAY_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.payState = com.bangcar.app.mapi.common.EPayState.findByValue(iprot.readI32());
              struct.setPayStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FAIL_REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.failReason = iprot.readString();
              struct.setFailReasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ORDER_ITEMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.orderItems = new ArrayList<com.bangcar.app.mapi.common.KV>(_list16.size);
                for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                {
                  com.bangcar.app.mapi.common.KV _elem18;
                  _elem18 = new com.bangcar.app.mapi.common.KV();
                  _elem18.read(iprot);
                  struct.orderItems.add(_elem18);
                }
                iprot.readListEnd();
              }
              struct.setOrderItemsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // INVEST_ITEMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list19 = iprot.readListBegin();
                struct.investItems = new ArrayList<com.bangcar.app.mapi.common.KV>(_list19.size);
                for (int _i20 = 0; _i20 < _list19.size; ++_i20)
                {
                  com.bangcar.app.mapi.common.KV _elem21;
                  _elem21 = new com.bangcar.app.mapi.common.KV();
                  _elem21.read(iprot);
                  struct.investItems.add(_elem21);
                }
                iprot.readListEnd();
              }
              struct.setInvestItemsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ResultResp struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.head != null) {
        oprot.writeFieldBegin(HEAD_FIELD_DESC);
        struct.head.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.payState != null) {
        oprot.writeFieldBegin(PAY_STATE_FIELD_DESC);
        oprot.writeI32(struct.payState.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.failReason != null) {
        oprot.writeFieldBegin(FAIL_REASON_FIELD_DESC);
        oprot.writeString(struct.failReason);
        oprot.writeFieldEnd();
      }
      if (struct.orderItems != null) {
        oprot.writeFieldBegin(ORDER_ITEMS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.orderItems.size()));
          for (com.bangcar.app.mapi.common.KV _iter22 : struct.orderItems)
          {
            _iter22.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.investItems != null) {
        oprot.writeFieldBegin(INVEST_ITEMS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.investItems.size()));
          for (com.bangcar.app.mapi.common.KV _iter23 : struct.investItems)
          {
            _iter23.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ResultRespTupleSchemeFactory implements SchemeFactory {
    public ResultRespTupleScheme getScheme() {
      return new ResultRespTupleScheme();
    }
  }

  private static class ResultRespTupleScheme extends TupleScheme<ResultResp> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ResultResp struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetHead()) {
        optionals.set(0);
      }
      if (struct.isSetPayState()) {
        optionals.set(1);
      }
      if (struct.isSetFailReason()) {
        optionals.set(2);
      }
      if (struct.isSetOrderItems()) {
        optionals.set(3);
      }
      if (struct.isSetInvestItems()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetHead()) {
        struct.head.write(oprot);
      }
      if (struct.isSetPayState()) {
        oprot.writeI32(struct.payState.getValue());
      }
      if (struct.isSetFailReason()) {
        oprot.writeString(struct.failReason);
      }
      if (struct.isSetOrderItems()) {
        {
          oprot.writeI32(struct.orderItems.size());
          for (com.bangcar.app.mapi.common.KV _iter24 : struct.orderItems)
          {
            _iter24.write(oprot);
          }
        }
      }
      if (struct.isSetInvestItems()) {
        {
          oprot.writeI32(struct.investItems.size());
          for (com.bangcar.app.mapi.common.KV _iter25 : struct.investItems)
          {
            _iter25.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ResultResp struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.head = new com.bangcar.app.mapi.base.MApiRespHead();
        struct.head.read(iprot);
        struct.setHeadIsSet(true);
      }
      if (incoming.get(1)) {
        struct.payState = com.bangcar.app.mapi.common.EPayState.findByValue(iprot.readI32());
        struct.setPayStateIsSet(true);
      }
      if (incoming.get(2)) {
        struct.failReason = iprot.readString();
        struct.setFailReasonIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list26 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.orderItems = new ArrayList<com.bangcar.app.mapi.common.KV>(_list26.size);
          for (int _i27 = 0; _i27 < _list26.size; ++_i27)
          {
            com.bangcar.app.mapi.common.KV _elem28;
            _elem28 = new com.bangcar.app.mapi.common.KV();
            _elem28.read(iprot);
            struct.orderItems.add(_elem28);
          }
        }
        struct.setOrderItemsIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.investItems = new ArrayList<com.bangcar.app.mapi.common.KV>(_list29.size);
          for (int _i30 = 0; _i30 < _list29.size; ++_i30)
          {
            com.bangcar.app.mapi.common.KV _elem31;
            _elem31 = new com.bangcar.app.mapi.common.KV();
            _elem31.read(iprot);
            struct.investItems.add(_elem31);
          }
        }
        struct.setInvestItemsIsSet(true);
      }
    }
  }

}

