/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.bangcar.app.mapi.pay;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.EncodingUtils;

import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;

public class SubmitReq implements org.apache.thrift.TBase<SubmitReq, SubmitReq._Fields>, java.io.Serializable, Cloneable, Comparable<SubmitReq> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SubmitReq");

  private static final org.apache.thrift.protocol.TField HEAD_FIELD_DESC = new org.apache.thrift.protocol.TField("head", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TRANS_PWD_FIELD_DESC = new org.apache.thrift.protocol.TField("transPwd", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField BANKCARD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bankcardId", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SubmitReqStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SubmitReqTupleSchemeFactory());
  }

  public com.bangcar.app.mapi.base.MApiReqHead head; // required
  /**
   * 订单号
   */
  public String orderId; // required
  /**
   * 交易密码
   */
  public String transPwd; // required
  /**
   * 手机验证码
   */
  public String token; // required
  /**
   * 银行卡
   */
  public int bankcardId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HEAD((short)1, "head"),
    /**
     * 订单号
     */
    ORDER_ID((short)2, "orderId"),
    /**
     * 交易密码
     */
    TRANS_PWD((short)3, "transPwd"),
    /**
     * 手机验证码
     */
    TOKEN((short)4, "token"),
    /**
     * 银行卡
     */
    BANKCARD_ID((short)5, "bankcardId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HEAD
          return HEAD;
        case 2: // ORDER_ID
          return ORDER_ID;
        case 3: // TRANS_PWD
          return TRANS_PWD;
        case 4: // TOKEN
          return TOKEN;
        case 5: // BANKCARD_ID
          return BANKCARD_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BANKCARDID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HEAD, new org.apache.thrift.meta_data.FieldMetaData("head", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bangcar.app.mapi.base.MApiReqHead.class)));
    tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRANS_PWD, new org.apache.thrift.meta_data.FieldMetaData("transPwd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANKCARD_ID, new org.apache.thrift.meta_data.FieldMetaData("bankcardId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SubmitReq.class, metaDataMap);
  }

  public SubmitReq() {
  }

  public SubmitReq(
    com.bangcar.app.mapi.base.MApiReqHead head,
    String orderId,
    String transPwd,
    String token,
    int bankcardId)
  {
    this();
    this.head = head;
    this.orderId = orderId;
    this.transPwd = transPwd;
    this.token = token;
    this.bankcardId = bankcardId;
    setBankcardIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SubmitReq(SubmitReq other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetHead()) {
      this.head = new com.bangcar.app.mapi.base.MApiReqHead(other.head);
    }
    if (other.isSetOrderId()) {
      this.orderId = other.orderId;
    }
    if (other.isSetTransPwd()) {
      this.transPwd = other.transPwd;
    }
    if (other.isSetToken()) {
      this.token = other.token;
    }
    this.bankcardId = other.bankcardId;
  }

  public SubmitReq deepCopy() {
    return new SubmitReq(this);
  }

  @Override
  public void clear() {
    this.head = null;
    this.orderId = null;
    this.transPwd = null;
    this.token = null;
    setBankcardIdIsSet(false);
    this.bankcardId = 0;
  }

  public com.bangcar.app.mapi.base.MApiReqHead getHead() {
    return this.head;
  }

  public SubmitReq setHead(com.bangcar.app.mapi.base.MApiReqHead head) {
    this.head = head;
    return this;
  }

  public void unsetHead() {
    this.head = null;
  }

  /** Returns true if field head is set (has been assigned a value) and false otherwise */
  public boolean isSetHead() {
    return this.head != null;
  }

  public void setHeadIsSet(boolean value) {
    if (!value) {
      this.head = null;
    }
  }

  /**
   * 订单号
   */
  public String getOrderId() {
    return this.orderId;
  }

  /**
   * 订单号
   */
  public SubmitReq setOrderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

  public void unsetOrderId() {
    this.orderId = null;
  }

  /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderId() {
    return this.orderId != null;
  }

  public void setOrderIdIsSet(boolean value) {
    if (!value) {
      this.orderId = null;
    }
  }

  /**
   * 交易密码
   */
  public String getTransPwd() {
    return this.transPwd;
  }

  /**
   * 交易密码
   */
  public SubmitReq setTransPwd(String transPwd) {
    this.transPwd = transPwd;
    return this;
  }

  public void unsetTransPwd() {
    this.transPwd = null;
  }

  /** Returns true if field transPwd is set (has been assigned a value) and false otherwise */
  public boolean isSetTransPwd() {
    return this.transPwd != null;
  }

  public void setTransPwdIsSet(boolean value) {
    if (!value) {
      this.transPwd = null;
    }
  }

  /**
   * 手机验证码
   */
  public String getToken() {
    return this.token;
  }

  /**
   * 手机验证码
   */
  public SubmitReq setToken(String token) {
    this.token = token;
    return this;
  }

  public void unsetToken() {
    this.token = null;
  }

  /** Returns true if field token is set (has been assigned a value) and false otherwise */
  public boolean isSetToken() {
    return this.token != null;
  }

  public void setTokenIsSet(boolean value) {
    if (!value) {
      this.token = null;
    }
  }

  /**
   * 银行卡
   */
  public int getBankcardId() {
    return this.bankcardId;
  }

  /**
   * 银行卡
   */
  public SubmitReq setBankcardId(int bankcardId) {
    this.bankcardId = bankcardId;
    setBankcardIdIsSet(true);
    return this;
  }

  public void unsetBankcardId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BANKCARDID_ISSET_ID);
  }

  /** Returns true if field bankcardId is set (has been assigned a value) and false otherwise */
  public boolean isSetBankcardId() {
    return EncodingUtils.testBit(__isset_bitfield, __BANKCARDID_ISSET_ID);
  }

  public void setBankcardIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BANKCARDID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case HEAD:
      if (value == null) {
        unsetHead();
      } else {
        setHead((com.bangcar.app.mapi.base.MApiReqHead)value);
      }
      break;

    case ORDER_ID:
      if (value == null) {
        unsetOrderId();
      } else {
        setOrderId((String)value);
      }
      break;

    case TRANS_PWD:
      if (value == null) {
        unsetTransPwd();
      } else {
        setTransPwd((String)value);
      }
      break;

    case TOKEN:
      if (value == null) {
        unsetToken();
      } else {
        setToken((String)value);
      }
      break;

    case BANKCARD_ID:
      if (value == null) {
        unsetBankcardId();
      } else {
        setBankcardId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case HEAD:
      return getHead();

    case ORDER_ID:
      return getOrderId();

    case TRANS_PWD:
      return getTransPwd();

    case TOKEN:
      return getToken();

    case BANKCARD_ID:
      return Integer.valueOf(getBankcardId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case HEAD:
      return isSetHead();
    case ORDER_ID:
      return isSetOrderId();
    case TRANS_PWD:
      return isSetTransPwd();
    case TOKEN:
      return isSetToken();
    case BANKCARD_ID:
      return isSetBankcardId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SubmitReq)
      return this.equals((SubmitReq)that);
    return false;
  }

  public boolean equals(SubmitReq that) {
    if (that == null)
      return false;

    boolean this_present_head = true && this.isSetHead();
    boolean that_present_head = true && that.isSetHead();
    if (this_present_head || that_present_head) {
      if (!(this_present_head && that_present_head))
        return false;
      if (!this.head.equals(that.head))
        return false;
    }

    boolean this_present_orderId = true && this.isSetOrderId();
    boolean that_present_orderId = true && that.isSetOrderId();
    if (this_present_orderId || that_present_orderId) {
      if (!(this_present_orderId && that_present_orderId))
        return false;
      if (!this.orderId.equals(that.orderId))
        return false;
    }

    boolean this_present_transPwd = true && this.isSetTransPwd();
    boolean that_present_transPwd = true && that.isSetTransPwd();
    if (this_present_transPwd || that_present_transPwd) {
      if (!(this_present_transPwd && that_present_transPwd))
        return false;
      if (!this.transPwd.equals(that.transPwd))
        return false;
    }

    boolean this_present_token = true && this.isSetToken();
    boolean that_present_token = true && that.isSetToken();
    if (this_present_token || that_present_token) {
      if (!(this_present_token && that_present_token))
        return false;
      if (!this.token.equals(that.token))
        return false;
    }

    boolean this_present_bankcardId = true;
    boolean that_present_bankcardId = true;
    if (this_present_bankcardId || that_present_bankcardId) {
      if (!(this_present_bankcardId && that_present_bankcardId))
        return false;
      if (this.bankcardId != that.bankcardId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(SubmitReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetHead()).compareTo(other.isSetHead());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHead()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.head, other.head);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransPwd()).compareTo(other.isSetTransPwd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransPwd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transPwd, other.transPwd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankcardId()).compareTo(other.isSetBankcardId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankcardId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankcardId, other.bankcardId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SubmitReq(");
    boolean first = true;

    sb.append("head:");
    if (this.head == null) {
      sb.append("null");
    } else {
      sb.append(this.head);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderId:");
    if (this.orderId == null) {
      sb.append("null");
    } else {
      sb.append(this.orderId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("transPwd:");
    if (this.transPwd == null) {
      sb.append("null");
    } else {
      sb.append(this.transPwd);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("token:");
    if (this.token == null) {
      sb.append("null");
    } else {
      sb.append(this.token);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankcardId:");
    sb.append(this.bankcardId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (head != null) {
      head.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SubmitReqStandardSchemeFactory implements SchemeFactory {
    public SubmitReqStandardScheme getScheme() {
      return new SubmitReqStandardScheme();
    }
  }

  private static class SubmitReqStandardScheme extends StandardScheme<SubmitReq> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SubmitReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HEAD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.head = new com.bangcar.app.mapi.base.MApiReqHead();
              struct.head.read(iprot);
              struct.setHeadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderId = iprot.readString();
              struct.setOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TRANS_PWD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.transPwd = iprot.readString();
              struct.setTransPwdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.token = iprot.readString();
              struct.setTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BANKCARD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bankcardId = iprot.readI32();
              struct.setBankcardIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SubmitReq struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.head != null) {
        oprot.writeFieldBegin(HEAD_FIELD_DESC);
        struct.head.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.orderId != null) {
        oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
        oprot.writeString(struct.orderId);
        oprot.writeFieldEnd();
      }
      if (struct.transPwd != null) {
        oprot.writeFieldBegin(TRANS_PWD_FIELD_DESC);
        oprot.writeString(struct.transPwd);
        oprot.writeFieldEnd();
      }
      if (struct.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(struct.token);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BANKCARD_ID_FIELD_DESC);
      oprot.writeI32(struct.bankcardId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SubmitReqTupleSchemeFactory implements SchemeFactory {
    public SubmitReqTupleScheme getScheme() {
      return new SubmitReqTupleScheme();
    }
  }

  private static class SubmitReqTupleScheme extends TupleScheme<SubmitReq> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SubmitReq struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetHead()) {
        optionals.set(0);
      }
      if (struct.isSetOrderId()) {
        optionals.set(1);
      }
      if (struct.isSetTransPwd()) {
        optionals.set(2);
      }
      if (struct.isSetToken()) {
        optionals.set(3);
      }
      if (struct.isSetBankcardId()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetHead()) {
        struct.head.write(oprot);
      }
      if (struct.isSetOrderId()) {
        oprot.writeString(struct.orderId);
      }
      if (struct.isSetTransPwd()) {
        oprot.writeString(struct.transPwd);
      }
      if (struct.isSetToken()) {
        oprot.writeString(struct.token);
      }
      if (struct.isSetBankcardId()) {
        oprot.writeI32(struct.bankcardId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SubmitReq struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.head = new com.bangcar.app.mapi.base.MApiReqHead();
        struct.head.read(iprot);
        struct.setHeadIsSet(true);
      }
      if (incoming.get(1)) {
        struct.orderId = iprot.readString();
        struct.setOrderIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.transPwd = iprot.readString();
        struct.setTransPwdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
      }
      if (incoming.get(4)) {
        struct.bankcardId = iprot.readI32();
        struct.setBankcardIdIsSet(true);
      }
    }
  }

}

