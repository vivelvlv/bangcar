/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.bangcar.app.mapi.pay;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.EncodingUtils;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;

public class PayResp implements org.apache.thrift.TBase<PayResp, PayResp._Fields>, java.io.Serializable, Cloneable, Comparable<PayResp> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PayResp");

  private static final org.apache.thrift.protocol.TField HEAD_FIELD_DESC = new org.apache.thrift.protocol.TField("head", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField BANKCARDS_FIELD_DESC = new org.apache.thrift.protocol.TField("bankcards", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField AGREES_FIELD_DESC = new org.apache.thrift.protocol.TField("agrees", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField REMAIN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("remainTime", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField PRODUCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("productName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TOTAL_PRICE_E6_FIELD_DESC = new org.apache.thrift.protocol.TField("totalPriceE6", org.apache.thrift.protocol.TType.I64, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PayRespStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PayRespTupleSchemeFactory());
  }

  public com.bangcar.app.mapi.base.MApiRespHead head; // required
  /**
   * 所有银行卡
   */
  public List<com.bangcar.app.mapi.common.Bankcard> bankcards; // required
  /**
   * 协议
   */
  public List<com.bangcar.app.mapi.common.Agree> agrees; // required
  /**
   * 剩余支付时间
   */
  public int remainTime; // required
  /**
   * 产品名称
   */
  public String productName; // required
  /**
   * 订单金额
   */
  public long totalPriceE6; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HEAD((short)1, "head"),
    /**
     * 所有银行卡
     */
    BANKCARDS((short)2, "bankcards"),
    /**
     * 协议
     */
    AGREES((short)3, "agrees"),
    /**
     * 剩余支付时间
     */
    REMAIN_TIME((short)4, "remainTime"),
    /**
     * 产品名称
     */
    PRODUCT_NAME((short)5, "productName"),
    /**
     * 订单金额
     */
    TOTAL_PRICE_E6((short)6, "totalPriceE6");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HEAD
          return HEAD;
        case 2: // BANKCARDS
          return BANKCARDS;
        case 3: // AGREES
          return AGREES;
        case 4: // REMAIN_TIME
          return REMAIN_TIME;
        case 5: // PRODUCT_NAME
          return PRODUCT_NAME;
        case 6: // TOTAL_PRICE_E6
          return TOTAL_PRICE_E6;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REMAINTIME_ISSET_ID = 0;
  private static final int __TOTALPRICEE6_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HEAD, new org.apache.thrift.meta_data.FieldMetaData("head", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bangcar.app.mapi.base.MApiRespHead.class)));
    tmpMap.put(_Fields.BANKCARDS, new org.apache.thrift.meta_data.FieldMetaData("bankcards", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bangcar.app.mapi.common.Bankcard.class))));
    tmpMap.put(_Fields.AGREES, new org.apache.thrift.meta_data.FieldMetaData("agrees", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bangcar.app.mapi.common.Agree.class))));
    tmpMap.put(_Fields.REMAIN_TIME, new org.apache.thrift.meta_data.FieldMetaData("remainTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRODUCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("productName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_PRICE_E6, new org.apache.thrift.meta_data.FieldMetaData("totalPriceE6", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PayResp.class, metaDataMap);
  }

  public PayResp() {
  }

  public PayResp(
    com.bangcar.app.mapi.base.MApiRespHead head,
    List<com.bangcar.app.mapi.common.Bankcard> bankcards,
    List<com.bangcar.app.mapi.common.Agree> agrees,
    int remainTime,
    String productName,
    long totalPriceE6)
  {
    this();
    this.head = head;
    this.bankcards = bankcards;
    this.agrees = agrees;
    this.remainTime = remainTime;
    setRemainTimeIsSet(true);
    this.productName = productName;
    this.totalPriceE6 = totalPriceE6;
    setTotalPriceE6IsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PayResp(PayResp other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetHead()) {
      this.head = new com.bangcar.app.mapi.base.MApiRespHead(other.head);
    }
    if (other.isSetBankcards()) {
      List<com.bangcar.app.mapi.common.Bankcard> __this__bankcards = new ArrayList<com.bangcar.app.mapi.common.Bankcard>(other.bankcards.size());
      for (com.bangcar.app.mapi.common.Bankcard other_element : other.bankcards) {
        __this__bankcards.add(new com.bangcar.app.mapi.common.Bankcard(other_element));
      }
      this.bankcards = __this__bankcards;
    }
    if (other.isSetAgrees()) {
      List<com.bangcar.app.mapi.common.Agree> __this__agrees = new ArrayList<com.bangcar.app.mapi.common.Agree>(other.agrees.size());
      for (com.bangcar.app.mapi.common.Agree other_element : other.agrees) {
        __this__agrees.add(new com.bangcar.app.mapi.common.Agree(other_element));
      }
      this.agrees = __this__agrees;
    }
    this.remainTime = other.remainTime;
    if (other.isSetProductName()) {
      this.productName = other.productName;
    }
    this.totalPriceE6 = other.totalPriceE6;
  }

  public PayResp deepCopy() {
    return new PayResp(this);
  }

  @Override
  public void clear() {
    this.head = null;
    this.bankcards = null;
    this.agrees = null;
    setRemainTimeIsSet(false);
    this.remainTime = 0;
    this.productName = null;
    setTotalPriceE6IsSet(false);
    this.totalPriceE6 = 0;
  }

  public com.bangcar.app.mapi.base.MApiRespHead getHead() {
    return this.head;
  }

  public PayResp setHead(com.bangcar.app.mapi.base.MApiRespHead head) {
    this.head = head;
    return this;
  }

  public void unsetHead() {
    this.head = null;
  }

  /** Returns true if field head is set (has been assigned a value) and false otherwise */
  public boolean isSetHead() {
    return this.head != null;
  }

  public void setHeadIsSet(boolean value) {
    if (!value) {
      this.head = null;
    }
  }

  public int getBankcardsSize() {
    return (this.bankcards == null) ? 0 : this.bankcards.size();
  }

  public java.util.Iterator<com.bangcar.app.mapi.common.Bankcard> getBankcardsIterator() {
    return (this.bankcards == null) ? null : this.bankcards.iterator();
  }

  public void addToBankcards(com.bangcar.app.mapi.common.Bankcard elem) {
    if (this.bankcards == null) {
      this.bankcards = new ArrayList<com.bangcar.app.mapi.common.Bankcard>();
    }
    this.bankcards.add(elem);
  }

  /**
   * 所有银行卡
   */
  public List<com.bangcar.app.mapi.common.Bankcard> getBankcards() {
    return this.bankcards;
  }

  /**
   * 所有银行卡
   */
  public PayResp setBankcards(List<com.bangcar.app.mapi.common.Bankcard> bankcards) {
    this.bankcards = bankcards;
    return this;
  }

  public void unsetBankcards() {
    this.bankcards = null;
  }

  /** Returns true if field bankcards is set (has been assigned a value) and false otherwise */
  public boolean isSetBankcards() {
    return this.bankcards != null;
  }

  public void setBankcardsIsSet(boolean value) {
    if (!value) {
      this.bankcards = null;
    }
  }

  public int getAgreesSize() {
    return (this.agrees == null) ? 0 : this.agrees.size();
  }

  public java.util.Iterator<com.bangcar.app.mapi.common.Agree> getAgreesIterator() {
    return (this.agrees == null) ? null : this.agrees.iterator();
  }

  public void addToAgrees(com.bangcar.app.mapi.common.Agree elem) {
    if (this.agrees == null) {
      this.agrees = new ArrayList<com.bangcar.app.mapi.common.Agree>();
    }
    this.agrees.add(elem);
  }

  /**
   * 协议
   */
  public List<com.bangcar.app.mapi.common.Agree> getAgrees() {
    return this.agrees;
  }

  /**
   * 协议
   */
  public PayResp setAgrees(List<com.bangcar.app.mapi.common.Agree> agrees) {
    this.agrees = agrees;
    return this;
  }

  public void unsetAgrees() {
    this.agrees = null;
  }

  /** Returns true if field agrees is set (has been assigned a value) and false otherwise */
  public boolean isSetAgrees() {
    return this.agrees != null;
  }

  public void setAgreesIsSet(boolean value) {
    if (!value) {
      this.agrees = null;
    }
  }

  /**
   * 剩余支付时间
   */
  public int getRemainTime() {
    return this.remainTime;
  }

  /**
   * 剩余支付时间
   */
  public PayResp setRemainTime(int remainTime) {
    this.remainTime = remainTime;
    setRemainTimeIsSet(true);
    return this;
  }

  public void unsetRemainTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REMAINTIME_ISSET_ID);
  }

  /** Returns true if field remainTime is set (has been assigned a value) and false otherwise */
  public boolean isSetRemainTime() {
    return EncodingUtils.testBit(__isset_bitfield, __REMAINTIME_ISSET_ID);
  }

  public void setRemainTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REMAINTIME_ISSET_ID, value);
  }

  /**
   * 产品名称
   */
  public String getProductName() {
    return this.productName;
  }

  /**
   * 产品名称
   */
  public PayResp setProductName(String productName) {
    this.productName = productName;
    return this;
  }

  public void unsetProductName() {
    this.productName = null;
  }

  /** Returns true if field productName is set (has been assigned a value) and false otherwise */
  public boolean isSetProductName() {
    return this.productName != null;
  }

  public void setProductNameIsSet(boolean value) {
    if (!value) {
      this.productName = null;
    }
  }

  /**
   * 订单金额
   */
  public long getTotalPriceE6() {
    return this.totalPriceE6;
  }

  /**
   * 订单金额
   */
  public PayResp setTotalPriceE6(long totalPriceE6) {
    this.totalPriceE6 = totalPriceE6;
    setTotalPriceE6IsSet(true);
    return this;
  }

  public void unsetTotalPriceE6() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALPRICEE6_ISSET_ID);
  }

  /** Returns true if field totalPriceE6 is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalPriceE6() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALPRICEE6_ISSET_ID);
  }

  public void setTotalPriceE6IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALPRICEE6_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case HEAD:
      if (value == null) {
        unsetHead();
      } else {
        setHead((com.bangcar.app.mapi.base.MApiRespHead)value);
      }
      break;

    case BANKCARDS:
      if (value == null) {
        unsetBankcards();
      } else {
        setBankcards((List<com.bangcar.app.mapi.common.Bankcard>)value);
      }
      break;

    case AGREES:
      if (value == null) {
        unsetAgrees();
      } else {
        setAgrees((List<com.bangcar.app.mapi.common.Agree>)value);
      }
      break;

    case REMAIN_TIME:
      if (value == null) {
        unsetRemainTime();
      } else {
        setRemainTime((Integer)value);
      }
      break;

    case PRODUCT_NAME:
      if (value == null) {
        unsetProductName();
      } else {
        setProductName((String)value);
      }
      break;

    case TOTAL_PRICE_E6:
      if (value == null) {
        unsetTotalPriceE6();
      } else {
        setTotalPriceE6((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case HEAD:
      return getHead();

    case BANKCARDS:
      return getBankcards();

    case AGREES:
      return getAgrees();

    case REMAIN_TIME:
      return Integer.valueOf(getRemainTime());

    case PRODUCT_NAME:
      return getProductName();

    case TOTAL_PRICE_E6:
      return Long.valueOf(getTotalPriceE6());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case HEAD:
      return isSetHead();
    case BANKCARDS:
      return isSetBankcards();
    case AGREES:
      return isSetAgrees();
    case REMAIN_TIME:
      return isSetRemainTime();
    case PRODUCT_NAME:
      return isSetProductName();
    case TOTAL_PRICE_E6:
      return isSetTotalPriceE6();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PayResp)
      return this.equals((PayResp)that);
    return false;
  }

  public boolean equals(PayResp that) {
    if (that == null)
      return false;

    boolean this_present_head = true && this.isSetHead();
    boolean that_present_head = true && that.isSetHead();
    if (this_present_head || that_present_head) {
      if (!(this_present_head && that_present_head))
        return false;
      if (!this.head.equals(that.head))
        return false;
    }

    boolean this_present_bankcards = true && this.isSetBankcards();
    boolean that_present_bankcards = true && that.isSetBankcards();
    if (this_present_bankcards || that_present_bankcards) {
      if (!(this_present_bankcards && that_present_bankcards))
        return false;
      if (!this.bankcards.equals(that.bankcards))
        return false;
    }

    boolean this_present_agrees = true && this.isSetAgrees();
    boolean that_present_agrees = true && that.isSetAgrees();
    if (this_present_agrees || that_present_agrees) {
      if (!(this_present_agrees && that_present_agrees))
        return false;
      if (!this.agrees.equals(that.agrees))
        return false;
    }

    boolean this_present_remainTime = true;
    boolean that_present_remainTime = true;
    if (this_present_remainTime || that_present_remainTime) {
      if (!(this_present_remainTime && that_present_remainTime))
        return false;
      if (this.remainTime != that.remainTime)
        return false;
    }

    boolean this_present_productName = true && this.isSetProductName();
    boolean that_present_productName = true && that.isSetProductName();
    if (this_present_productName || that_present_productName) {
      if (!(this_present_productName && that_present_productName))
        return false;
      if (!this.productName.equals(that.productName))
        return false;
    }

    boolean this_present_totalPriceE6 = true;
    boolean that_present_totalPriceE6 = true;
    if (this_present_totalPriceE6 || that_present_totalPriceE6) {
      if (!(this_present_totalPriceE6 && that_present_totalPriceE6))
        return false;
      if (this.totalPriceE6 != that.totalPriceE6)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(PayResp other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetHead()).compareTo(other.isSetHead());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHead()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.head, other.head);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankcards()).compareTo(other.isSetBankcards());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankcards()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankcards, other.bankcards);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAgrees()).compareTo(other.isSetAgrees());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgrees()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agrees, other.agrees);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemainTime()).compareTo(other.isSetRemainTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemainTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remainTime, other.remainTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductName()).compareTo(other.isSetProductName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productName, other.productName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalPriceE6()).compareTo(other.isSetTotalPriceE6());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalPriceE6()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalPriceE6, other.totalPriceE6);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PayResp(");
    boolean first = true;

    sb.append("head:");
    if (this.head == null) {
      sb.append("null");
    } else {
      sb.append(this.head);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankcards:");
    if (this.bankcards == null) {
      sb.append("null");
    } else {
      sb.append(this.bankcards);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("agrees:");
    if (this.agrees == null) {
      sb.append("null");
    } else {
      sb.append(this.agrees);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remainTime:");
    sb.append(this.remainTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("productName:");
    if (this.productName == null) {
      sb.append("null");
    } else {
      sb.append(this.productName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalPriceE6:");
    sb.append(this.totalPriceE6);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (head != null) {
      head.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PayRespStandardSchemeFactory implements SchemeFactory {
    public PayRespStandardScheme getScheme() {
      return new PayRespStandardScheme();
    }
  }

  private static class PayRespStandardScheme extends StandardScheme<PayResp> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PayResp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HEAD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.head = new com.bangcar.app.mapi.base.MApiRespHead();
              struct.head.read(iprot);
              struct.setHeadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BANKCARDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.bankcards = new ArrayList<com.bangcar.app.mapi.common.Bankcard>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  com.bangcar.app.mapi.common.Bankcard _elem2;
                  _elem2 = new com.bangcar.app.mapi.common.Bankcard();
                  _elem2.read(iprot);
                  struct.bankcards.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setBankcardsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // AGREES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.agrees = new ArrayList<com.bangcar.app.mapi.common.Agree>(_list3.size);
                for (int _i4 = 0; _i4 < _list3.size; ++_i4)
                {
                  com.bangcar.app.mapi.common.Agree _elem5;
                  _elem5 = new com.bangcar.app.mapi.common.Agree();
                  _elem5.read(iprot);
                  struct.agrees.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setAgreesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REMAIN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.remainTime = iprot.readI32();
              struct.setRemainTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PRODUCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productName = iprot.readString();
              struct.setProductNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TOTAL_PRICE_E6
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.totalPriceE6 = iprot.readI64();
              struct.setTotalPriceE6IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PayResp struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.head != null) {
        oprot.writeFieldBegin(HEAD_FIELD_DESC);
        struct.head.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.bankcards != null) {
        oprot.writeFieldBegin(BANKCARDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.bankcards.size()));
          for (com.bangcar.app.mapi.common.Bankcard _iter6 : struct.bankcards)
          {
            _iter6.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.agrees != null) {
        oprot.writeFieldBegin(AGREES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.agrees.size()));
          for (com.bangcar.app.mapi.common.Agree _iter7 : struct.agrees)
          {
            _iter7.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REMAIN_TIME_FIELD_DESC);
      oprot.writeI32(struct.remainTime);
      oprot.writeFieldEnd();
      if (struct.productName != null) {
        oprot.writeFieldBegin(PRODUCT_NAME_FIELD_DESC);
        oprot.writeString(struct.productName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOTAL_PRICE_E6_FIELD_DESC);
      oprot.writeI64(struct.totalPriceE6);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PayRespTupleSchemeFactory implements SchemeFactory {
    public PayRespTupleScheme getScheme() {
      return new PayRespTupleScheme();
    }
  }

  private static class PayRespTupleScheme extends TupleScheme<PayResp> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PayResp struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetHead()) {
        optionals.set(0);
      }
      if (struct.isSetBankcards()) {
        optionals.set(1);
      }
      if (struct.isSetAgrees()) {
        optionals.set(2);
      }
      if (struct.isSetRemainTime()) {
        optionals.set(3);
      }
      if (struct.isSetProductName()) {
        optionals.set(4);
      }
      if (struct.isSetTotalPriceE6()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetHead()) {
        struct.head.write(oprot);
      }
      if (struct.isSetBankcards()) {
        {
          oprot.writeI32(struct.bankcards.size());
          for (com.bangcar.app.mapi.common.Bankcard _iter8 : struct.bankcards)
          {
            _iter8.write(oprot);
          }
        }
      }
      if (struct.isSetAgrees()) {
        {
          oprot.writeI32(struct.agrees.size());
          for (com.bangcar.app.mapi.common.Agree _iter9 : struct.agrees)
          {
            _iter9.write(oprot);
          }
        }
      }
      if (struct.isSetRemainTime()) {
        oprot.writeI32(struct.remainTime);
      }
      if (struct.isSetProductName()) {
        oprot.writeString(struct.productName);
      }
      if (struct.isSetTotalPriceE6()) {
        oprot.writeI64(struct.totalPriceE6);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PayResp struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.head = new com.bangcar.app.mapi.base.MApiRespHead();
        struct.head.read(iprot);
        struct.setHeadIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.bankcards = new ArrayList<com.bangcar.app.mapi.common.Bankcard>(_list10.size);
          for (int _i11 = 0; _i11 < _list10.size; ++_i11)
          {
            com.bangcar.app.mapi.common.Bankcard _elem12;
            _elem12 = new com.bangcar.app.mapi.common.Bankcard();
            _elem12.read(iprot);
            struct.bankcards.add(_elem12);
          }
        }
        struct.setBankcardsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.agrees = new ArrayList<com.bangcar.app.mapi.common.Agree>(_list13.size);
          for (int _i14 = 0; _i14 < _list13.size; ++_i14)
          {
            com.bangcar.app.mapi.common.Agree _elem15;
            _elem15 = new com.bangcar.app.mapi.common.Agree();
            _elem15.read(iprot);
            struct.agrees.add(_elem15);
          }
        }
        struct.setAgreesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.remainTime = iprot.readI32();
        struct.setRemainTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.productName = iprot.readString();
        struct.setProductNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.totalPriceE6 = iprot.readI64();
        struct.setTotalPriceE6IsSet(true);
      }
    }
  }

}

